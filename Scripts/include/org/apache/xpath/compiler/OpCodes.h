//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/compiler/OpCodes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathCompilerOpCodes")
#ifdef RESTRICT_OrgApacheXpathCompilerOpCodes
#define INCLUDE_ALL_OrgApacheXpathCompilerOpCodes 0
#else
#define INCLUDE_ALL_OrgApacheXpathCompilerOpCodes 1
#endif
#undef RESTRICT_OrgApacheXpathCompilerOpCodes

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgApacheXpathCompilerOpCodes_) && (INCLUDE_ALL_OrgApacheXpathCompilerOpCodes || defined(INCLUDE_OrgApacheXpathCompilerOpCodes))
#define OrgApacheXpathCompilerOpCodes_

/*!
 @brief Operations codes for XPath.
 Code for the descriptions of the operations codes:
 [UPPER CASE] indicates a literal value,
 [lower case] is a description of a value,
 ([length] always indicates the length of the operation,
 including the operations code and the length integer.)
 {UPPER CASE} indicates the given production,
 {description} is the description of a new production,
 (For instance, {boolean expression} means some expression
 that should be resolved to a boolean.)
 * means that it occurs zero or more times,
 + means that it occurs one or more times,
 ? means that it is optional.
 returns: indicates what the production should return.
 */
@interface OrgApacheXpathCompilerOpCodes : NSObject

+ (jint)ENDOP;

+ (jint)EMPTY;

+ (jint)ELEMWILDCARD;

+ (jint)OP_XPATH;

+ (jint)OP_OR;

+ (jint)OP_AND;

+ (jint)OP_NOTEQUALS;

+ (jint)OP_EQUALS;

+ (jint)OP_LTE;

+ (jint)OP_LT;

+ (jint)OP_GTE;

+ (jint)OP_GT;

+ (jint)OP_PLUS;

+ (jint)OP_MINUS;

+ (jint)OP_MULT;

+ (jint)OP_DIV;

+ (jint)OP_MOD;

+ (jint)OP_QUO;

+ (jint)OP_NEG;

+ (jint)OP_STRING;

+ (jint)OP_BOOL;

+ (jint)OP_NUMBER;

+ (jint)OP_UNION;

+ (jint)OP_LITERAL;

+ (jint)FIRST_NODESET_OP;

+ (jint)OP_VARIABLE;

+ (jint)OP_GROUP;

+ (jint)OP_EXTFUNCTION;

+ (jint)OP_FUNCTION;

+ (jint)LAST_NODESET_OP;

+ (jint)OP_ARGUMENT;

+ (jint)OP_NUMBERLIT;

+ (jint)OP_LOCATIONPATH;

+ (jint)OP_PREDICATE;

+ (jint)OP_MATCHPATTERN;

+ (jint)OP_LOCATIONPATHPATTERN;

+ (jint)NODETYPE_COMMENT;

+ (jint)NODETYPE_TEXT;

+ (jint)NODETYPE_PI;

+ (jint)NODETYPE_NODE;

+ (jint)NODENAME;

+ (jint)NODETYPE_ROOT;

+ (jint)NODETYPE_ANYELEMENT;

+ (jint)NODETYPE_FUNCTEST;

+ (jint)AXES_START_TYPES;

+ (jint)FROM_ANCESTORS;

+ (jint)FROM_ANCESTORS_OR_SELF;

+ (jint)FROM_ATTRIBUTES;

+ (jint)FROM_CHILDREN;

+ (jint)FROM_DESCENDANTS;

+ (jint)FROM_DESCENDANTS_OR_SELF;

+ (jint)FROM_FOLLOWING;

+ (jint)FROM_FOLLOWING_SIBLINGS;

+ (jint)FROM_PARENT;

+ (jint)FROM_PRECEDING;

+ (jint)FROM_PRECEDING_SIBLINGS;

+ (jint)FROM_SELF;

+ (jint)FROM_NAMESPACE;

+ (jint)FROM_ROOT;

+ (jint)MATCH_ATTRIBUTE;

+ (jint)MATCH_ANY_ANCESTOR;

+ (jint)MATCH_IMMEDIATE_ANCESTOR;

+ (jint)AXES_END_TYPES;

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathCompilerOpCodes)

/*!
 @brief [ENDOP]
 Some operators may like to have a terminator.
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_ENDOP();
#define OrgApacheXpathCompilerOpCodes_ENDOP -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, ENDOP, jint)

/*!
 @brief [EMPTY]
 Empty slot to indicate NULL.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_EMPTY();
#define OrgApacheXpathCompilerOpCodes_EMPTY -2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, EMPTY, jint)

/*!
 @brief [ELEMWILDCARD]
 Means ELEMWILDCARD ("*"), used instead
 of string index in some places.
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_ELEMWILDCARD();
#define OrgApacheXpathCompilerOpCodes_ELEMWILDCARD -3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, ELEMWILDCARD, jint)

/*!
 @brief [OP_XPATH]
 [length]
 {expression}
 returns:
 XNodeSet
 XNumber
 XString
 XBoolean
 XRTree
 XObject
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_XPATH();
#define OrgApacheXpathCompilerOpCodes_OP_XPATH 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_XPATH, jint)

/*!
 @brief [OP_OR]
 [length]
 {boolean expression}
 {boolean expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_OR();
#define OrgApacheXpathCompilerOpCodes_OP_OR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_OR, jint)

/*!
 @brief [OP_AND]
 [length]
 {boolean expression}
 {boolean expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_AND();
#define OrgApacheXpathCompilerOpCodes_OP_AND 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_AND, jint)

/*!
 @brief [OP_NOTEQUALS]
 [length]
 {expression}
 {expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_NOTEQUALS();
#define OrgApacheXpathCompilerOpCodes_OP_NOTEQUALS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_NOTEQUALS, jint)

/*!
 @brief [OP_EQUALS]
 [length]
 {expression}
 {expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_EQUALS();
#define OrgApacheXpathCompilerOpCodes_OP_EQUALS 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_EQUALS, jint)

/*!
 @brief [OP_LTE] (less-than-or-equals)
 [length]
 {number expression}
 {number expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_LTE();
#define OrgApacheXpathCompilerOpCodes_OP_LTE 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_LTE, jint)

/*!
 @brief [OP_LT] (less-than)
 [length]
 {number expression}
 {number expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_LT();
#define OrgApacheXpathCompilerOpCodes_OP_LT 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_LT, jint)

/*!
 @brief [OP_GTE] (greater-than-or-equals)
 [length]
 {number expression}
 {number expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_GTE();
#define OrgApacheXpathCompilerOpCodes_OP_GTE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_GTE, jint)

/*!
 @brief [OP_GT] (greater-than)
 [length]
 {number expression}
 {number expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_GT();
#define OrgApacheXpathCompilerOpCodes_OP_GT 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_GT, jint)

/*!
 @brief [OP_PLUS]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_PLUS();
#define OrgApacheXpathCompilerOpCodes_OP_PLUS 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_PLUS, jint)

/*!
 @brief [OP_MINUS]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_MINUS();
#define OrgApacheXpathCompilerOpCodes_OP_MINUS 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_MINUS, jint)

/*!
 @brief [OP_MULT]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_MULT();
#define OrgApacheXpathCompilerOpCodes_OP_MULT 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_MULT, jint)

/*!
 @brief [OP_DIV]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_DIV();
#define OrgApacheXpathCompilerOpCodes_OP_DIV 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_DIV, jint)

/*!
 @brief [OP_MOD]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_MOD();
#define OrgApacheXpathCompilerOpCodes_OP_MOD 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_MOD, jint)

/*!
 @brief [OP_QUO]
 [length]
 {number expression}
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_QUO();
#define OrgApacheXpathCompilerOpCodes_OP_QUO 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_QUO, jint)

/*!
 @brief [OP_NEG]
 [length]
 {number expression}
 returns:
 XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_NEG();
#define OrgApacheXpathCompilerOpCodes_OP_NEG 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_NEG, jint)

/*!
 @brief [OP_STRING] (cast operation)
 [length]
 {expression}
 returns:
 XString
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_STRING();
#define OrgApacheXpathCompilerOpCodes_OP_STRING 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_STRING, jint)

/*!
 @brief [OP_BOOL] (cast operation)
 [length]
 {expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_BOOL();
#define OrgApacheXpathCompilerOpCodes_OP_BOOL 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_BOOL, jint)

/*!
 @brief [OP_NUMBER] (cast operation)
 [length]
 {expression}
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_NUMBER();
#define OrgApacheXpathCompilerOpCodes_OP_NUMBER 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_NUMBER, jint)

/*!
 @brief [OP_UNION]
 [length]
 {PathExpr}+
 returns:
 XNodeSet
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_UNION();
#define OrgApacheXpathCompilerOpCodes_OP_UNION 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_UNION, jint)

/*!
 @brief [OP_LITERAL]
 [3]
 [index to token]
 returns:
 XString
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_LITERAL();
#define OrgApacheXpathCompilerOpCodes_OP_LITERAL 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_LITERAL, jint)

/*!
 @brief The low opcode for nodesets, needed by getFirstPredicateOpPos and 
 getNextStepPos.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FIRST_NODESET_OP();
#define OrgApacheXpathCompilerOpCodes_FIRST_NODESET_OP 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FIRST_NODESET_OP, jint)

/*!
 @brief [OP_VARIABLE]
 [4]
 [index to namespace token, or EMPTY]
 [index to function name token]
 returns:
 XString
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_VARIABLE();
#define OrgApacheXpathCompilerOpCodes_OP_VARIABLE 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_VARIABLE, jint)

/*!
 @brief [OP_GROUP]
 [length]
 {expression}
 returns:
 XNodeSet
 XNumber
 XString
 XBoolean
 XRTree
 XObject
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_GROUP();
#define OrgApacheXpathCompilerOpCodes_OP_GROUP 23
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_GROUP, jint)

/*!
 @brief [OP_EXTFUNCTION] (Extension function.)
 [length]
 [index to namespace token]
 [index to function name token]
 {OP_ARGUMENT}
 returns:
 XNodeSet
 XNumber
 XString
 XBoolean
 XRTree
 XObject
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_EXTFUNCTION();
#define OrgApacheXpathCompilerOpCodes_OP_EXTFUNCTION 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_EXTFUNCTION, jint)

/*!
 @brief [OP_FUNCTION]
 [length]
 [FUNC_name]
 {OP_ARGUMENT}
 [ENDOP]
 returns:
 XNodeSet
 XNumber
 XString
 XBoolean
 XRTree
 XObject
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_FUNCTION();
#define OrgApacheXpathCompilerOpCodes_OP_FUNCTION 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_FUNCTION, jint)

/*!
 @brief The last opcode for stuff that can be a nodeset.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_LAST_NODESET_OP();
#define OrgApacheXpathCompilerOpCodes_LAST_NODESET_OP 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, LAST_NODESET_OP, jint)

/*!
 @brief [OP_ARGUMENT] (Function argument.)
 [length]
 {expression}
 returns:
 XNodeSet
 XNumber
 XString
 XBoolean
 XRTree
 XObject
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_ARGUMENT();
#define OrgApacheXpathCompilerOpCodes_OP_ARGUMENT 26
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_ARGUMENT, jint)

/*!
 @brief [OP_NUMBERLIT] (Number literal
 .)
 [3]
 [index to token]
 returns:
 XString
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_NUMBERLIT();
#define OrgApacheXpathCompilerOpCodes_OP_NUMBERLIT 27
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_NUMBERLIT, jint)

/*!
 @brief [OP_LOCATIONPATH]
 [length]
 {FROM_stepType}
 | {function}
 {predicate}
 [ENDOP]
 (Note that element and attribute namespaces and
 names can be wildcarded '*'.)
 returns:
 XNodeSet
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_LOCATIONPATH();
#define OrgApacheXpathCompilerOpCodes_OP_LOCATIONPATH 28
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_LOCATIONPATH, jint)

/*!
 @brief [OP_PREDICATE]
 [length]
 {expression}
 [ENDOP] (For safety)
 returns:
 XBoolean or XNumber
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_PREDICATE();
#define OrgApacheXpathCompilerOpCodes_OP_PREDICATE 29
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_PREDICATE, jint)

/*!
 @brief [OP_MATCHPATTERN]
 [length]
 {PathExpr}+
 returns:
 XNodeSet
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_MATCHPATTERN();
#define OrgApacheXpathCompilerOpCodes_OP_MATCHPATTERN 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_MATCHPATTERN, jint)

/*!
 @brief [OP_LOCATIONPATHPATTERN]
 [length]
 {FROM_stepType}
 | {function}{predicate}
 [ENDOP]
 returns:
 XNodeSet
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_OP_LOCATIONPATHPATTERN();
#define OrgApacheXpathCompilerOpCodes_OP_LOCATIONPATHPATTERN 31
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, OP_LOCATIONPATHPATTERN, jint)

/*!
 @brief [NODETYPE_COMMENT]
 No size or arguments.
 Note: must not overlap function OP number!
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_COMMENT();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_COMMENT 1030
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_COMMENT, jint)

/*!
 @brief [NODETYPE_TEXT]
 No size or arguments.
 Note: must not overlap function OP number!
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_TEXT();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_TEXT 1031
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_TEXT, jint)

/*!
 @brief [NODETYPE_PI]
 [index to token]
 Note: must not overlap function OP number!
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_PI();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_PI 1032
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_PI, jint)

/*!
 @brief [NODETYPE_NODE]
 No size or arguments.
 Note: must not overlap function OP number!
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_NODE();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_NODE 1033
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_NODE, jint)

/*!
 @brief [NODENAME]
 [index to ns token or EMPTY]
 [index to name token]
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODENAME();
#define OrgApacheXpathCompilerOpCodes_NODENAME 34
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODENAME, jint)

/*!
 @brief [NODETYPE_ROOT]
 No size or arguments.
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_ROOT();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_ROOT 35
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_ROOT, jint)

/*!
 @brief [NODETYPE_ANY]
 No size or arguments.
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_ANYELEMENT();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_ANYELEMENT 36
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_ANYELEMENT, jint)

/*!
 @brief [NODETYPE_ANY]
 No size or arguments.
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_NODETYPE_FUNCTEST();
#define OrgApacheXpathCompilerOpCodes_NODETYPE_FUNCTEST 1034
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, NODETYPE_FUNCTEST, jint)

/*!
 @brief [FROM_stepType]
 [length, including predicates]
 [length of just the step, without the predicates]
 {node test}
 {predicates}?
 returns:
 XBoolean
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_AXES_START_TYPES();
#define OrgApacheXpathCompilerOpCodes_AXES_START_TYPES 37
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, AXES_START_TYPES, jint)

/*!
 @brief ancestor axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_ANCESTORS();
#define OrgApacheXpathCompilerOpCodes_FROM_ANCESTORS 37
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_ANCESTORS, jint)

/*!
 @brief ancestor-or-self axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_ANCESTORS_OR_SELF();
#define OrgApacheXpathCompilerOpCodes_FROM_ANCESTORS_OR_SELF 38
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_ANCESTORS_OR_SELF, jint)

/*!
 @brief attribute axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_ATTRIBUTES();
#define OrgApacheXpathCompilerOpCodes_FROM_ATTRIBUTES 39
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_ATTRIBUTES, jint)

/*!
 @brief children axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_CHILDREN();
#define OrgApacheXpathCompilerOpCodes_FROM_CHILDREN 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_CHILDREN, jint)

/*!
 @brief descendants axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_DESCENDANTS();
#define OrgApacheXpathCompilerOpCodes_FROM_DESCENDANTS 41
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_DESCENDANTS, jint)

/*!
 @brief descendants-of-self axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_DESCENDANTS_OR_SELF();
#define OrgApacheXpathCompilerOpCodes_FROM_DESCENDANTS_OR_SELF 42
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_DESCENDANTS_OR_SELF, jint)

/*!
 @brief following axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_FOLLOWING();
#define OrgApacheXpathCompilerOpCodes_FROM_FOLLOWING 43
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_FOLLOWING, jint)

/*!
 @brief following-siblings axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_FOLLOWING_SIBLINGS();
#define OrgApacheXpathCompilerOpCodes_FROM_FOLLOWING_SIBLINGS 44
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_FOLLOWING_SIBLINGS, jint)

/*!
 @brief parent axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_PARENT();
#define OrgApacheXpathCompilerOpCodes_FROM_PARENT 45
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_PARENT, jint)

/*!
 @brief preceding axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_PRECEDING();
#define OrgApacheXpathCompilerOpCodes_FROM_PRECEDING 46
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_PRECEDING, jint)

/*!
 @brief preceding-sibling axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_PRECEDING_SIBLINGS();
#define OrgApacheXpathCompilerOpCodes_FROM_PRECEDING_SIBLINGS 47
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_PRECEDING_SIBLINGS, jint)

/*!
 @brief self axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_SELF();
#define OrgApacheXpathCompilerOpCodes_FROM_SELF 48
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_SELF, jint)

/*!
 @brief namespace axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_NAMESPACE();
#define OrgApacheXpathCompilerOpCodes_FROM_NAMESPACE 49
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_NAMESPACE, jint)

/*!
 @brief '/' axes opcode.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_FROM_ROOT();
#define OrgApacheXpathCompilerOpCodes_FROM_ROOT 50
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, FROM_ROOT, jint)

/*!
 @brief For match patterns.
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_MATCH_ATTRIBUTE();
#define OrgApacheXpathCompilerOpCodes_MATCH_ATTRIBUTE 51
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, MATCH_ATTRIBUTE, jint)

/*!
 @brief For match patterns.
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_MATCH_ANY_ANCESTOR();
#define OrgApacheXpathCompilerOpCodes_MATCH_ANY_ANCESTOR 52
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, MATCH_ANY_ANCESTOR, jint)

/*!
 @brief For match patterns.
  advanced
 */
inline jint OrgApacheXpathCompilerOpCodes_get_MATCH_IMMEDIATE_ANCESTOR();
#define OrgApacheXpathCompilerOpCodes_MATCH_IMMEDIATE_ANCESTOR 53
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, MATCH_IMMEDIATE_ANCESTOR, jint)

/*!
 @brief The end of the axes types.
 */
inline jint OrgApacheXpathCompilerOpCodes_get_AXES_END_TYPES();
#define OrgApacheXpathCompilerOpCodes_AXES_END_TYPES 53
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerOpCodes, AXES_END_TYPES, jint)

FOUNDATION_EXPORT void OrgApacheXpathCompilerOpCodes_init(OrgApacheXpathCompilerOpCodes *self);

FOUNDATION_EXPORT OrgApacheXpathCompilerOpCodes *new_OrgApacheXpathCompilerOpCodes_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathCompilerOpCodes *create_OrgApacheXpathCompilerOpCodes_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathCompilerOpCodes)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathCompilerOpCodes")
