//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/stubbing/VoidMethodStubbable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoStubbingVoidMethodStubbable")
#ifdef RESTRICT_OrgMockitoStubbingVoidMethodStubbable
#define INCLUDE_ALL_OrgMockitoStubbingVoidMethodStubbable 0
#else
#define INCLUDE_ALL_OrgMockitoStubbingVoidMethodStubbable 1
#endif
#undef RESTRICT_OrgMockitoStubbingVoidMethodStubbable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgMockitoStubbingVoidMethodStubbable_) && (INCLUDE_ALL_OrgMockitoStubbingVoidMethodStubbable || defined(INCLUDE_OrgMockitoStubbingVoidMethodStubbable))
#define OrgMockitoStubbingVoidMethodStubbable_

@protocol OrgMockitoStubbingAnswer;

/*!
 @brief Stubs void method with an exception.
 E.g:
 <pre class="code"><code class="java">
 stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
 //you can stub with different behavior for consecutive method calls.
 //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
 stubVoid(mock)
 .toThrow(new RuntimeException())
 .toReturn()
 .on().someMethod();
 
@endcode
 See examples in javadoc for <code>Mockito.stubVoid</code>
 */
@protocol OrgMockitoStubbingVoidMethodStubbable < JavaObject >

/*!
 @brief Stubs void method with an exception.
 E.g:
 <pre class="code"><code class="java">
 stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
 
@endcode
 If throwable is a checked exception then it has to
 match one of the checked exceptions of method signature.
 See examples in javadoc for <code>Mockito.stubVoid</code>
 @param throwable to be thrown on method invocation
 @return VoidMethodStubbable - typically to choose void method and finish stubbing
 */
- (id<OrgMockitoStubbingVoidMethodStubbable>)toThrowWithNSException:(NSException *)throwable;

/*!
 @brief Stubs void method to 'just return' (e.g. to <b>not</b> to throw any exception)
 <p>
 <b>Only use this method if you're stubbing consecutive calls.
 </b>
 <p>
 For example:
 <pre class="code"><code class="java">
 stubVoid(mock)
 .toReturn()
 .toThrow(new RuntimeException())
 .on().foo(10);
 
@endcode
 <ul>
 <li>first time foo(10) is called the mock will 'just return' (e.g. don't throw any exception)</li>
 <li>second time foo(10) is called the mock will throw RuntimeException</li>
 <li>every consecutive time foo(10) is called the mock will throw RuntimeException</li>
 </ul>
 <p>
 See examples in javadoc for <code>Mockito.stubVoid</code>
 @return VoidMethodStubbable - typically to choose void method and finish stubbing
 */
- (id<OrgMockitoStubbingVoidMethodStubbable>)toReturn;

/*!
 @brief Stubs a void method with generic <code>Answer</code>
 <p>
 For Example:
 <pre class="code"><code class="java">
 stubVoid(mock)
 .toAnswer(new Answer() {
 public Object answer(InvocationOnMOck invocation) {
 Visitor v = (Visitor) invocation.getArguments()[0];
 v.visitMock(invocation.getMock());
 return null;
 }
 })
 .on().accept(any());
 
@endcode
 @param answer the custom answer to execute.
 @return VoidMethodStubbable - typically to choose void method and finish stubbing
 */
- (id<OrgMockitoStubbingVoidMethodStubbable>)toAnswerWithOrgMockitoStubbingAnswer:(id<OrgMockitoStubbingAnswer>)answer;

/*!
 @brief Choose void method for stubbing.
 E.g:
 <pre class="code"><code class="java">
 stubVoid(mock).toThrow(new RuntimeException()).on().someMethod("some arg");
 
@endcode
 See examples in javadoc for <code>Mockito.stubVoid</code>
 @return mock object itself
 */
- (id)on;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoStubbingVoidMethodStubbable)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoStubbingVoidMethodStubbable)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoStubbingVoidMethodStubbable")
