//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/hamcrest/internal/ReflectiveTypeFinder.java
//

/*!
 @brief The TypeSafe classes, and their descendants, need a mechanism to find out what type has been used as a parameter 
 for the concrete matcher.
 Unfortunately, this type is lost during type erasure so we need to use reflection 
 to get it back, by picking out the type of a known parameter to a known method. 
 The catch is that, with bridging methods, this type is only visible in the class that actually implements 
 the expected method, so the ReflectiveTypeFinder needs to be applied to that class or a subtype.
 For example, the abstract <code>TypeSafeDiagnosingMatcher&lt;T&gt;</code> defines an abstract method
 @code
protected abstract boolean matchesSafely(T item, Description mismatchDescription);
@endcode
 By default it uses <code>new ReflectiveTypeFinder("matchesSafely", 2, 0); </code> to find the
 parameterised type. If we create a <code>TypeSafeDiagnosingMatcher&lt;String&gt;</code>, the type
 finder will return <code>String.class</code>.
 A <code>FeatureMatcher</code> is an abstract subclass of <code>TypeSafeDiagnosingMatcher</code>. 
 Although it has a templated implementation of <code>matchesSafely(&lt;T&gt;, Decription);</code>, the  
 actualy run-time signature of this is <code>matchesSafely(Object, Description);</code>. Instead,
 we must find the type by reflecting on the concrete implementation of 
 @code
protected abstract U featureValueOf(T actual);
@endcode
 a method which is declared in <code>FeatureMatcher</code>.
 In short, use this to extract a type from a method in the leaf class of a templated class hierarchy. 
 @author Steve Freeman
 @author Nat Pryce
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgHamcrestInternalReflectiveTypeFinder")
#ifdef RESTRICT_OrgHamcrestInternalReflectiveTypeFinder
#define INCLUDE_ALL_OrgHamcrestInternalReflectiveTypeFinder 0
#else
#define INCLUDE_ALL_OrgHamcrestInternalReflectiveTypeFinder 1
#endif
#undef RESTRICT_OrgHamcrestInternalReflectiveTypeFinder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgHamcrestInternalReflectiveTypeFinder_) && (INCLUDE_ALL_OrgHamcrestInternalReflectiveTypeFinder || defined(INCLUDE_OrgHamcrestInternalReflectiveTypeFinder))
#define OrgHamcrestInternalReflectiveTypeFinder_

@class IOSClass;
@class JavaLangReflectMethod;

@interface OrgHamcrestInternalReflectiveTypeFinder : NSObject

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)methodName
                         withInt:(jint)expectedNumberOfParameters
                         withInt:(jint)typedParameter;

- (IOSClass *)findExpectedTypeWithIOSClass:(IOSClass *)fromClass;

#pragma mark Protected

/*!
 @param method The method to examine.
 @return true if this method references the relevant type
 */
- (jboolean)canObtainExpectedTypeFromWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

/*!
 @param method The method from which to extract
 @return The type we're looking for
 */
- (IOSClass *)expectedTypeFromWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgHamcrestInternalReflectiveTypeFinder)

FOUNDATION_EXPORT void OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(OrgHamcrestInternalReflectiveTypeFinder *self, NSString *methodName, jint expectedNumberOfParameters, jint typedParameter);

FOUNDATION_EXPORT OrgHamcrestInternalReflectiveTypeFinder *new_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(NSString *methodName, jint expectedNumberOfParameters, jint typedParameter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgHamcrestInternalReflectiveTypeFinder *create_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(NSString *methodName, jint expectedNumberOfParameters, jint typedParameter);

J2OBJC_TYPE_LITERAL_HEADER(OrgHamcrestInternalReflectiveTypeFinder)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgHamcrestInternalReflectiveTypeFinder")
