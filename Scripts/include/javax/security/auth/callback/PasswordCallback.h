//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/security/auth/callback/PasswordCallback.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackPasswordCallback")
#ifdef RESTRICT_JavaxSecurityAuthCallbackPasswordCallback
#define INCLUDE_ALL_JavaxSecurityAuthCallbackPasswordCallback 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthCallbackPasswordCallback 1
#endif
#undef RESTRICT_JavaxSecurityAuthCallbackPasswordCallback

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxSecurityAuthCallbackPasswordCallback_) && (INCLUDE_ALL_JavaxSecurityAuthCallbackPasswordCallback || defined(INCLUDE_JavaxSecurityAuthCallbackPasswordCallback))
#define JavaxSecurityAuthCallbackPasswordCallback_

#define RESTRICT_JavaxSecurityAuthCallbackCallback 1
#define INCLUDE_JavaxSecurityAuthCallbackCallback 1
#include "javax/security/auth/callback/Callback.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSCharArray;

/*!
 @brief Used in conjunction with a <code>CallbackHandler</code> to retrieve a password
 when needed.
 */
@interface JavaxSecurityAuthCallbackPasswordCallback : NSObject < JavaxSecurityAuthCallbackCallback, JavaIoSerializable > {
 @public
  jboolean echoOn_;
}

#pragma mark Public

/*!
 @brief Creates a new <code>PasswordCallback</code> instance.
 @param prompt
 the message that should be displayed to the user
 @param echoOn
 determines whether the user input should be echoed
 */
- (instancetype)initWithNSString:(NSString *)prompt
                     withBoolean:(jboolean)echoOn;

/*!
 @brief Clears the password stored in this <code>PasswordCallback</code>.
 */
- (void)clearPassword;

/*!
 @brief Returns the password.
 The security service that needs the password
 usually calls this method once the <code>CallbackHandler</code> has finished
 its work.
 @return the password. A copy of the internal password is created and
 returned, so subsequent changes to the internal password do not
 affect the result.
 */
- (IOSCharArray *)getPassword;

/*!
 @brief Returns the prompt that was specified when creating this <code>PasswordCallback</code>
 @return the prompt
 */
- (NSString *)getPrompt;

/*!
 @brief Queries whether this <code>PasswordCallback</code> expects user input to be
 echoed, which is specified during the creation of the object.
 @return <code>true</code> if (and only if) user input should be echoed
 */
- (jboolean)isEchoOn;

/*!
 @brief Sets the password.
 The <code>CallbackHandler</code> that performs the actual
 provisioning or input of the password needs to call this method to hand
 back the password to the security service that requested it.
 @param password
 the password. A copy of this is stored, so subsequent changes
 to the input array do not affect the <code>PasswordCallback</code>.
 */
- (void)setPasswordWithCharArray:(IOSCharArray *)password;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityAuthCallbackPasswordCallback)

FOUNDATION_EXPORT void JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(JavaxSecurityAuthCallbackPasswordCallback *self, NSString *prompt, jboolean echoOn);

FOUNDATION_EXPORT JavaxSecurityAuthCallbackPasswordCallback *new_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(NSString *prompt, jboolean echoOn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSecurityAuthCallbackPasswordCallback *create_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(NSString *prompt, jboolean echoOn);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthCallbackPasswordCallback)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackPasswordCallback")
