//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/net/ServerSocketFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetServerSocketFactory")
#ifdef RESTRICT_JavaxNetServerSocketFactory
#define INCLUDE_ALL_JavaxNetServerSocketFactory 0
#else
#define INCLUDE_ALL_JavaxNetServerSocketFactory 1
#endif
#undef RESTRICT_JavaxNetServerSocketFactory

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxNetServerSocketFactory_) && (INCLUDE_ALL_JavaxNetServerSocketFactory || defined(INCLUDE_JavaxNetServerSocketFactory))
#define JavaxNetServerSocketFactory_

@class JavaNetInetAddress;
@class JavaNetServerSocket;

/*!
 @brief This abstract class defines methods to create server sockets.
 It can be
 subclassed to create specific server socket types.
 */
@interface JavaxNetServerSocketFactory : NSObject

#pragma mark Public

/*!
 @brief Creates a new server socket which is not bound to any local address.
 This
 method has to be overridden by a subclass otherwise a <code>SocketException</code>
  is thrown.
 @return the created unbound server socket.
 @throws IOException
 if an error occurs while creating a new server socket.
 */
- (JavaNetServerSocket *)createServerSocket;

/*!
 @brief Creates a new server socket which is bound to the given port with a
 maximum backlog of 50 unaccepted connections.
 @param port the port on which the created socket has to listen.
 @return the created bound server socket.
 @throws IOException
 if an error occurs while creating a new server socket.
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port;

/*!
 @brief Creates a new server socket which is bound to the given port and
 configures its maximum of queued connections.
 @param port the port on which the created socket has to listen.
 @param backlog the maximum number of unaccepted connections. Passing 0 or
 a negative value yields the default backlog of 50.
 @return the created bound server socket.
 @throws IOException if an error occurs while creating a new server socket.
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog;

/*!
 @brief Creates a new server socket which is bound to the given address on the
 specified port and configures its maximum of queued connections.
 @param port the port on which the created socket has to listen.
 @param backlog the maximum number of unaccepted connections. Passing 0 or
 a negative value yields the default backlog of 50.
 @param iAddress the address of the network interface which is used by the
 created socket.
 @return the created bound server socket.
 @throws IOException if an error occurs while creating a new server socket.
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog
                            withJavaNetInetAddress:(JavaNetInetAddress *)iAddress;

/*!
 @brief Gets the default server socket factory of the system which can be used to
 create new server sockets without creating a subclass of this factory.
 @return the system default server socket factory.
 */
+ (JavaxNetServerSocketFactory *)getDefault;

#pragma mark Protected

/*!
 @brief Creates a new <code>ServerSocketFactory</code> instance.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetServerSocketFactory)

FOUNDATION_EXPORT JavaxNetServerSocketFactory *JavaxNetServerSocketFactory_getDefault();

FOUNDATION_EXPORT void JavaxNetServerSocketFactory_init(JavaxNetServerSocketFactory *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetServerSocketFactory)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetServerSocketFactory")
