//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/net/ssl/TrustManagerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslTrustManagerFactory")
#ifdef RESTRICT_JavaxNetSslTrustManagerFactory
#define INCLUDE_ALL_JavaxNetSslTrustManagerFactory 0
#else
#define INCLUDE_ALL_JavaxNetSslTrustManagerFactory 1
#endif
#undef RESTRICT_JavaxNetSslTrustManagerFactory

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxNetSslTrustManagerFactory_) && (INCLUDE_ALL_JavaxNetSslTrustManagerFactory || defined(INCLUDE_JavaxNetSslTrustManagerFactory))
#define JavaxNetSslTrustManagerFactory_

@class IOSObjectArray;
@class JavaSecurityKeyStore;
@class JavaSecurityProvider;
@class JavaxNetSslTrustManagerFactorySpi;
@protocol JavaxNetSslManagerFactoryParameters;

/*!
 @brief The factory for <code>TrustManager</code>s based on <code>KeyStore</code> or provider
 specific implementation.
 */
@interface JavaxNetSslTrustManagerFactory : NSObject

#pragma mark Public

/*!
 @brief Returns the name of this <code>TrustManagerFactory</code> algorithm
 implementation.
 @return the name of this <code>TrustManagerFactory</code> algorithm
 implementation.
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the default algorithm name for the <code>TrustManagerFactory</code>.
 The
 default algorithm name is specified by the security property
 <code>'ssl.TrustManagerFactory.algorithm'</code>.
 @return the default algorithm name.
 */
+ (NSString *)getDefaultAlgorithm;

/*!
 @brief Creates a new <code>TrustManagerFactory</code> instance for the specified
 trust management algorithm.
 @param algorithm
 the name of the requested trust management algorithm.
 @return a trust manager factory for the requested algorithm.
 @throws NoSuchAlgorithmException
 if no installed provider can provide the requested algorithm.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslTrustManagerFactory *)getInstanceWithNSString:(NSString *)algorithm;

/*!
 @brief Creates a new <code>TrustManagerFactory</code> instance for the specified
 trust management algorithm from the specified provider.
 @param algorithm
 the name of the requested key management algorithm name.
 @param provider
 the provider that provides the requested algorithm.
 @return a key manager factory for the requested algorithm.
 @throws NoSuchAlgorithmException
 if the specified provider cannot provide the requested
 algorithm.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslTrustManagerFactory *)getInstanceWithNSString:(NSString *)algorithm
                                   withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Creates a new <code>TrustManagerFactory</code> instance for the specified
 trust management algorithm from the specified provider.
 @param algorithm
 the name of the requested trust management algorithm name.
 @param provider
 the name of the provider that provides the requested
 algorithm.
 @return a trust manager factory for the requested algorithm.
 @throws NoSuchAlgorithmException
 if the specified provider cannot provide the requested
 algorithm.
 @throws NoSuchProviderException
 if the specified provider does not exist.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslTrustManagerFactory *)getInstanceWithNSString:(NSString *)algorithm
                                               withNSString:(NSString *)provider;

/*!
 @brief Returns the provider for this <code>TrustManagerFactory</code> instance.
 @return the provider for this <code>TrustManagerFactory</code> instance.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the list of <code>TrustManager</code>s with one entry for each type
 of trust material.
 @return the list of <code>TrustManager</code>s
 */
- (IOSObjectArray *)getTrustManagers;

/*!
 @brief Initializes this factory instance with the specified keystore as source
 of certificate authorities and trust material.
 @param ks
 the keystore or <code>null</code>.
 @throws KeyStoreException
 if the initialization fails.
 */
- (void)init__WithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initializes this factory instance with the specified provider-specific
 parameters for a source of trust material.
 @param spec
 the provider-specific parameters.
 @throws InvalidAlgorithmParameterException
 if the initialization fails.
 */
- (void)init__WithJavaxNetSslManagerFactoryParameters:(id<JavaxNetSslManagerFactoryParameters>)spec OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

/*!
 @brief Creates a new <code>TrustManagerFactory</code> instance.
 @param factorySpi
 the implementation delegate.
 @param provider
 the provider
 @param algorithm
 the algorithm name.
 */
- (instancetype)initWithJavaxNetSslTrustManagerFactorySpi:(JavaxNetSslTrustManagerFactorySpi *)factorySpi
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                             withNSString:(NSString *)algorithm;

@end

J2OBJC_STATIC_INIT(JavaxNetSslTrustManagerFactory)

FOUNDATION_EXPORT NSString *JavaxNetSslTrustManagerFactory_getDefaultAlgorithm();

FOUNDATION_EXPORT JavaxNetSslTrustManagerFactory *JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaxNetSslTrustManagerFactory *JavaxNetSslTrustManagerFactory_getInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT JavaxNetSslTrustManagerFactory *JavaxNetSslTrustManagerFactory_getInstanceWithNSString_withJavaSecurityProvider_(NSString *algorithm, JavaSecurityProvider *provider);

FOUNDATION_EXPORT void JavaxNetSslTrustManagerFactory_initWithJavaxNetSslTrustManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslTrustManagerFactory *self, JavaxNetSslTrustManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaxNetSslTrustManagerFactory *new_JavaxNetSslTrustManagerFactory_initWithJavaxNetSslTrustManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslTrustManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslTrustManagerFactory *create_JavaxNetSslTrustManagerFactory_initWithJavaxNetSslTrustManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslTrustManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslTrustManagerFactory)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslTrustManagerFactory")
