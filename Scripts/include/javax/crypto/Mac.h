//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/crypto/Mac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoMac")
#ifdef RESTRICT_JavaxCryptoMac
#define INCLUDE_ALL_JavaxCryptoMac 0
#else
#define INCLUDE_ALL_JavaxCryptoMac 1
#endif
#undef RESTRICT_JavaxCryptoMac

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxCryptoMac_) && (INCLUDE_ALL_JavaxCryptoMac || defined(INCLUDE_JavaxCryptoMac))
#define JavaxCryptoMac_

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaSecurityProvider;
@class JavaxCryptoMacSpi;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief This class provides the public API for <i>Message Authentication Code</i>
 (MAC) algorithms.
 */
@interface JavaxCryptoMac : NSObject < NSCopying >

#pragma mark Public

/*!
 @brief Clones this <code>Mac</code> instance and the underlying implementation.
 @return the cloned instance.
 @throws CloneNotSupportedException
 if the underlying implementation does not support cloning.
 */
- (id)clone;

/*!
 @brief Computes the digest of this MAC based on the data previously specified in
 <code>update</code> calls.
 <p>
 This <code>Mac</code> instance is reverted to its initial state and can be
 used to start the next MAC computation with the same parameters or
 initialized with different parameters.
 @return the generated digest.
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (IOSByteArray *)doFinal;

/*!
 @brief Computes the digest of this MAC based on the data previously specified on
 <code>update</code> calls and on the final bytes specified by <code>input</code>
 (or based on those bytes only).
 <p>
 This <code>Mac</code> instance is reverted to its initial state and can be
 used to start the next MAC computation with the same parameters or
 initialized with different parameters.
 @param input
 the final bytes.
 @return the generated digest.
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (IOSByteArray *)doFinalWithByteArray:(IOSByteArray *)input;

/*!
 @brief Computes the digest of this MAC based on the data previously specified in
 <code>update</code> calls and stores the digest in the specified <code>output</code>
  buffer at offset <code>outOffset</code>.
 <p>
 This <code>Mac</code> instance is reverted to its initial state and can be
 used to start the next MAC computation with the same parameters or
 initialized with different parameters.
 @param output
 the output buffer
 @param outOffset
 the offset in the output buffer
 @throws ShortBufferException
 if the specified output buffer is either too small for the
 digest to be stored, the specified output buffer is <code>null</code>
 , or the specified offset is negative or past the length
 of the output buffer.
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (void)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOffset;

/*!
 @brief Returns the name of the MAC algorithm.
 @return the name of the MAC algorithm.
 */
- (NSString *)getAlgorithm;

/*!
 @brief Creates a new <code>Mac</code> instance that provides the specified MAC
 algorithm.
 @param algorithm
 the name of the requested MAC algorithm.
 @return the new <code>Mac</code> instance.
 @throws NoSuchAlgorithmException
 if the specified algorithm is not available by any provider.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release).
 */
+ (JavaxCryptoMac *)getInstanceWithNSString:(NSString *)algorithm;

/*!
 @brief Creates a new <code>Mac</code> instance that provides the specified MAC
 algorithm from the specified provider.
 The <code>provider</code> supplied
 does not have to be registered.
 @param algorithm
 the name of the requested MAC algorithm.
 @param provider
 the provider that is providing the algorithm.
 @return the new <code>Mac</code> instance.
 @throws NoSuchAlgorithmException
 if the specified algorithm is not provided by the specified
 provider.
 @throws IllegalArgumentException
 if <code>provider</code> is <code>null</code>.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release).
 */
+ (JavaxCryptoMac *)getInstanceWithNSString:(NSString *)algorithm
                   withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Creates a new <code>Mac</code> instance that provides the specified MAC
 algorithm from the specified provider.
 @param algorithm
 the name of the requested MAC algorithm.
 @param provider
 the name of the provider that is providing the algorithm.
 @return the new <code>Mac</code> instance.
 @throws NoSuchAlgorithmException
 if the specified algorithm is not provided by the specified
 provider.
 @throws NoSuchProviderException
 if the specified provider is not available.
 @throws IllegalArgumentException
 if the specified provider name is <code>null</code> or empty.
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release).
 */
+ (JavaxCryptoMac *)getInstanceWithNSString:(NSString *)algorithm
                               withNSString:(NSString *)provider;

/*!
 @brief Returns the length of this MAC (in bytes).
 @return the length of this MAC (in bytes).
 */
- (jint)getMacLength;

/*!
 @brief Returns the provider of this <code>Mac</code> instance.
 @return the provider of this <code>Mac</code> instance.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Initializes this <code>Mac</code> instance with the specified key.
 @param key
 the key to initialize this algorithm.
 @throws InvalidKeyException
 if initialization fails because the provided key is <code>null</code>
 .
 @throws RuntimeException
 if the specified key cannot be used to initialize this
 algorithm.
 */
- (void)init__WithJavaSecurityKey:(id<JavaSecurityKey>)key OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initializes this <code>Mac</code> instance with the specified key and
 algorithm parameters.
 @param key
 the key to initialize this algorithm.
 @param params
 the parameters for this algorithm.
 @throws InvalidKeyException
 if the specified key cannot be used to initialize this
 algorithm, or it is null.
 @throws InvalidAlgorithmParameterException
 if the specified parameters cannot be used to initialize this
 algorithm.
 */
- (void)init__WithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Resets this <code>Mac</code> instance to its initial state.
 <p>
 This <code>Mac</code> instance is reverted to its initial state and can be
 used to start the next MAC computation with the same parameters or
 initialized with different parameters.
 */
- (void)reset;

/*!
 @brief Updates this <code>Mac</code> instance with the specified byte.
 @param input
 the byte
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (void)updateWithByte:(jbyte)input;

/*!
 @brief Copies the buffer provided as input for further processing.
 @param input
 the buffer.
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (void)updateWithByteArray:(IOSByteArray *)input;

/*!
 @brief Updates this <code>Mac</code> instance with the data from the specified buffer
 <code>input</code> from the specified <code>offset</code> and length <code>len</code>.
 @param input
 the buffer.
 @param offset
 the offset in the buffer.
 @param len
 the length of the data in the buffer.
 @throws IllegalStateException
 if this MAC is not initialized.
 @throws IllegalArgumentException
 if <code>offset</code> and <code>len</code> do not specified a valid
 chunk in <code>input</code> buffer.
 */
- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)offset
                    withInt:(jint)len;

/*!
 @brief Updates this <code>Mac</code> instance with the data from the specified
 buffer, starting at <code>ByteBuffer.position()</code>, including the next
 <code>ByteBuffer.remaining()</code> bytes.
 @param input
 the buffer.
 @throws IllegalStateException
 if this MAC is not initialized.
 */
- (void)updateWithJavaNioByteBuffer:(JavaNioByteBuffer *)input;

#pragma mark Protected

/*!
 @brief Creates a new <code>Mac</code> instance.
 @param macSpi
 the implementation delegate.
 @param provider
 the implementation provider.
 @param algorithm
 the name of the MAC algorithm.
 */
- (instancetype)initWithJavaxCryptoMacSpi:(JavaxCryptoMacSpi *)macSpi
                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
                             withNSString:(NSString *)algorithm;

@end

J2OBJC_STATIC_INIT(JavaxCryptoMac)

FOUNDATION_EXPORT void JavaxCryptoMac_initWithJavaxCryptoMacSpi_withJavaSecurityProvider_withNSString_(JavaxCryptoMac *self, JavaxCryptoMacSpi *macSpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaxCryptoMac *new_JavaxCryptoMac_initWithJavaxCryptoMacSpi_withJavaSecurityProvider_withNSString_(JavaxCryptoMacSpi *macSpi, JavaSecurityProvider *provider, NSString *algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoMac *create_JavaxCryptoMac_initWithJavaxCryptoMacSpi_withJavaSecurityProvider_withNSString_(JavaxCryptoMacSpi *macSpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaxCryptoMac *JavaxCryptoMac_getInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaxCryptoMac *JavaxCryptoMac_getInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT JavaxCryptoMac *JavaxCryptoMac_getInstanceWithNSString_withJavaSecurityProvider_(NSString *algorithm, JavaSecurityProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoMac)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoMac")
