//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:../java_deps/build_result/guava-19.0-sources.jar!com/google/common/math/BigIntegerMath.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonMathBigIntegerMath")
#ifdef RESTRICT_ComGoogleCommonMathBigIntegerMath
#define INCLUDE_ALL_ComGoogleCommonMathBigIntegerMath 0
#else
#define INCLUDE_ALL_ComGoogleCommonMathBigIntegerMath 1
#endif
#undef RESTRICT_ComGoogleCommonMathBigIntegerMath

#if !defined (ComGoogleCommonMathBigIntegerMath_) && (INCLUDE_ALL_ComGoogleCommonMathBigIntegerMath || defined(INCLUDE_ComGoogleCommonMathBigIntegerMath))
#define ComGoogleCommonMathBigIntegerMath_

@class JavaMathBigInteger;
@class JavaMathRoundingMode;
@protocol JavaUtilList;

@interface ComGoogleCommonMathBigIntegerMath : NSObject

#pragma mark Public

+ (JavaMathBigInteger *)binomialWithInt:(jint)n
                                withInt:(jint)k;

+ (JavaMathBigInteger *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)p
                              withJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (JavaMathBigInteger *)factorialWithInt:(jint)n;

+ (jboolean)isPowerOfTwoWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (jint)log10WithJavaMathBigInteger:(JavaMathBigInteger *)x
           withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (jint)log2WithJavaMathBigInteger:(JavaMathBigInteger *)x
          withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (JavaMathBigInteger *)sqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x
                          withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

#pragma mark Package-Private

+ (jboolean)fitsInLongWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (JavaMathBigInteger *)listProductWithJavaUtilList:(id<JavaUtilList>)nums;

+ (JavaMathBigInteger *)listProductWithJavaUtilList:(id<JavaUtilList>)nums
                                            withInt:(jint)start
                                            withInt:(jint)end;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonMathBigIntegerMath)

inline jint ComGoogleCommonMathBigIntegerMath_get_SQRT2_PRECOMPUTE_THRESHOLD();
#define ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTE_THRESHOLD 256
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathBigIntegerMath, SQRT2_PRECOMPUTE_THRESHOLD, jint)

inline JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_get_SQRT2_PRECOMPUTED_BITS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTED_BITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathBigIntegerMath, SQRT2_PRECOMPUTED_BITS, JavaMathBigInteger *)

FOUNDATION_EXPORT jboolean ComGoogleCommonMathBigIntegerMath_isPowerOfTwoWithJavaMathBigInteger_(JavaMathBigInteger *x);

FOUNDATION_EXPORT jint ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT jint ComGoogleCommonMathBigIntegerMath_log10WithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtWithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_divideWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_factorialWithInt_(jint n);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_(id<JavaUtilList> nums);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(id<JavaUtilList> nums, jint start, jint end);

FOUNDATION_EXPORT JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_binomialWithInt_withInt_(jint n, jint k);

FOUNDATION_EXPORT jboolean ComGoogleCommonMathBigIntegerMath_fitsInLongWithJavaMathBigInteger_(JavaMathBigInteger *x);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonMathBigIntegerMath)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonMathBigIntegerMath")
