//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:../java_deps/build_result/guava-19.0-sources.jar!com/google/common/util/concurrent/Futures.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentFutures
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentFutures
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentFutures_CatchingFuture
#define INCLUDE_ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture 1
#endif
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture
#define INCLUDE_ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture 1
#endif

#if !defined (ComGoogleCommonUtilConcurrentFutures_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures || defined(INCLUDE_ComGoogleCommonUtilConcurrentFutures))
#define ComGoogleCommonUtilConcurrentFutures_

#define RESTRICT_ComGoogleCommonUtilConcurrentGwtFuturesCatchingSpecialization 1
#define INCLUDE_ComGoogleCommonUtilConcurrentGwtFuturesCatchingSpecialization 1
#include "com/google/common/util/concurrent/GwtFuturesCatchingSpecialization.h"

@class ComGoogleCommonCollectImmutableList;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangException;
@class JavaUtilConcurrentTimeUnit;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonUtilConcurrentAsyncFunction;
@protocol ComGoogleCommonUtilConcurrentCheckedFuture;
@protocol ComGoogleCommonUtilConcurrentFutureCallback;
@protocol ComGoogleCommonUtilConcurrentFutureFallback;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentScheduledExecutorService;

@interface ComGoogleCommonUtilConcurrentFutures : ComGoogleCommonUtilConcurrentGwtFuturesCatchingSpecialization

#pragma mark Public

+ (void)addCallbackWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future
                     withComGoogleCommonUtilConcurrentFutureCallback:(id<ComGoogleCommonUtilConcurrentFutureCallback>)callback;

+ (void)addCallbackWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future
                     withComGoogleCommonUtilConcurrentFutureCallback:(id<ComGoogleCommonUtilConcurrentFutureCallback>)callback
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)allAsListWithJavaLangIterable:(id<JavaLangIterable>)futures;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)allAsListWithComGoogleCommonUtilConcurrentListenableFutureArray:(IOSObjectArray *)futures;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)catchingWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                  withIOSClass:(IOSClass *)exceptionType
                                                                               withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)catchingWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                  withIOSClass:(IOSClass *)exceptionType
                                                                               withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback
                                                                                withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)catchingAsyncWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                       withIOSClass:(IOSClass *)exceptionType
                                                                     withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)catchingAsyncWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                       withIOSClass:(IOSClass *)exceptionType
                                                                     withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback
                                                                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)dereferenceWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)nested;

+ (id)getWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                         withIOSClass:(IOSClass *)exceptionClass;

+ (id)getWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                         withIOSClass:(IOSClass *)exceptionClass;

+ (id)getCheckedWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                withIOSClass:(IOSClass *)exceptionClass;

+ (id)getCheckedWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                withIOSClass:(IOSClass *)exceptionClass
                                    withLong:(jlong)timeout
              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (id)getUncheckedWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)immediateCancelledFuture;

+ (id<ComGoogleCommonUtilConcurrentCheckedFuture>)immediateCheckedFutureWithId:(id)value;

+ (id<ComGoogleCommonUtilConcurrentCheckedFuture>)immediateFailedCheckedFutureWithJavaLangException:(JavaLangException *)exception;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)immediateFailedFutureWithNSException:(NSException *)throwable;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)immediateFutureWithId:(id)value;

+ (ComGoogleCommonCollectImmutableList *)inCompletionOrderWithJavaLangIterable:(id<JavaLangIterable>)futures;

+ (id<JavaUtilConcurrentFuture>)lazyTransformWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)input
                                          withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

+ (id<ComGoogleCommonUtilConcurrentCheckedFuture>)makeCheckedWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future
                                                                               withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)mapper;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)nonCancellationPropagatingWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)successfulAsListWithJavaLangIterable:(id<JavaLangIterable>)futures;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)successfulAsListWithComGoogleCommonUtilConcurrentListenableFutureArray:(IOSObjectArray *)futures;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                 withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)function;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                 withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)function
                                                                                 withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function
                                                                                 withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformAsyncWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                      withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)function;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)transformAsyncWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                      withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)function
                                                                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)withFallbackWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                   withComGoogleCommonUtilConcurrentFutureFallback:(id<ComGoogleCommonUtilConcurrentFutureFallback>)fallback;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)withFallbackWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                   withComGoogleCommonUtilConcurrentFutureFallback:(id<ComGoogleCommonUtilConcurrentFutureFallback>)fallback
                                                                                    withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)withTimeoutWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)delegate
                                                                                                         withLong:(jlong)time
                                                                                   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                                   withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)scheduledExecutor;

#pragma mark Package-Private

+ (id<ComGoogleCommonUtilConcurrentAsyncFunction>)asAsyncFunctionWithComGoogleCommonUtilConcurrentFutureFallback:(id<ComGoogleCommonUtilConcurrentFutureFallback>)fallback;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentFutures)

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentCheckedFuture> ComGoogleCommonUtilConcurrentFutures_makeCheckedWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> future, id<ComGoogleCommonBaseFunction> mapper);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_immediateFutureWithId_(id value);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentCheckedFuture> ComGoogleCommonUtilConcurrentFutures_immediateCheckedFutureWithId_(id value);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_immediateFailedFutureWithNSException_(NSException *throwable);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_immediateCancelledFuture();

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentCheckedFuture> ComGoogleCommonUtilConcurrentFutures_immediateFailedCheckedFutureWithJavaLangException_(JavaLangException *exception);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_withFallbackWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentFutureFallback_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentFutureFallback> fallback);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_withFallbackWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentFutureFallback_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentFutureFallback> fallback, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_catchingWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_catchingWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_catchingAsyncWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_catchingAsyncWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentAsyncFunction> ComGoogleCommonUtilConcurrentFutures_asAsyncFunctionWithComGoogleCommonUtilConcurrentFutureFallback_(id<ComGoogleCommonUtilConcurrentFutureFallback> fallback);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_withTimeoutWithComGoogleCommonUtilConcurrentListenableFuture_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentScheduledExecutorService_(id<ComGoogleCommonUtilConcurrentListenableFuture> delegate, jlong time, JavaUtilConcurrentTimeUnit *unit, id<JavaUtilConcurrentScheduledExecutorService> scheduledExecutor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentAsyncFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentAsyncFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentAsyncFunction> function, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformAsyncWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentAsyncFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformAsyncWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentAsyncFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonUtilConcurrentAsyncFunction> function, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_transformWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonBaseFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, id<ComGoogleCommonBaseFunction> function, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id<JavaUtilConcurrentFuture> ComGoogleCommonUtilConcurrentFutures_lazyTransformWithJavaUtilConcurrentFuture_withComGoogleCommonBaseFunction_(id<JavaUtilConcurrentFuture> input, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_dereferenceWithComGoogleCommonUtilConcurrentListenableFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> nested);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_allAsListWithComGoogleCommonUtilConcurrentListenableFutureArray_(IOSObjectArray *futures);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_allAsListWithJavaLangIterable_(id<JavaLangIterable> futures);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_nonCancellationPropagatingWithComGoogleCommonUtilConcurrentListenableFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> future);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_successfulAsListWithComGoogleCommonUtilConcurrentListenableFutureArray_(IOSObjectArray *futures);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentFutures_successfulAsListWithJavaLangIterable_(id<JavaLangIterable> futures);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonUtilConcurrentFutures_inCompletionOrderWithJavaLangIterable_(id<JavaLangIterable> futures);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentFutures_addCallbackWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentFutureCallback_(id<ComGoogleCommonUtilConcurrentListenableFuture> future, id<ComGoogleCommonUtilConcurrentFutureCallback> callback);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentFutures_addCallbackWithComGoogleCommonUtilConcurrentListenableFuture_withComGoogleCommonUtilConcurrentFutureCallback_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> future, id<ComGoogleCommonUtilConcurrentFutureCallback> callback, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentFutures_getWithJavaUtilConcurrentFuture_withIOSClass_(id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentFutures_getWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_withIOSClass_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IOSClass *exceptionClass);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentFutures_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_(id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentFutures_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentFutures_getUncheckedWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentFutures)

#endif

#if !defined (ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures || defined(INCLUDE_ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture))
#define ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture_

#define RESTRICT_ComGoogleCommonUtilConcurrentAbstractFuture 1
#define INCLUDE_ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture 1
#include "com/google/common/util/concurrent/AbstractFuture.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IOSClass;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;

@interface ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture : ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture < JavaLangRunnable > {
 @public
  id<ComGoogleCommonUtilConcurrentListenableFuture> inputFuture_;
  IOSClass *exceptionType_;
  id fallback_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)inputFuture
                                                         withIOSClass:(IOSClass *)exceptionType
                                                               withId:(id)fallback;

- (void)doFallbackWithId:(id)fallback
         withNSException:(NSException *)throwable;

- (void)done;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture, inputFuture_, id<ComGoogleCommonUtilConcurrentListenableFuture>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture, exceptionType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture, fallback_, id)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withId_(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> inputFuture, IOSClass *exceptionType, id fallback);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture)

#endif

#if !defined (ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures || defined(INCLUDE_ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture))
#define ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture_

@class IOSClass;
@protocol ComGoogleCommonUtilConcurrentAsyncFunction;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;

@interface ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture : ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                       withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback;

- (void)doFallbackWithId:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback
         withNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture *new_ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture *create_ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentFutures_AsyncCatchingFuture)

#endif

#if !defined (ComGoogleCommonUtilConcurrentFutures_CatchingFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures || defined(INCLUDE_ComGoogleCommonUtilConcurrentFutures_CatchingFuture))
#define ComGoogleCommonUtilConcurrentFutures_CatchingFuture_

@class IOSClass;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;

@interface ComGoogleCommonUtilConcurrentFutures_CatchingFuture : ComGoogleCommonUtilConcurrentFutures_AbstractCatchingFuture

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                                      withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback;

- (void)doFallbackWithId:(id<ComGoogleCommonBaseFunction>)fallback
         withNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentFutures_CatchingFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentFutures_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(ComGoogleCommonUtilConcurrentFutures_CatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentFutures_CatchingFuture *new_ComGoogleCommonUtilConcurrentFutures_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentFutures_CatchingFuture *create_ComGoogleCommonUtilConcurrentFutures_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentFutures_CatchingFuture)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentFutures")
