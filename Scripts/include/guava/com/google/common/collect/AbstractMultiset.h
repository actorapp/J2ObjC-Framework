//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:../java_deps/build_result/guava-19.0-sources.jar!com/google/common/collect/AbstractMultiset.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset")
#ifdef RESTRICT_ComGoogleCommonCollectAbstractMultiset
#define INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset 1
#endif
#undef RESTRICT_ComGoogleCommonCollectAbstractMultiset

#if !defined (ComGoogleCommonCollectAbstractMultiset_) && (INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset || defined(INCLUDE_ComGoogleCommonCollectAbstractMultiset))
#define ComGoogleCommonCollectAbstractMultiset_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

#define RESTRICT_ComGoogleCommonCollectMultiset 1
#define INCLUDE_ComGoogleCommonCollectMultiset 1
#include "com/google/common/collect/Multiset.h"

@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectAbstractMultiset : JavaUtilAbstractCollection < ComGoogleCommonCollectMultiset >

#pragma mark Public

- (jboolean)addWithId:(id)element;

- (jint)addWithId:(id)element
          withInt:(jint)occurrences;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)elementsToAdd;

- (void)clear;

- (jboolean)containsWithId:(id)element;

- (jint)countWithId:(id)element;

- (id<JavaUtilSet>)elementSet;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)element;

- (jint)removeWithId:(id)element
             withInt:(jint)occurrences;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)elementsToRemove;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)elementsToRetain;

- (jint)setCountWithId:(id)element
               withInt:(jint)count;

- (jboolean)setCountWithId:(id)element
                   withInt:(jint)oldCount
                   withInt:(jint)newCount;

- (jint)size;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)init;

- (id<JavaUtilSet>)createElementSet;

- (id<JavaUtilSet>)createEntrySet;

- (jint)distinctElements;

- (id<JavaUtilIterator>)entryIterator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectAbstractMultiset)

FOUNDATION_EXPORT void ComGoogleCommonCollectAbstractMultiset_init(ComGoogleCommonCollectAbstractMultiset *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectAbstractMultiset)

#endif

#if !defined (ComGoogleCommonCollectAbstractMultiset_ElementSet_) && (INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset || defined(INCLUDE_ComGoogleCommonCollectAbstractMultiset_ElementSet))
#define ComGoogleCommonCollectAbstractMultiset_ElementSet_

#define RESTRICT_ComGoogleCommonCollectMultisets 1
#define INCLUDE_ComGoogleCommonCollectMultisets_ElementSet 1
#include "com/google/common/collect/Multisets.h"

@class ComGoogleCommonCollectAbstractMultiset;
@protocol ComGoogleCommonCollectMultiset;

@interface ComGoogleCommonCollectAbstractMultiset_ElementSet : ComGoogleCommonCollectMultisets_ElementSet

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonCollectAbstractMultiset:(ComGoogleCommonCollectAbstractMultiset *)outer$;

- (id<ComGoogleCommonCollectMultiset>)multiset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectAbstractMultiset_ElementSet)

FOUNDATION_EXPORT void ComGoogleCommonCollectAbstractMultiset_ElementSet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset_ElementSet *self, ComGoogleCommonCollectAbstractMultiset *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectAbstractMultiset_ElementSet *new_ComGoogleCommonCollectAbstractMultiset_ElementSet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectAbstractMultiset_ElementSet *create_ComGoogleCommonCollectAbstractMultiset_ElementSet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectAbstractMultiset_ElementSet)

#endif

#if !defined (ComGoogleCommonCollectAbstractMultiset_EntrySet_) && (INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset || defined(INCLUDE_ComGoogleCommonCollectAbstractMultiset_EntrySet))
#define ComGoogleCommonCollectAbstractMultiset_EntrySet_

#define RESTRICT_ComGoogleCommonCollectMultisets 1
#define INCLUDE_ComGoogleCommonCollectMultisets_EntrySet 1
#include "com/google/common/collect/Multisets.h"

@class ComGoogleCommonCollectAbstractMultiset;
@protocol ComGoogleCommonCollectMultiset;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCollectAbstractMultiset_EntrySet : ComGoogleCommonCollectMultisets_EntrySet

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonCollectAbstractMultiset:(ComGoogleCommonCollectAbstractMultiset *)outer$;

- (id<ComGoogleCommonCollectMultiset>)multiset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectAbstractMultiset_EntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectAbstractMultiset_EntrySet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset_EntrySet *self, ComGoogleCommonCollectAbstractMultiset *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectAbstractMultiset_EntrySet *new_ComGoogleCommonCollectAbstractMultiset_EntrySet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectAbstractMultiset_EntrySet *create_ComGoogleCommonCollectAbstractMultiset_EntrySet_initWithComGoogleCommonCollectAbstractMultiset_(ComGoogleCommonCollectAbstractMultiset *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectAbstractMultiset_EntrySet)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectAbstractMultiset")
