//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/lambda/java/java/lang/invoke/LambdaConversionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangInvokeLambdaConversionException")
#ifdef RESTRICT_JavaLangInvokeLambdaConversionException
#define INCLUDE_ALL_JavaLangInvokeLambdaConversionException 0
#else
#define INCLUDE_ALL_JavaLangInvokeLambdaConversionException 1
#endif
#undef RESTRICT_JavaLangInvokeLambdaConversionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangInvokeLambdaConversionException_) && (INCLUDE_ALL_JavaLangInvokeLambdaConversionException || defined(INCLUDE_JavaLangInvokeLambdaConversionException))
#define JavaLangInvokeLambdaConversionException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

/*!
 @brief LambdaConversionException
 */
@interface JavaLangInvokeLambdaConversionException : JavaLangException

#pragma mark Public

/*!
 @brief Constructs a <code>LambdaConversionException</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a <code>LambdaConversionException</code> with a message.
 @param message the detail message
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a <code>LambdaConversionException</code> with a message and cause.
 @param message the detail message
 @param cause the cause
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a <code>LambdaConversionException</code> with a message,
 cause, and other settings.
 @param message the detail message
 @param cause the cause
 @param enableSuppression whether or not suppressed exceptions are enabled
 @param writableStackTrace whether or not the stack trace is writable
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause
                     withBoolean:(jboolean)enableSuppression
                     withBoolean:(jboolean)writableStackTrace;

/*!
 @brief Constructs a <code>LambdaConversionException</code> with a cause.
 @param cause the cause
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangInvokeLambdaConversionException)

FOUNDATION_EXPORT void JavaLangInvokeLambdaConversionException_init(JavaLangInvokeLambdaConversionException *self);

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *new_JavaLangInvokeLambdaConversionException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *create_JavaLangInvokeLambdaConversionException_init();

FOUNDATION_EXPORT void JavaLangInvokeLambdaConversionException_initWithNSString_(JavaLangInvokeLambdaConversionException *self, NSString *message);

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *new_JavaLangInvokeLambdaConversionException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *create_JavaLangInvokeLambdaConversionException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_(JavaLangInvokeLambdaConversionException *self, NSString *message, NSException *cause);

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *new_JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_(NSString *message, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *create_JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_(NSString *message, NSException *cause);

FOUNDATION_EXPORT void JavaLangInvokeLambdaConversionException_initWithNSException_(JavaLangInvokeLambdaConversionException *self, NSException *cause);

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *new_JavaLangInvokeLambdaConversionException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *create_JavaLangInvokeLambdaConversionException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_withBoolean_withBoolean_(JavaLangInvokeLambdaConversionException *self, NSString *message, NSException *cause, jboolean enableSuppression, jboolean writableStackTrace);

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *new_JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_withBoolean_withBoolean_(NSString *message, NSException *cause, jboolean enableSuppression, jboolean writableStackTrace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInvokeLambdaConversionException *create_JavaLangInvokeLambdaConversionException_initWithNSString_withNSException_withBoolean_withBoolean_(NSString *message, NSException *cause, jboolean enableSuppression, jboolean writableStackTrace);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangInvokeLambdaConversionException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangInvokeLambdaConversionException")
