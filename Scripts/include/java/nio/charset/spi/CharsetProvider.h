//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio_char/src/main/java/java/nio/charset/spi/CharsetProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioCharsetSpiCharsetProvider")
#ifdef RESTRICT_JavaNioCharsetSpiCharsetProvider
#define INCLUDE_ALL_JavaNioCharsetSpiCharsetProvider 0
#else
#define INCLUDE_ALL_JavaNioCharsetSpiCharsetProvider 1
#endif
#undef RESTRICT_JavaNioCharsetSpiCharsetProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioCharsetSpiCharsetProvider_) && (INCLUDE_ALL_JavaNioCharsetSpiCharsetProvider || defined(INCLUDE_JavaNioCharsetSpiCharsetProvider))
#define JavaNioCharsetSpiCharsetProvider_

@class JavaNioCharsetCharset;
@protocol JavaUtilIterator;

/*!
 @brief The service provider class for character sets.
 */
@interface JavaNioCharsetSpiCharsetProvider : NSObject

#pragma mark Public

/*!
 @brief Returns the named charset.
 <p>
 If the charset is unavailable the method returns <code>null</code>.
 @param charsetName
 the canonical or alias name of a character set.
 @return the charset, or <code>null</code> if unavailable.
 */
- (JavaNioCharsetCharset *)charsetForNameWithNSString:(NSString *)charsetName;

/*!
 @brief Returns an iterator over all the available charsets.
 @return the iterator.
 */
- (id<JavaUtilIterator>)charsets;

#pragma mark Protected

/*!
 @brief Constructor for subclassing with concrete types.
 @throws SecurityException
 if there is a security manager installed that does not permit
 the runtime permission labeled "charsetProvider".
 */
- (instancetype)init;

@end

J2OBJC_STATIC_INIT(JavaNioCharsetSpiCharsetProvider)

FOUNDATION_EXPORT void JavaNioCharsetSpiCharsetProvider_init(JavaNioCharsetSpiCharsetProvider *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioCharsetSpiCharsetProvider)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioCharsetSpiCharsetProvider")
