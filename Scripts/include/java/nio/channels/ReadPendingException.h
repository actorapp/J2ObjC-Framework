//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/ReadPendingException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsReadPendingException")
#ifdef RESTRICT_JavaNioChannelsReadPendingException
#define INCLUDE_ALL_JavaNioChannelsReadPendingException 0
#else
#define INCLUDE_ALL_JavaNioChannelsReadPendingException 1
#endif
#undef RESTRICT_JavaNioChannelsReadPendingException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioChannelsReadPendingException_) && (INCLUDE_ALL_JavaNioChannelsReadPendingException || defined(INCLUDE_JavaNioChannelsReadPendingException))
#define JavaNioChannelsReadPendingException_

#define RESTRICT_JavaLangIllegalStateException 1
#define INCLUDE_JavaLangIllegalStateException 1
#include "java/lang/IllegalStateException.h"

/*!
 @brief Unchecked exception thrown when an attempt is made to read from an
 asynchronous socket channel and a previous read has not completed.
 @since 1.7
 */
@interface JavaNioChannelsReadPendingException : JavaLangIllegalStateException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsReadPendingException)

FOUNDATION_EXPORT void JavaNioChannelsReadPendingException_init(JavaNioChannelsReadPendingException *self);

FOUNDATION_EXPORT JavaNioChannelsReadPendingException *new_JavaNioChannelsReadPendingException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioChannelsReadPendingException *create_JavaNioChannelsReadPendingException_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsReadPendingException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsReadPendingException")
