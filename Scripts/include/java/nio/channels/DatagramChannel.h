//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/channels/DatagramChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsDatagramChannel")
#ifdef RESTRICT_JavaNioChannelsDatagramChannel
#define INCLUDE_ALL_JavaNioChannelsDatagramChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsDatagramChannel 1
#endif
#undef RESTRICT_JavaNioChannelsDatagramChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioChannelsDatagramChannel_) && (INCLUDE_ALL_JavaNioChannelsDatagramChannel || defined(INCLUDE_JavaNioChannelsDatagramChannel))
#define JavaNioChannelsDatagramChannel_

#define RESTRICT_JavaNioChannelsSpiAbstractSelectableChannel 1
#define INCLUDE_JavaNioChannelsSpiAbstractSelectableChannel 1
#include "java/nio/channels/spi/AbstractSelectableChannel.h"

#define RESTRICT_JavaNioChannelsByteChannel 1
#define INCLUDE_JavaNioChannelsByteChannel 1
#include "java/nio/channels/ByteChannel.h"

#define RESTRICT_JavaNioChannelsScatteringByteChannel 1
#define INCLUDE_JavaNioChannelsScatteringByteChannel 1
#include "java/nio/channels/ScatteringByteChannel.h"

#define RESTRICT_JavaNioChannelsGatheringByteChannel 1
#define INCLUDE_JavaNioChannelsGatheringByteChannel 1
#include "java/nio/channels/GatheringByteChannel.h"

#define RESTRICT_JavaNioChannelsNetworkChannel 1
#define INCLUDE_JavaNioChannelsNetworkChannel 1
#include "java/nio/channels/NetworkChannel.h"

@class IOSObjectArray;
@class JavaNetDatagramSocket;
@class JavaNetSocketAddress;
@class JavaNioByteBuffer;
@class JavaNioChannelsSpiSelectorProvider;
@protocol JavaNetSocketOption;
@protocol JavaUtilSet;

/*!
 @brief A <code>DatagramChannel</code> is a selectable channel that represents a partial
 abstraction of a datagram socket.
 The <code>socket</code> method of this class can
 return the related <code>DatagramSocket</code> instance, which can handle the
 socket.
 <p>
 A datagram channel is open but not connected when created with the
 <code>open()</code> method. After it is connected, it will keep the connected
 status until it is disconnected or closed. The benefit of a connected channel
 is the reduced effort of security checks during send and receive. When
 invoking <code>read</code> or <code>write</code>, a connected channel is required.
 <p>
 Datagram channels are thread-safe; only one thread can read or write at the
 same time.
 */
@interface JavaNioChannelsDatagramChannel : JavaNioChannelsSpiAbstractSelectableChannel < JavaNioChannelsByteChannel, JavaNioChannelsScatteringByteChannel, JavaNioChannelsGatheringByteChannel, JavaNioChannelsNetworkChannel >

#pragma mark Public

/*!
  Until ready for a public API change 
 */
- (JavaNioChannelsDatagramChannel *)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local;

/*!
 @brief Connects the socket of this channel to a remote address, which is the
 only communication peer for getting and sending datagrams after being
 connected.
 <p>
 This method can be called at any time without affecting the read and
 write operations being processed at the time the method is called. The
 connection status does not change until the channel is disconnected or
 closed.
 <p>
 This method executes the same security checks as the connect method of
 the <code>DatagramSocket</code> class.
 @param address
 the address to be connected to.
 @return this channel.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 if some other I/O error occurs.
 */
- (JavaNioChannelsDatagramChannel *)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)address;

/*!
 @brief Disconnects the socket of this channel, which has been connected before
 in order to send and receive datagrams.
 <p>
 This method can be called at any time without affecting the read and
 write operations being underway. It does not have any effect if the
 socket is not connected or the channel is closed.
 @return this channel.
 @throws IOException
 some other I/O error occurs.
 */
- (JavaNioChannelsDatagramChannel *)disconnect;

/*!
  Until ready for a public API change 
 */
- (JavaNetSocketAddress *)getLocalAddress;

/*!
  Until ready for a public API change 
 */
- (id)getOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)option;

/*!
 @brief Returns whether this channel's socket is connected or not.
 @return <code>true</code> if this channel's socket is connected;
 <code>false</code> otherwise.
 */
- (jboolean)isConnected;

/*!
 @brief Creates an opened and not-connected datagram channel.
 <p>
 This channel is created by calling the <code>openDatagramChannel</code>
 method of the default <code>SelectorProvider</code> instance.
 @return the new channel which is open but not connected.
 @throws IOException
 if some I/O error occurs.
 */
+ (JavaNioChannelsDatagramChannel *)open;

/*!
 @brief Reads a datagram from this channel into the byte buffer.
 <p>
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffer is
 not big enough to store the datagram, the part of the datagram that does
 not fit in the buffer is discarded. Otherwise, this method has the same
 behavior as the <code>read</code> method in the <code>ReadableByteChannel</code>
 interface.
 - seealso: java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)
 @param target
 the byte buffer to store the received datagram.
 @return a non-negative number as the number of bytes read, or -1 as the
 read operation reaches the end of stream.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jint)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)target;

/*!
 @brief Reads a datagram from this channel into an array of byte buffers.
 <p>
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffers
 do not have enough remaining space to store the datagram, the part of the
 datagram that does not fit in the buffers is discarded. Otherwise, this
 method has the same behavior as the <code>read</code> method in the
 <code>ScatteringByteChannel</code> interface.
 - seealso: java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[])
 @param targets
 the byte buffers to store the received datagram.
 @return a non-negative number as the number of bytes read, or -1 if the
 read operation reaches the end of stream.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jlong)readWithJavaNioByteBufferArray:(IOSObjectArray *)targets;

/*!
 @brief Reads a datagram from this channel into an array of byte buffers.
 <p>
 The precondition for calling this method is that the channel is connected
 and the incoming datagram is from the connected address. If the buffers
 do not have enough remaining space to store the datagram, the part of the
 datagram that does not fit in the buffers is discarded. Otherwise, this
 method has the same behavior as the <code>read</code> method in the
 <code>ScatteringByteChannel</code> interface.
 - seealso: java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[],int,int)
 @param targets
 the byte buffers to store the received datagram.
 @param offset
 a non-negative offset in the array of buffers, pointing to the
 starting buffer to store the bytes transferred, must not be
 bigger than <code>targets.length</code>.
 @param length
 a non-negative length to indicate the maximum number of
 buffers to be filled, must not be bigger than
 <code>targets.length - offset</code>.
 @return a non-negative number as the number of bytes read, or -1 if the
 read operation reaches the end of stream.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jlong)readWithJavaNioByteBufferArray:(IOSObjectArray *)targets
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
 @brief Gets a datagram from this channel.
 <p>
 This method transfers a datagram from the channel into the target byte
 buffer. If this channel is in blocking mode, it waits for the datagram
 and returns its address when it is available. If this channel is in
 non-blocking mode and no datagram is available, it returns <code>null</code>
 immediately. The transfer starts at the current position of the buffer,
 and if there is not enough space remaining in the buffer to store the
 datagram then the part of the datagram that does not fit is discarded.
 <p>
 This method can be called at any time and it will block if there is
 another thread that has started a read operation on the channel.
 <p>
 This method executes the same security checks as the receive method of
 the <code>DatagramSocket</code> class.
 @param target
 the byte buffer to store the received datagram.
 @return the address of the datagram if the transfer is performed, or null
 if the channel is in non-blocking mode and no datagram is
 available.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (JavaNetSocketAddress *)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)target;

/*!
 @brief Sends a datagram through this channel.
 The datagram consists of the
 remaining bytes in <code>source</code>.
 <p>
 If this channel is in blocking mode then the datagram is sent as soon as
 there is enough space in the underlying output buffer. If this channel is
 in non-blocking mode then the datagram is only sent if there is enough
 space in the underlying output buffer at that moment. The transfer action
 is just like a regular write operation.
 <p>
 This method can be called at any time and it will block if another thread
 has started a send operation on this channel.
 <p>
 This method executes the same security checks as the send method of the
 <code>DatagramSocket</code> class.
 @param source
 the byte buffer with the datagram to be sent.
 @param address
 the destination address for the datagram.
 @return the number of bytes sent. This is the number of bytes remaining
 in <code>source</code> or zero if the channel is in non-blocking mode
 and there is not enough space for the datagram in the underlying
 output buffer.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jint)sendWithJavaNioByteBuffer:(JavaNioByteBuffer *)source
         withJavaNetSocketAddress:(JavaNetSocketAddress *)address;

/*!
  Until ready for a public API change 
 */
- (JavaNioChannelsDatagramChannel *)setOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)option
                                                              withId:(id)value;

/*!
 @brief Returns the related datagram socket of this channel, which does not
 define additional public methods to those defined by
 <code>DatagramSocket</code>.
 @return the related DatagramSocket instance.
 */
- (JavaNetDatagramSocket *)socket;

/*!
  Until ready for a public API change 
 */
- (id<JavaUtilSet>)supportedOptions;

/*!
 @brief Gets the valid operations of this channel.
 Datagram channels support read
 and write operations, so this method returns (
 <code>SelectionKey.OP_READ</code> | <code>SelectionKey.OP_WRITE</code> ).
 - seealso: java.nio.channels.SelectableChannel#validOps()
 @return valid operations in bit-set.
 */
- (jint)validOps;

/*!
 @brief Writes a datagram from the byte buffer to this channel.
 <p>
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the <code>write</code> method in the
 <code>WritableByteChannel</code> interface.
 - seealso: java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)
 @param source
 the byte buffer as the source of the datagram.
 @return a non-negative number of bytes written.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jint)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)source;

/*!
 @brief Writes a datagram from the byte buffers to this channel.
 <p>
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the write method in the
 <code>GatheringByteChannel</code> interface.
 - seealso: java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[])
 @param sources
 the byte buffers as the source of the datagram.
 @return the number of bytes written. If this method is called, it returns
 the number of bytes that where remaining in the byte buffer. If
 the channel is in non-blocking mode and there was not enough
 space for the datagram in the buffer, it may return zero.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)sources;

/*!
 @brief Writes a datagram from the byte buffers to this channel.
 <p>
 The precondition of calling this method is that the channel is connected
 and the datagram is sent to the connected address. Otherwise, this method
 has the same behavior as the <code>write</code> method in the
 <code>GatheringByteChannel</code> interface.
 - seealso: java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[],int,int)
 @param sources
 the byte buffers as the source of the datagram.
 @param offset
 a non-negative offset in the array of buffers, pointing to the
 starting buffer to be retrieved, must be no larger than
 <code>sources.length</code>.
 @param length
 a non-negative length to indicate the maximum number of
 buffers to be submitted, must be no bigger than
 <code>sources.length - offset</code>.
 @return the number of bytes written. If this method is called, it returns
 the number of bytes that where remaining in the byte buffers. If
 the channel is in non-blocking mode and there was not enough
 space for the datagram in the buffer, it may return zero.
 @throws NotYetConnectedException
 if the channel is not connected yet.
 @throws ClosedChannelException
 if the channel is already closed.
 @throws AsynchronousCloseException
 if the channel is closed by another thread while this method
 is in operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The calling thread will have the
 interrupt state set and the channel will be closed.
 @throws IOException
 some other I/O error occurs.
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)sources
                                 withInt:(jint)offset
                                 withInt:(jint)length;

#pragma mark Protected

/*!
 @brief Constructs a new <code>DatagramChannel</code>.
 @param selectorProvider
 an instance of SelectorProvider.
 */
- (instancetype)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)selectorProvider;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsDatagramChannel)

FOUNDATION_EXPORT void JavaNioChannelsDatagramChannel_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioChannelsDatagramChannel *self, JavaNioChannelsSpiSelectorProvider *selectorProvider);

FOUNDATION_EXPORT JavaNioChannelsDatagramChannel *JavaNioChannelsDatagramChannel_open();

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsDatagramChannel)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsDatagramChannel")
