//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/nio/channels/GatheringByteChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsGatheringByteChannel")
#ifdef RESTRICT_JavaNioChannelsGatheringByteChannel
#define INCLUDE_ALL_JavaNioChannelsGatheringByteChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsGatheringByteChannel 1
#endif
#undef RESTRICT_JavaNioChannelsGatheringByteChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioChannelsGatheringByteChannel_) && (INCLUDE_ALL_JavaNioChannelsGatheringByteChannel || defined(INCLUDE_JavaNioChannelsGatheringByteChannel))
#define JavaNioChannelsGatheringByteChannel_

#define RESTRICT_JavaNioChannelsWritableByteChannel 1
#define INCLUDE_JavaNioChannelsWritableByteChannel 1
#include "java/nio/channels/WritableByteChannel.h"

@class IOSObjectArray;

/*!
 @brief The interface for channels that can write a set of buffers in a single
 operation.
 The corresponding interface for read operations is
 <code>ScatteringByteChannel</code>.
 */
@protocol JavaNioChannelsGatheringByteChannel < JavaNioChannelsWritableByteChannel, JavaObject >

/*!
 @brief Writes bytes from all the given buffers to a channel.
 <p>
 This method is equivalent to: <code>write(buffers, 0, buffers.length);</code>
 @param buffers
 the buffers containing bytes to be written.
 @return the number of bytes actually written.
 @throws AsynchronousCloseException
 if the channel is closed by another thread during this write
 operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The interrupt state of the calling
 thread is set and the channel is closed.
 @throws ClosedChannelException
 if the channel is closed.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>length < 0</code>, or if
 <code>offset + length</code> is greater than the size of
 <code>buffers</code>.
 @throws IOException
 if another I/O error occurs; details are in the message.
 @throws NonWritableChannelException
 if the channel has not been opened in a mode that permits
 writing.
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)buffers;

/*!
 @brief Attempts to write all <code>remaining()</code> bytes from <code>length</code>
 byte buffers, in order, starting at <code>buffers[offset]</code>.
 The number
 of bytes actually written is returned.
 <p>
 If a write operation is in progress, subsequent threads will block until
 the write is completed and then contend for the ability to write.
 @param buffers
 the array of byte buffers that is the source for bytes written
 to the channel.
 @param offset
 the index of the first buffer in <code>buffers</code>to get bytes
 from.
 @param length
 the number of buffers to get bytes from.
 @return the number of bytes actually written.
 @throws AsynchronousCloseException
 if the channel is closed by another thread during this write
 operation.
 @throws ClosedByInterruptException
 if another thread interrupts the calling thread while the
 operation is in progress. The interrupt state of the calling
 thread is set and the channel is closed.
 @throws ClosedChannelException
 if the channel is closed.
 @throws IndexOutOfBoundsException
 if <code>offset < 0</code> or <code>length < 0</code>, or if
 <code>offset + length</code> is greater than the size of
 <code>buffers</code>.
 @throws IOException
 if another I/O error occurs; details are in the message.
 @throws NonWritableChannelException
 if the channel was not opened for writing.
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)buffers
                                 withInt:(jint)offset
                                 withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsGatheringByteChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsGatheringByteChannel)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsGatheringByteChannel")
