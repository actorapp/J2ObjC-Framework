//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/spec/RSAKeyGenParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecRSAKeyGenParameterSpec")
#ifdef RESTRICT_JavaSecuritySpecRSAKeyGenParameterSpec
#define INCLUDE_ALL_JavaSecuritySpecRSAKeyGenParameterSpec 0
#else
#define INCLUDE_ALL_JavaSecuritySpecRSAKeyGenParameterSpec 1
#endif
#undef RESTRICT_JavaSecuritySpecRSAKeyGenParameterSpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecuritySpecRSAKeyGenParameterSpec_) && (INCLUDE_ALL_JavaSecuritySpecRSAKeyGenParameterSpec || defined(INCLUDE_JavaSecuritySpecRSAKeyGenParameterSpec))
#define JavaSecuritySpecRSAKeyGenParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

@class JavaMathBigInteger;

/*!
 @brief The parameter specification for generating an RSA key pair.
 */
@interface JavaSecuritySpecRSAKeyGenParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

+ (JavaMathBigInteger *)F0;

+ (JavaMathBigInteger *)F4;

#pragma mark Public

/*!
 @brief Creates a new <code>RSAKeyGenParameterSpec</code> with the specified key size
 and public exponent.
 @param keysize
 the size of the modulus (number of bits).
 @param publicExponent
 the value of the public exponent.
 */
- (instancetype)initWithInt:(jint)keysize
     withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent;

/*!
 @brief Returns the size of the modulus (number of bits).
 @return the size of the modulus (number of bits).
 */
- (jint)getKeysize;

/*!
 @brief Returns the value of the public exponent.
 @return the value of the public exponent.
 */
- (JavaMathBigInteger *)getPublicExponent;

@end

J2OBJC_STATIC_INIT(JavaSecuritySpecRSAKeyGenParameterSpec)

/*!
 @brief The value of the public exponent <code>F0</code> = 3.
 */
inline JavaMathBigInteger *JavaSecuritySpecRSAKeyGenParameterSpec_get_F0();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *JavaSecuritySpecRSAKeyGenParameterSpec_F0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecRSAKeyGenParameterSpec, F0, JavaMathBigInteger *)

/*!
 @brief The value of the public exponent <code>F4</code> = 65537.
 */
inline JavaMathBigInteger *JavaSecuritySpecRSAKeyGenParameterSpec_get_F4();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *JavaSecuritySpecRSAKeyGenParameterSpec_F4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecRSAKeyGenParameterSpec, F4, JavaMathBigInteger *)

FOUNDATION_EXPORT void JavaSecuritySpecRSAKeyGenParameterSpec_initWithInt_withJavaMathBigInteger_(JavaSecuritySpecRSAKeyGenParameterSpec *self, jint keysize, JavaMathBigInteger *publicExponent);

FOUNDATION_EXPORT JavaSecuritySpecRSAKeyGenParameterSpec *new_JavaSecuritySpecRSAKeyGenParameterSpec_initWithInt_withJavaMathBigInteger_(jint keysize, JavaMathBigInteger *publicExponent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecRSAKeyGenParameterSpec *create_JavaSecuritySpecRSAKeyGenParameterSpec_initWithInt_withJavaMathBigInteger_(jint keysize, JavaMathBigInteger *publicExponent);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecRSAKeyGenParameterSpec)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecRSAKeyGenParameterSpec")
