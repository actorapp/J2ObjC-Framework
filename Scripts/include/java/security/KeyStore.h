//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/KeyStore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKeyStore")
#ifdef RESTRICT_JavaSecurityKeyStore
#define INCLUDE_ALL_JavaSecurityKeyStore 0
#else
#define INCLUDE_ALL_JavaSecurityKeyStore 1
#endif
#undef RESTRICT_JavaSecurityKeyStore
#ifdef INCLUDE_JavaSecurityKeyStore_TrustedCertificateEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_SecretKeyEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_PrivateKeyEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_PasswordProtection
#define INCLUDE_JavaSecurityKeyStore_ProtectionParameter 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_CallbackHandlerProtection
#define INCLUDE_JavaSecurityKeyStore_ProtectionParameter 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityKeyStore_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore))
#define JavaSecurityKeyStore_

@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecurityCertCertificate;
@class JavaSecurityKeyStoreSpi;
@class JavaSecurityProvider;
@class JavaUtilDate;
@protocol JavaSecurityKey;
@protocol JavaSecurityKeyStore_Entry;
@protocol JavaSecurityKeyStore_LoadStoreParameter;
@protocol JavaSecurityKeyStore_ProtectionParameter;
@protocol JavaUtilEnumeration;

/*!
 @brief <code>KeyStore</code> is responsible for maintaining cryptographic keys and their
 owners.
 <p>
 The type of the system key store can be changed by setting the <code>'keystore.type'</code>
  property in the file named <code>JAVA_HOME/lib/security/java.security</code>
 .
 - seealso: Certificate
 - seealso: PrivateKey
 */
@interface JavaSecurityKeyStore : NSObject

#pragma mark Public

/*!
 @brief Returns an <code>Enumeration</code> over all alias names stored in this
 <code>KeyStore</code>.
 @return an <code>Enumeration</code> over all alias names stored in this
 <code>KeyStore</code>.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (id<JavaUtilEnumeration>)aliases;

/*!
 @brief Indicates whether the given alias is present in this <code>KeyStore</code>.
 @param alias
 the alias of an entry.
 @return <code>true</code> if the alias exists, <code>false</code> otherwise.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (jboolean)containsAliasWithNSString:(NSString *)alias;

/*!
 @brief Deletes the entry identified with the given alias from this <code>KeyStore</code>
 .
 @param alias
 the alias for the entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized, or if the entry
 can not be deleted.
 */
- (void)deleteEntryWithNSString:(NSString *)alias;

/*!
 @brief Indicates whether the entry for the given alias is assignable to the
 provided <code>Class</code>.
 @param alias
 the alias for the entry.
 @param entryClass
 the type of the entry.
 @return <code>true</code> if the <code>Entry</code> for the alias is assignable to
 the specified <code>entryClass</code>.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (jboolean)entryInstanceOfWithNSString:(NSString *)alias
                           withIOSClass:(IOSClass *)entryClass;

/*!
 @brief Returns the trusted certificate for the entry with the given alias.
 @param alias
 the alias for the entry.
 @return the trusted certificate for the entry with the given alias, or
 <code>null</code> if the specified alias is not bound to an entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (JavaSecurityCertCertificate *)getCertificateWithNSString:(NSString *)alias;

/*!
 @brief Returns the alias associated with the first entry whose certificate
 matches the specified certificate.
 @param cert
 the certificate to find the associated entry's alias for.
 @return the alias or <code>null</code> if no entry with the specified
 certificate can be found.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (NSString *)getCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Returns the certificate chain for the entry with the given alias.
 @param alias
 the alias for the entry.
 @return the certificate chain for the entry with the given alias, or
 <code>null</code> if the specified alias is not bound to an entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (IOSObjectArray *)getCertificateChainWithNSString:(NSString *)alias;

/*!
 @brief Returns the creation date of the entry with the given alias.
 @param alias
 the alias for the entry.
 @return the creation date, or <code>null</code> if the specified alias is not
 bound to an entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (JavaUtilDate *)getCreationDateWithNSString:(NSString *)alias;

/*!
 @brief Returns the default type for <code>KeyStore</code> instances.
 <p>The default is specified in the <code>'keystore.type'</code> property in the
 file named <code>java.security</code> properties file. If this property
 is not set, <code>"jks"</code> will be used.
 @return the default type for <code>KeyStore</code> instances
 */
+ (NSString *)getDefaultType;

/*!
 @brief Returns the <code>Entry</code> with the given alias, using the specified
 <code>ProtectionParameter</code>.
 @param alias
 the alias of the requested entry.
 @param param
 the <code>ProtectionParameter</code> used to protect the requested
 entry, maybe <code>null</code>.
 @return he <code>Entry</code> with the given alias, using the specified
 <code>ProtectionParameter</code>.
 @throws NoSuchAlgorithmException
 if the required algorithm is not available.
 @throws UnrecoverableEntryException
 if the entry can not be recovered.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code>.
 */
- (id<JavaSecurityKeyStore_Entry>)getEntryWithNSString:(NSString *)alias
          withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)param;

/*!
 @brief Returns a new instance of <code>KeyStore</code> with the specified type.
 @param type
 the type of the returned <code>KeyStore</code>.
 @return a new instance of <code>KeyStore</code> with the specified type.
 @throws KeyStoreException
 if an error occurred during the creation of the new <code>KeyStore</code>
 .
 @throws NullPointerException if <code>type == null</code>
 - seealso: #getDefaultType
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type;

/*!
 @brief Returns a new instance of <code>KeyStore</code> from the specified provider
 with the given type.
 The <code>provider</code> supplied does not have to be
 registered.
 @param type
 the type of the returned <code>KeyStore</code>.
 @param provider
 the provider of the <code>KeyStore</code>.
 @return a new instance of <code>KeyStore</code> from the specified provider
 with the given type.
 @throws KeyStoreException
 if an error occurred during the creation of the new <code>KeyStore</code>
 .
 @throws IllegalArgumentException
 if <code>provider</code> is <code>null</code> or the empty string.
 @throws NullPointerException if <code>type == null</code> (instead of
 NoSuchAlgorithmException) as in 1.4 release
 - seealso: #getDefaultType
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type
                         withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a new instance of <code>KeyStore</code> from the specified provider
 with the given type.
 @param type
 the type of the returned <code>KeyStore</code>.
 @param provider
 name of the provider of the <code>KeyStore</code>.
 @return a new instance of <code>KeyStore</code> from the specified provider
 with the given type.
 @throws KeyStoreException
 if an error occurred during the creation of the new <code>KeyStore</code>
 .
 @throws NoSuchProviderException
 if the specified provider is not available.
 @throws IllegalArgumentException if <code>provider == null || provider.isEmpty()</code>
 @throws NullPointerException
 if <code>type</code> is <code>null</code> (instead of
 NoSuchAlgorithmException) as in 1.4 release
 - seealso: #getDefaultType
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type
                                     withNSString:(NSString *)provider;

/*!
 @brief Returns the key with the given alias, using the password to recover the
 key from the store.
 @param alias
 the alias for the entry.
 @param password
 the password used to recover the key.
 @return the key with the specified alias, or <code>null</code> if the
 specified alias is not bound to an entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws NoSuchAlgorithmException
 if the algorithm for recovering the key is not available.
 @throws UnrecoverableKeyException
 if the key can not be recovered.
 */
- (id<JavaSecurityKey>)getKeyWithNSString:(NSString *)alias
                            withCharArray:(IOSCharArray *)password;

/*!
 @brief Returns the provider associated with this <code>KeyStore</code>.
 @return the provider associated with this <code>KeyStore</code>.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the type of this <code>KeyStore</code>.
 @return the type of this <code>KeyStore</code>.
 */
- (NSString *)getType;

/*!
 @brief Indicates whether the specified alias is associated with a
 <code>TrustedCertificateEntry</code>.
 @param alias
 the alias of an entry.
 @return <code>true</code> if the given alias is associated with a certificate
 entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (jboolean)isCertificateEntryWithNSString:(NSString *)alias;

/*!
 @brief Indicates whether the specified alias is associated with either a
 <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.
 @param alias
 the alias of an entry.
 @return <code>true</code> if the given alias is associated with a key entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (jboolean)isKeyEntryWithNSString:(NSString *)alias;

/*!
 @brief Initializes this <code>KeyStore</code> from the provided <code>InputStream</code>.
 Pass <code>null</code> as the <code>stream</code> argument to initialize an empty
 <code>KeyStore</code> or to initialize a <code>KeyStore</code> which does not rely
 on an <code>InputStream</code>. This <code>KeyStore</code> utilizes the given
 password to verify the stored data.
 @param stream
 the <code>InputStream</code> to load this <code>KeyStore</code>'s data
 from or <code>null</code>.
 @param password
 the password to verify the stored data, maybe <code>null</code>.
 @throws IOException
 if a problem occurred while reading from the stream.
 @throws NoSuchAlgorithmException
 if the required algorithm is not available.
 @throws CertificateException
 if an exception occurred while loading the certificates of
 this <code>KeyStore</code>.
 */
- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)stream
                      withCharArray:(IOSCharArray *)password;

/*!
 @brief Loads this <code>KeyStore</code> using the specified <code>LoadStoreParameter</code>
 .
 @param param
 the <code>LoadStoreParameter</code> that specifies how to load this
 <code>KeyStore</code>, maybe <code>null</code>.
 @throws IOException
 if a problem occurred while reading from the stream.
 @throws NoSuchAlgorithmException
 if the required algorithm is not available.
 @throws CertificateException
 if an exception occurred while loading the certificates of
 this <code>KeyStore</code>.
 @throws IllegalArgumentException
 if the given <code>LoadStoreParameter</code> is not recognized.
 */
- (void)load__WithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)param;

/*!
 @brief Associates the given alias with a certificate.
 <p>
 If the specified alias already exists, it will be reassigned.
 @param alias
 the alias for the certificate.
 @param cert
 the certificate.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized, or an existing
 alias is not associated to an entry containing a trusted
 certificate, or this method fails for any other reason.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code>.
 */
- (void)setCertificateEntryWithNSString:(NSString *)alias
        withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Stores the given <code>Entry</code> in this <code>KeyStore</code> and associates
 the entry with the given <code>alias</code>.
 The entry is protected by the
 specified <code>ProtectionParameter</code>.
 <p>
 If the specified alias already exists, it will be reassigned.
 @param alias
 the alias for the entry.
 @param entry_
 the entry to store.
 @param param
 the <code>ProtectionParameter</code> to protect the entry.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code> or <code>entry</code> is <code>null</code>
 .
 */
- (void)setEntryWithNSString:(NSString *)alias
withJavaSecurityKeyStore_Entry:(id<JavaSecurityKeyStore_Entry>)entry_
withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)param;

/*!
 @brief Associates the given alias with a key and a certificate chain.
 <p>
 If the specified alias already exists, it will be reassigned.
 <p>
 If this <code>KeyStore</code> is of type <code>"jks"</code>, <code>key</code> must be
 encoded conform to the PKS#8 standard as an
 <code>javax.crypto.EncryptedPrivateKeyInfo</code>.
 @param alias
 the alias for the key.
 @param key
 the key in an encoded format.
 @param chain
 the certificate chain.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized or if <code>key</code>
 is null.
 @throws IllegalArgumentException
 if <code>key</code> is a <code>PrivateKey</code> and <code>chain</code>
 does.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code>.
 */
- (void)setKeyEntryWithNSString:(NSString *)alias
                  withByteArray:(IOSByteArray *)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Associates the given alias with the key, password and certificate chain.
 <p>
 If the specified alias already exists, it will be reassigned.
 @param alias
 the alias for the key.
 @param key
 the key.
 @param password
 the password.
 @param chain
 the certificate chain.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws IllegalArgumentException
 if <code>key</code> is a <code>PrivateKey</code> and <code>chain</code> does
 not contain any certificates.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code>.
 */
- (void)setKeyEntryWithNSString:(NSString *)alias
            withJavaSecurityKey:(id<JavaSecurityKey>)key
                  withCharArray:(IOSCharArray *)password
withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Returns the number of entries stored in this <code>KeyStore</code>.
 @return the number of entries stored in this <code>KeyStore</code>.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 */
- (jint)size;

/*!
 @brief Stores this <code>KeyStore</code> using the specified <code>LoadStoreParameter</code>
 .
 @param param
 the <code>LoadStoreParameter</code> that specifies how to store
 this <code>KeyStore</code>, maybe <code>null</code>.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws IOException
 if a problem occurred while writing to the stream.
 @throws NoSuchAlgorithmException
 if the required algorithm is not available.
 @throws CertificateException
 if an exception occurred while storing the certificates of
 this <code>KeyStore</code>.
 @throws IllegalArgumentException
 if the given <code>LoadStoreParameter</code> is not recognized.
 */
- (void)storeWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)param;

/*!
 @brief Writes this <code>KeyStore</code> to the specified <code>OutputStream</code>.
 The
 data written to the <code>OutputStream</code> is protected by the specified
 password.
 @param stream
 the <code>OutputStream</code> to write the store's data to.
 @param password
 the password to protect the data.
 @throws KeyStoreException
 if this <code>KeyStore</code> is not initialized.
 @throws IOException
 if a problem occurred while writing to the stream.
 @throws NoSuchAlgorithmException
 if the required algorithm is not available.
 @throws CertificateException
 if an exception occurred while storing the certificates of
 this <code>KeyStore</code>.
 */
- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                      withCharArray:(IOSCharArray *)password;

#pragma mark Protected

/*!
 @brief Constructs a new instance of <code>KeyStore</code> with the given arguments.
 @param keyStoreSpi
 the concrete key store.
 @param provider
 the provider.
 @param type
 the type of the <code>KeyStore</code> to be constructed.
 */
- (instancetype)initWithJavaSecurityKeyStoreSpi:(JavaSecurityKeyStoreSpi *)keyStoreSpi
                       withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                   withNSString:(NSString *)type;

@end

J2OBJC_STATIC_INIT(JavaSecurityKeyStore)

FOUNDATION_EXPORT void JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStore *self, JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *new_JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore *create_JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_(NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_withNSString_(NSString *type, NSString *provider);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_withJavaSecurityProvider_(NSString *type, JavaSecurityProvider *provider);

FOUNDATION_EXPORT NSString *JavaSecurityKeyStore_getDefaultType();

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore)

#endif

#if !defined (JavaSecurityKeyStore_Builder_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_Builder))
#define JavaSecurityKeyStore_Builder_

@class JavaIoFile;
@class JavaSecurityKeyStore;
@class JavaSecurityProvider;
@protocol JavaSecurityKeyStore_ProtectionParameter;

/*!
 @brief <code>Builder</code> is used to construct new instances of <code>KeyStore</code>.
 */
@interface JavaSecurityKeyStore_Builder : NSObject

#pragma mark Public

/*!
 @brief Returns the <code>KeyStore</code> created by this <code>Builder</code>.
 @return the <code>KeyStore</code> created by this <code>Builder</code>.
 @throws KeyStoreException
 if an error occurred during construction.
 */
- (JavaSecurityKeyStore *)getKeyStore;

/*!
 @brief Returns the <code>ProtectionParameter</code> to be used when a <code>Entry</code>
  with the specified alias is requested.
 Before this method is
 invoked, <code>getKeyStore()</code> must be called.
 @param alias
 the alias for the entry.
 @return the <code>ProtectionParameter</code> to be used when a <code>Entry</code>
  with the specified alias is requested.
 @throws KeyStoreException
 if an error occurred during the lookup for the protection
 parameter.
 @throws IllegalStateException
 if <code>getKeyStore()</code> is not called prior the
 invocation of this method.
 @throws NullPointerException
 if <code>alias</code> is <code>null</code>.
 */
- (id<JavaSecurityKeyStore_ProtectionParameter>)getProtectionParameterWithNSString:(NSString *)alias;

/*!
 @brief Returns a new <code>Builder</code> that holds the given <code>KeyStore</code>
 and the given <code>ProtectionParameter</code>.
 @param keyStore
 the <code>KeyStore</code> to be held.
 @param protectionParameter
 the <code>ProtectionParameter</code> to be held.
 @return a new instance of <code>Builder</code> that holds the specified
 <code>KeyStore</code> and the specified <code>ProtectionParameter</code>
 .
 @throws NullPointerException
 if <code>keyStore</code> or <code>protectionParameter</code> is
 <code>null</code>.
 @throws IllegalArgumentException
 if the given <code>KeyStore</code> is not initialized.
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)keyStore
                         withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protectionParameter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new <code>Builder</code> that creates a new <code>KeyStore</code>
 based on the provided arguments.
 <p>
 If <code>provider</code> is <code>null</code>, all installed providers are
 searched, otherwise the key store from the specified provider is
 used.
 @param type
 the type of the <code>KeyStore</code> to be constructed.
 @param provider
 the provider of the <code>KeyStore</code> to be constructed,
 maybe <code>null</code>.
 @param file
 the <code>File</code> that contains the data for the <code>KeyStore</code>
 .
 @param protectionParameter
 the <code>ProtectionParameter</code> used to protect the stored
 keys.
 @return a new <code>Builder</code> that creates a new <code>KeyStore</code>
 based on the provided arguments.
 @throws NullPointerException
 if <code>type, protectionParameter</code> or <code>file</code> is
 <code>null</code>.
 @throws IllegalArgumentException
 <code>protectionParameter</code> not an instance of either
 <code>PasswordProtection</code> or <code>CallbackHandlerProtection</code>
 , <code>file</code> is not a file or
 does not exist at all.
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithNSString:(NSString *)type
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                           withJavaIoFile:(JavaIoFile *)file
             withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protectionParameter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new <code>Builder</code> that creates a new <code>KeyStore</code>
 based on the provided arguments.
 <p>
 If <code>provider</code> is <code>null</code>, all installed providers are
 searched, otherwise the key store from the specified provider is
 used.
 @param type
 the type of the <code>KeyStore</code> to be constructed.
 @param provider
 the provider of the <code>KeyStore</code> to be constructed,
 maybe <code>null</code>.
 @param protectionParameter
 the <code>ProtectionParameter</code> used to protect the stored
 keys.
 @return a new <code>Builder</code> that creates a new <code>KeyStore</code>
 based on the provided arguments.
 @throws NullPointerException
 if <code>type</code> or <code>protectionParameter</code> is <code>null</code>
 .
 @throws IllegalArgumentException
 <code>protectionParameter</code> not an instance of either
 <code>PasswordProtection</code> or <code>CallbackHandlerProtection</code>
 , <code>file</code> is not a file or
 does not exist at all.
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithNSString:(NSString *)type
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
             withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protectionParameter OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

/*!
 @brief Constructs a new instance of <code>Builder</code>.
 */
- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_Builder)

FOUNDATION_EXPORT void JavaSecurityKeyStore_Builder_init(JavaSecurityKeyStore_Builder *self);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithJavaSecurityKeyStore_withJavaSecurityKeyStore_ProtectionParameter_(JavaSecurityKeyStore *keyStore, id<JavaSecurityKeyStore_ProtectionParameter> protectionParameter);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithNSString_withJavaSecurityProvider_withJavaIoFile_withJavaSecurityKeyStore_ProtectionParameter_(NSString *type, JavaSecurityProvider *provider, JavaIoFile *file, id<JavaSecurityKeyStore_ProtectionParameter> protectionParameter);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithNSString_withJavaSecurityProvider_withJavaSecurityKeyStore_ProtectionParameter_(NSString *type, JavaSecurityProvider *provider, id<JavaSecurityKeyStore_ProtectionParameter> protectionParameter);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_Builder)

#endif

#if !defined (JavaSecurityKeyStore_LoadStoreParameter_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_LoadStoreParameter))
#define JavaSecurityKeyStore_LoadStoreParameter_

@protocol JavaSecurityKeyStore_ProtectionParameter;

/*!
 @brief <code>LoadStoreParameter</code> represents a parameter that specifies how a
 <code>KeyStore</code> can be loaded and stored.
 - seealso: KeyStore#load(LoadStoreParameter)
 - seealso: KeyStore#store(LoadStoreParameter)
 */
@protocol JavaSecurityKeyStore_LoadStoreParameter < JavaObject >

/*!
 @brief Returns the <code>ProtectionParameter</code> which is used to protect data
 in the <code>KeyStore</code>.
 @return the <code>ProtectionParameter</code> which is used to protect data
 in the <code>KeyStore</code>, maybe <code>null</code>.
 */
- (id<JavaSecurityKeyStore_ProtectionParameter>)getProtectionParameter;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_LoadStoreParameter)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_LoadStoreParameter)

#endif

#if !defined (JavaSecurityKeyStore_ProtectionParameter_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_ProtectionParameter))
#define JavaSecurityKeyStore_ProtectionParameter_

/*!
 @brief <code>ProtectionParameter</code> is a marker interface for protection
 parameters.
 A protection parameter is used to protect the content of a
 <code>KeyStore</code>.
 */
@protocol JavaSecurityKeyStore_ProtectionParameter < JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_ProtectionParameter)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_ProtectionParameter)

#endif

#if !defined (JavaSecurityKeyStore_CallbackHandlerProtection_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_CallbackHandlerProtection))
#define JavaSecurityKeyStore_CallbackHandlerProtection_

@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief <code>CallbackHandlerProtection</code> is a <code>ProtectionParameter</code> that
 encapsulates a <code>CallbackHandler</code>.
 */
@interface JavaSecurityKeyStore_CallbackHandlerProtection : NSObject < JavaSecurityKeyStore_ProtectionParameter >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>CallbackHandlerProtection</code> with
 the <code>CallbackHandler</code>.
 @param handler
 the <code>CallbackHandler</code>.
 @throws NullPointerException
 if <code>handler</code> is <code>null</code>.
 */
- (instancetype)initWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)handler;

/*!
 @brief Returns the <code>CallbackHandler</code>.
 @return the <code>CallbackHandler</code>.
 */
- (id<JavaxSecurityAuthCallbackCallbackHandler>)getCallbackHandler;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_CallbackHandlerProtection)

FOUNDATION_EXPORT void JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(JavaSecurityKeyStore_CallbackHandlerProtection *self, id<JavaxSecurityAuthCallbackCallbackHandler> handler);

FOUNDATION_EXPORT JavaSecurityKeyStore_CallbackHandlerProtection *new_JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(id<JavaxSecurityAuthCallbackCallbackHandler> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_CallbackHandlerProtection *create_JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(id<JavaxSecurityAuthCallbackCallbackHandler> handler);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_CallbackHandlerProtection)

#endif

#if !defined (JavaSecurityKeyStore_Entry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_Entry))
#define JavaSecurityKeyStore_Entry_

/*!
 @brief <code>Entry</code> is the common marker interface for a <code>KeyStore</code>
 entry.
 */
@protocol JavaSecurityKeyStore_Entry < JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_Entry)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_Entry)

#endif

#if !defined (JavaSecurityKeyStore_PasswordProtection_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_PasswordProtection))
#define JavaSecurityKeyStore_PasswordProtection_

#define RESTRICT_JavaxSecurityAuthDestroyable 1
#define INCLUDE_JavaxSecurityAuthDestroyable 1
#include "javax/security/auth/Destroyable.h"

@class IOSCharArray;

/*!
 @brief <code>PasswordProtection</code> is a <code>ProtectionParameter</code> that protects
 a <code>KeyStore</code> using a password.
 */
@interface JavaSecurityKeyStore_PasswordProtection : NSObject < JavaSecurityKeyStore_ProtectionParameter, JavaxSecurityAuthDestroyable >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>PasswordProtection</code> with a
 password.
 A copy of the password is stored in the new <code>PasswordProtection</code>
  object.
 @param password
 the password, maybe <code>null</code>.
 */
- (instancetype)initWithCharArray:(IOSCharArray *)password;

/*!
 @brief Destroys / invalidates the password.
 @throws DestroyFailedException
 if the password could not be invalidated.
 */
- (void)destroy;

/*!
 @brief Returns the password.
 @return the password.
 @throws IllegalStateException
 if the password has been destroyed.
 */
- (IOSCharArray *)getPassword;

/*!
 @brief Indicates whether the password is invalidated.
 @return <code>true</code> if the password is invalidated, <code>false</code>
 otherwise.
 */
- (jboolean)isDestroyed;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_PasswordProtection)

FOUNDATION_EXPORT void JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(JavaSecurityKeyStore_PasswordProtection *self, IOSCharArray *password);

FOUNDATION_EXPORT JavaSecurityKeyStore_PasswordProtection *new_JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(IOSCharArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_PasswordProtection *create_JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(IOSCharArray *password);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_PasswordProtection)

#endif

#if !defined (JavaSecurityKeyStore_PrivateKeyEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_PrivateKeyEntry))
#define JavaSecurityKeyStore_PrivateKeyEntry_

@class IOSObjectArray;
@class JavaSecurityCertCertificate;
@protocol JavaSecurityPrivateKey;

/*!
 @brief <code>PrivateKeyEntry</code> represents a <code>KeyStore</code> entry that
 holds a private key.
 */
@interface JavaSecurityKeyStore_PrivateKeyEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>PrivateKeyEntry</code> with the given
 <code>PrivateKey</code> and the provided certificate chain.
 @param privateKey
 the private key.
 @param chain
 the ordered certificate chain with the certificate
 corresponding to the private key at index 0.
 @throws NullPointerException
 if <code>privateKey</code> or <code>chain</code> is <code>null</code>.
 @throws IllegalArgumentException
 if <code>chain.length == 0</code>, the algorithm of the
 private key does not match the algorithm of the public
 key of the first certificate or the certificates are not
 all of the same type.
 */
- (instancetype)initWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
          withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Returns the certificate corresponding to the private key.
 @return the certificate corresponding to the private key.
 */
- (JavaSecurityCertCertificate *)getCertificate;

/*!
 @brief Returns the certificate chain.
 @return the certificate chain.
 */
- (IOSObjectArray *)getCertificateChain;

/*!
 @brief Returns the private key.
 @return the private key.
 */
- (id<JavaSecurityPrivateKey>)getPrivateKey;

/*!
 @brief Returns a string containing a concise, human-readable description of
 this <code>PrivateKeyEntry</code>.
 @return a printable representation for this <code>PrivateKeyEntry</code>.
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_PrivateKeyEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(JavaSecurityKeyStore_PrivateKeyEntry *self, id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain);

FOUNDATION_EXPORT JavaSecurityKeyStore_PrivateKeyEntry *new_JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_PrivateKeyEntry *create_JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_PrivateKeyEntry)

#endif

#if !defined (JavaSecurityKeyStore_SecretKeyEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_SecretKeyEntry))
#define JavaSecurityKeyStore_SecretKeyEntry_

@protocol JavaxCryptoSecretKey;

/*!
 @brief <code>SecretKeyEntry</code> represents a <code>KeyStore</code> entry that
 holds a secret key.
 */
@interface JavaSecurityKeyStore_SecretKeyEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>SecretKeyEntry</code> with the given
 <code>SecretKey</code>.
 @param secretKey
 the secret key.
 @throws NullPointerException
 if <code>secretKey</code> is <code>null</code>.
 */
- (instancetype)initWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)secretKey;

/*!
 @brief Returns the secret key.
 @return the secret key.
 */
- (id<JavaxCryptoSecretKey>)getSecretKey;

/*!
 @brief Returns a string containing a concise, human-readable description of
 this <code>SecretKeyEntry</code>.
 @return a printable representation for this <code>SecretKeyEntry</code>
 .
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_SecretKeyEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(JavaSecurityKeyStore_SecretKeyEntry *self, id<JavaxCryptoSecretKey> secretKey);

FOUNDATION_EXPORT JavaSecurityKeyStore_SecretKeyEntry *new_JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(id<JavaxCryptoSecretKey> secretKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_SecretKeyEntry *create_JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(id<JavaxCryptoSecretKey> secretKey);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_SecretKeyEntry)

#endif

#if !defined (JavaSecurityKeyStore_TrustedCertificateEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_TrustedCertificateEntry))
#define JavaSecurityKeyStore_TrustedCertificateEntry_

@class JavaSecurityCertCertificate;

/*!
 @brief <code>TrustedCertificateEntry</code> represents a <code>KeyStore</code> entry that
 holds a trusted certificate.
 */
@interface JavaSecurityKeyStore_TrustedCertificateEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>TrustedCertificateEntry</code> with the
 given <code>Certificate</code>.
 @param trustCertificate
 the trusted certificate.
 @throws NullPointerException
 if <code>trustCertificate</code> is <code>null</code>.
 */
- (instancetype)initWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)trustCertificate;

/*!
 @brief Returns the trusted certificate.
 @return the trusted certificate.
 */
- (JavaSecurityCertCertificate *)getTrustedCertificate;

/*!
 @brief Returns a string containing a concise, human-readable description of
 this <code>TrustedCertificateEntry</code>.
 @return a printable representation for this <code>TrustedCertificateEntry</code>
 .
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_TrustedCertificateEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityKeyStore_TrustedCertificateEntry *self, JavaSecurityCertCertificate *trustCertificate);

FOUNDATION_EXPORT JavaSecurityKeyStore_TrustedCertificateEntry *new_JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *trustCertificate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_TrustedCertificateEntry *create_JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *trustCertificate);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_TrustedCertificateEntry)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKeyStore")
