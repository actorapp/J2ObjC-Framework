//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/Provider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityProvider")
#ifdef RESTRICT_JavaSecurityProvider
#define INCLUDE_ALL_JavaSecurityProvider 0
#else
#define INCLUDE_ALL_JavaSecurityProvider 1
#endif
#undef RESTRICT_JavaSecurityProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityProvider_) && (INCLUDE_ALL_JavaSecurityProvider || defined(INCLUDE_JavaSecurityProvider))
#define JavaSecurityProvider_

#define RESTRICT_JavaUtilProperties 1
#define INCLUDE_JavaUtilProperties 1
#include "java/util/Properties.h"

@class JavaIoInputStream;
@class JavaSecurityProvider_Service;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief <code>Provider</code> is the abstract superclass for all security providers in the
 Java security infrastructure.
 */
@interface JavaSecurityProvider : JavaUtilProperties

#pragma mark Public

/*!
 @brief Clears all properties used to look up services implemented by this
 <code>Provider</code>.
 */
- (void)clear;

- (id<JavaUtilSet>)entrySet;

/*!
 @brief Returns a description of the services being provided.
 @return a description of the services being provided.
 */
- (NSString *)getInfo;

/*!
 @brief Returns the name of this provider.
 @return the name of this provider.
 */
- (NSString *)getName;

/*!
 @brief Returns the service with the specified <code>type</code> implementing the
 specified <code>algorithm</code>, or <code>null</code> if no such implementation
 exists.
 <p>
 If two services match the requested type and algorithm, the one added
 with the <code>putService(Service)</code> is returned (as opposed to the one
 added via <code>put(Object,Object)</code>.
 @param type
 the type of the service (for example <code>KeyPairGenerator</code>)
 @param algorithm
 the algorithm name (case insensitive)
 @return the requested service, or <code>null</code> if no such implementation
 exists
 */
- (JavaSecurityProvider_Service *)getServiceWithNSString:(NSString *)type
                                            withNSString:(NSString *)algorithm;

/*!
 @brief Returns an unmodifiable <code>Set</code> of all services registered by this
 provider.
 @return an unmodifiable <code>Set</code> of all services registered by this
 provider
 */
- (id<JavaUtilSet>)getServices;

/*!
 @brief Returns the version number for the services being provided.
 @return the version number for the services being provided.
 */
- (jdouble)getVersion;

- (id<JavaUtilSet>)keySet;

- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)inStream;

/*!
 @brief Maps the specified <code>key</code> property name to the specified <code>value</code>
 .
 @param key
 the name of the property.
 @param value
 the value of the property.
 @return the value that was previously mapped to the specified <code>key</code>
 ,or <code>null</code> if it did not have one.
 */
- (id)putWithId:(id)key
         withId:(id)value;

/*!
 @brief Copies all from the provided map to this <code>Provider</code>.
 @param t
 the mappings to copy to this provider.
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)t;

/*!
 @brief Removes the specified <code>key</code> and its associated value from this
 <code>Provider</code>.
 @param key
 the name of the property
 @return the value that was mapped to the specified <code>key</code> ,or
 <code>null</code> if no mapping was present
 */
- (id)removeWithId:(id)key;

/*!
 @brief Returns a string containing a concise, human-readable description of
 this <code>Provider</code> including its name and its version.
 @return a printable representation for this <code>Provider</code>.
 */
- (NSString *)description;

- (id<JavaUtilCollection>)values;

#pragma mark Protected

/*!
 @brief Constructs a new instance of <code>Provider</code> with its name, version and
 description.
 @param name
 the name of the provider.
 @param version_
 the version of the provider.
 @param info
 a description of the provider.
 */
- (instancetype)initWithNSString:(NSString *)name
                      withDouble:(jdouble)version_
                    withNSString:(NSString *)info;

/*!
 @brief Adds a <code>Service</code> to this <code>Provider</code>.
 If a service with the
 same name was registered via this method, it is replace.
 @param s
 the <code>Service</code> to register
 */
- (void)putServiceWithJavaSecurityProvider_Service:(JavaSecurityProvider_Service *)s;

/*!
 @brief Removes a previously registered <code>Service</code> from this <code>Provider</code>
 .
 @param s
 the <code>Service</code> to remove
 @throws NullPointerException
 if <code>s</code> is <code>null</code>
 */
- (void)removeServiceWithJavaSecurityProvider_Service:(JavaSecurityProvider_Service *)s;

#pragma mark Package-Private

/*!
 @brief Get the provider preference order number.
 */
- (jint)getProviderNumber;

/*!
 @brief Get the service of the specified type
 */
- (JavaSecurityProvider_Service *)getServiceWithNSString:(NSString *)type;

/*!
 @brief Returns true if this provider implements the given algorithm.
 Caller
 must specify the cryptographic service and specify constraints via the
 attribute name and value.
 @param serv
 Crypto service.
 @param alg
 Algorithm or type.
 @param attribute
 The attribute name or <code>null</code>.
 @param val
 The attribute value.
 */
- (jboolean)implementsAlgWithNSString:(NSString *)serv
                         withNSString:(NSString *)alg
                         withNSString:(NSString *)attribute
                         withNSString:(NSString *)val;

/*!
 @brief Set the provider preference order number.
 @param n
 */
- (void)setProviderNumberWithInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityProvider)

FOUNDATION_EXPORT void JavaSecurityProvider_initWithNSString_withDouble_withNSString_(JavaSecurityProvider *self, NSString *name, jdouble version_, NSString *info);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityProvider)

#endif

#if !defined (JavaSecurityProvider_Service_) && (INCLUDE_ALL_JavaSecurityProvider || defined(INCLUDE_JavaSecurityProvider_Service))
#define JavaSecurityProvider_Service_

@class JavaSecurityProvider;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief <code>Service</code> represents a service in the Java Security infrastructure.
 Each service describes its type, the algorithm it implements, to which
 provider it belongs and other properties.
 */
@interface JavaSecurityProvider_Service : NSObject

#pragma mark Public

/*!
 @brief Constructs a new instance of <code>Service</code> with the given
 attributes.
 @param provider
 the provider to which this service belongs.
 @param type
 the type of this service (for example <code>KeyPairGenerator</code>
 ).
 @param algorithm
 the algorithm this service implements.
 @param className_
 the name of the class implementing this service.
 @param aliases
 <code>List</code> of aliases for the algorithm name, or <code>null</code>
  if the implemented algorithm has no aliases.
 @param attributes
 <code>Map</code> of additional attributes, or <code>null</code> if
 this <code>Service</code> has no attributed.
 @throws NullPointerException
 if <code>provider, type, algorithm</code> or <code>className</code>
 is <code>null</code>.
 */
- (instancetype)initWithJavaSecurityProvider:(JavaSecurityProvider *)provider
                                withNSString:(NSString *)type
                                withNSString:(NSString *)algorithm
                                withNSString:(NSString *)className_
                            withJavaUtilList:(id<JavaUtilList>)aliases
                             withJavaUtilMap:(id<JavaUtilMap>)attributes;

/*!
 @brief Returns the name of the algorithm implemented by this <code>Service</code>
 .
 @return the name of the algorithm implemented by this <code>Service</code>
 .
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the value of the attribute with the specified <code>name</code>.
 @param name
 the name of the attribute.
 @return the value of the attribute, or <code>null</code> if no attribute
 with the given name is set.
 @throws NullPointerException
 if <code>name</code> is <code>null</code>.
 */
- (NSString *)getAttributeWithNSString:(NSString *)name;

/*!
 @brief Returns the name of the class implementing this <code>Service</code>.
 @return the name of the class implementing this <code>Service</code>.
 */
- (NSString *)getClassName;

/*!
 @brief Returns the <code>Provider</code> this <code>Service</code> belongs to.
 @return the <code>Provider</code> this <code>Service</code> belongs to.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the type of this <code>Service</code>.
 For example <code>KeyPairGenerator</code>
 .
 @return the type of this <code>Service</code>.
 */
- (NSString *)getType;

/*!
 @brief Creates and returns a new instance of the implementation described by
 this <code>Service</code>.
 @param constructorParameter
 the parameter that is used by the constructor, or <code>null</code>
  if the implementation does not declare a constructor
 parameter.
 @return a new instance of the implementation described by this
 <code>Service</code>.
 @throws NoSuchAlgorithmException
 if the instance could not be constructed.
 @throws InvalidParameterException
 if the implementation does not support the specified
 <code>constructorParameter</code>.
 */
- (id)newInstanceWithId:(id)constructorParameter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Indicates whether this <code>Service</code> supports the specified
 constructor parameter.
 @param parameter
 the parameter to test.
 @return <code>true</code> if this <code>Service</code> supports the specified
 constructor parameter, <code>false</code> otherwise.
 */
- (jboolean)supportsParameterWithId:(id)parameter;

/*!
 @brief Returns a string containing a concise, human-readable description of
 this <code>Service</code>.
 @return a printable representation for this <code>Service</code>.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Adds an alias.
 @param alias the alias to add
 */
- (void)addAliasWithNSString:(NSString *)alias;

- (id<JavaUtilList>)getAliases;

/*!
 @brief Puts a new attribute mapping.
 @param name the attribute name.
 @param value the attribute value.
 */
- (void)putAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityProvider_Service)

FOUNDATION_EXPORT void JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider_Service *self, JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes);

FOUNDATION_EXPORT JavaSecurityProvider_Service *new_JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityProvider_Service *create_JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityProvider_Service)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityProvider")
