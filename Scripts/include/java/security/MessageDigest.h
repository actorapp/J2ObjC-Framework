//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/MessageDigest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityMessageDigest")
#ifdef RESTRICT_JavaSecurityMessageDigest
#define INCLUDE_ALL_JavaSecurityMessageDigest 0
#else
#define INCLUDE_ALL_JavaSecurityMessageDigest 1
#endif
#undef RESTRICT_JavaSecurityMessageDigest

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityMessageDigest_) && (INCLUDE_ALL_JavaSecurityMessageDigest || defined(INCLUDE_JavaSecurityMessageDigest))
#define JavaSecurityMessageDigest_

#define RESTRICT_JavaSecurityMessageDigestSpi 1
#define INCLUDE_JavaSecurityMessageDigestSpi 1
#include "java/security/MessageDigestSpi.h"

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaSecurityProvider;

/*!
 @brief Uses a one-way hash function to turn an arbitrary number of bytes into a
 fixed-length byte sequence.
 The original arbitrary-length sequence is the
 <i>message</i>, and the fixed-length byte sequence is the <i>digest</i> or
 <i>message digest</i>.
 <h4>Sample Code</h4>
 <p>The basic pattern to digest an <code>java.io.InputStream</code> looks like this:
 @code

  MessageDigest digester = MessageDigest.getInstance("MD5");
  byte[] bytes = new byte[8192];
  int byteCount;
  while ((byteCount = in.read(bytes)) > 0) {
    digester.update(bytes, 0, byteCount);
  }
  byte[] digest = digester.digest();
  
@endcode
 <p>That is, after creating or resetting a <code>MessageDigest</code> you should
 call <code>update(byte[],int,int)</code> for each block of input data, and then call <code>digest</code>
 to get the final digest. Note that calling <code>digest</code> resets the <code>MessageDigest</code>.
 Advanced users who want partial digests should clone their <code>MessageDigest</code> before
 calling <code>digest</code>.
 <p>This class is not thread-safe.
 - seealso: MessageDigestSpi
 */
@interface JavaSecurityMessageDigest : JavaSecurityMessageDigestSpi

#pragma mark Public

- (id)clone;

/*!
 @brief Computes and returns the final hash value for this <code>MessageDigest</code>.
 After the digest is computed the receiver is reset.
 @return the computed one way hash value
 - seealso: #reset
 */
- (IOSByteArray *)digest;

/*!
 @brief Performs the final update and then computes and returns the final hash
 value for this <code>MessageDigest</code>.
 After the digest is computed the
 receiver is reset.
 @param input
 the <code>byte</code> array
 @return the computed one way hash value
 - seealso: #reset()
 */
- (IOSByteArray *)digestWithByteArray:(IOSByteArray *)input;

/*!
 @brief Computes and stores the final hash value for this <code>MessageDigest</code>.
 After the digest is computed the receiver is reset.
 @param buf
 the buffer to store the result
 @param offset
 the index of the first byte in <code>buf</code> to store
 @param len
 the number of bytes allocated for the digest
 @return the number of bytes written to <code>buf</code>
 @throws DigestException
 if an error occurs
 @throws IllegalArgumentException
 if <code>offset</code> or <code>len</code> are not valid in respect to
 <code>buf</code>
 - seealso: #reset()
 */
- (jint)digestWithByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset
                    withInt:(jint)len;

/*!
 @brief Returns the name of the algorithm of this <code>MessageDigest</code>.
 @return the name of the algorithm of this <code>MessageDigest</code>
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the engine digest length in bytes.
 If the implementation does not
 implement this function or is not an instance of <code>Cloneable</code>,
 <code>0</code> is returned.
 @return the digest length in bytes, or <code>0</code>
 */
- (jint)getDigestLength;

/*!
 @brief Returns a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm.
 @param algorithm
 the name of the algorithm to use
 @return a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm
 @throws NoSuchAlgorithmException
 if the specified algorithm is not available
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code>
 */
+ (JavaSecurityMessageDigest *)getInstanceWithNSString:(NSString *)algorithm;

/*!
 @brief Returns a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm from the specified provider.
 @param algorithm
 the name of the algorithm to use
 @param provider
 the provider
 @return a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm from the specified provider
 @throws NoSuchAlgorithmException
 if the specified algorithm is not available
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code>
 @throws IllegalArgumentException if <code>provider == null</code>
 */
+ (JavaSecurityMessageDigest *)getInstanceWithNSString:(NSString *)algorithm
                              withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm from the specified provider.
 @param algorithm
 the name of the algorithm to use
 @param provider
 the name of the provider
 @return a new instance of <code>MessageDigest</code> that utilizes the
 specified algorithm from the specified provider
 @throws NoSuchAlgorithmException
 if the specified algorithm is not available
 @throws NoSuchProviderException
 if the specified provider is not available
 @throws NullPointerException
 if <code>algorithm</code> is <code>null</code>
 @throws IllegalArgumentException if <code>provider == null || provider.isEmpty()</code>
 */
+ (JavaSecurityMessageDigest *)getInstanceWithNSString:(NSString *)algorithm
                                          withNSString:(NSString *)provider;

/*!
 @brief Returns the provider associated with this <code>MessageDigest</code>.
 @return the provider associated with this <code>MessageDigest</code>
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Indicates whether to digest are equal by performing a simply
 byte-per-byte compare of the two digests.
 @param digesta
 the first digest to be compared
 @param digestb
 the second digest to be compared
 @return <code>true</code> if the two hashes are equal, <code>false</code> otherwise
 */
+ (jboolean)isEqualWithByteArray:(IOSByteArray *)digesta
                   withByteArray:(IOSByteArray *)digestb;

/*!
 @brief Puts this <code>MessageDigest</code> back in an initial state, such that it is
 ready to compute a one way hash value.
 */
- (void)reset;

/*!
 @brief Returns a string containing a concise, human-readable description of this
 <code>MessageDigest</code> including the name of its algorithm.
 @return a printable representation for this <code>MessageDigest</code>
 */
- (NSString *)description;

/*!
 @brief Updates this <code>MessageDigest</code> using the given <code>byte</code>.
 @param arg0
 the <code>byte</code> to update this <code>MessageDigest</code> with
 - seealso: #reset()
 */
- (void)updateWithByte:(jbyte)arg0;

/*!
 @brief Updates this <code>MessageDigest</code> using the given <code>byte[]</code>.
 @param input
 the <code>byte</code> array
 @throws NullPointerException
 if <code>input</code> is <code>null</code>
 */
- (void)updateWithByteArray:(IOSByteArray *)input;

/*!
 @brief Updates this <code>MessageDigest</code> using the given <code>byte[]</code>.
 @param input
 the <code>byte</code> array
 @param offset
 the index of the first byte in <code>input</code> to update from
 @param len
 the number of bytes in <code>input</code> to update from
 @throws IllegalArgumentException
 if <code>offset</code> or <code>len</code> are not valid in respect to
 <code>input</code>
 */
- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)offset
                    withInt:(jint)len;

/*!
 @brief Updates this <code>MessageDigest</code> using the given <code>input</code>.
 @param input
 the <code>ByteBuffer</code>
 */
- (void)updateWithJavaNioByteBuffer:(JavaNioByteBuffer *)input;

#pragma mark Protected

/*!
 @brief Constructs a new instance of <code>MessageDigest</code> with the name of
 the algorithm to use.
 @param algorithm
 the name of algorithm to use
 */
- (instancetype)initWithNSString:(NSString *)algorithm;

@end

J2OBJC_STATIC_INIT(JavaSecurityMessageDigest)

FOUNDATION_EXPORT void JavaSecurityMessageDigest_initWithNSString_(JavaSecurityMessageDigest *self, NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityMessageDigest *JavaSecurityMessageDigest_getInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityMessageDigest *JavaSecurityMessageDigest_getInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT JavaSecurityMessageDigest *JavaSecurityMessageDigest_getInstanceWithNSString_withJavaSecurityProvider_(NSString *algorithm, JavaSecurityProvider *provider);

FOUNDATION_EXPORT jboolean JavaSecurityMessageDigest_isEqualWithByteArray_withByteArray_(IOSByteArray *digesta, IOSByteArray *digestb);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityMessageDigest)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityMessageDigest")
