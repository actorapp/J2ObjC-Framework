//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/InterfaceAddress.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetInterfaceAddress")
#ifdef RESTRICT_JavaNetInterfaceAddress
#define INCLUDE_ALL_JavaNetInterfaceAddress 0
#else
#define INCLUDE_ALL_JavaNetInterfaceAddress 1
#endif
#undef RESTRICT_JavaNetInterfaceAddress

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNetInterfaceAddress_) && (INCLUDE_ALL_JavaNetInterfaceAddress || defined(INCLUDE_JavaNetInterfaceAddress))
#define JavaNetInterfaceAddress_

@class JavaNetInet4Address;
@class JavaNetInet6Address;
@class JavaNetInetAddress;

/*!
 @brief Identifies one of a network interface's addresses.
 These are passed back from the JNI behind NetworkInterface.getNetworkInterfaces.
 Multiple addresses for the same interface are collected together on the Java side.
 @since 1.6
 */
@interface JavaNetInterfaceAddress : NSObject

#pragma mark Public

/*!
 @brief Tests whether this object is equal to another one.
 Returns true if
 the address, broadcast address and prefix length are all equal.
 @param obj the object to be compared.
 @return true if 'obj' is equal to this InterfaceAddress, false otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the InetAddress for this address.
 */
- (JavaNetInetAddress *)getAddress;

/*!
 @brief Returns the subnet-directed broadcast address if this is an IPv4 interface, null otherwise.
 */
- (JavaNetInetAddress *)getBroadcast;

/*!
 @brief Returns the network prefix length in bits.
 (In IPv4 parlance, this is known as the subnet mask,
 but this method applies to IPv6 addresses too.)
 */
- (jshort)getNetworkPrefixLength;

- (NSUInteger)hash;

/*!
 @brief Returns a string containing this interface's address, prefix length, and broadcast address.
 For example: <code>"/172.18.103.112/23 [/172.18.103.255]"</code> or
 <code>"/0:0:0:0:0:0:0:1%1/128 [null]"</code>.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief For IPv4.
 */
- (instancetype)initWithJavaNetInet4Address:(JavaNetInet4Address *)address
                    withJavaNetInet4Address:(JavaNetInet4Address *)broadcastAddress
                    withJavaNetInet4Address:(JavaNetInet4Address *)mask;

/*!
 @brief For IPv6.
 */
- (instancetype)initWithJavaNetInet6Address:(JavaNetInet6Address *)address
                                  withShort:(jshort)prefixLength;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetInterfaceAddress)

FOUNDATION_EXPORT void JavaNetInterfaceAddress_initWithJavaNetInet4Address_withJavaNetInet4Address_withJavaNetInet4Address_(JavaNetInterfaceAddress *self, JavaNetInet4Address *address, JavaNetInet4Address *broadcastAddress, JavaNetInet4Address *mask);

FOUNDATION_EXPORT JavaNetInterfaceAddress *new_JavaNetInterfaceAddress_initWithJavaNetInet4Address_withJavaNetInet4Address_withJavaNetInet4Address_(JavaNetInet4Address *address, JavaNetInet4Address *broadcastAddress, JavaNetInet4Address *mask) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInterfaceAddress *create_JavaNetInterfaceAddress_initWithJavaNetInet4Address_withJavaNetInet4Address_withJavaNetInet4Address_(JavaNetInet4Address *address, JavaNetInet4Address *broadcastAddress, JavaNetInet4Address *mask);

FOUNDATION_EXPORT void JavaNetInterfaceAddress_initWithJavaNetInet6Address_withShort_(JavaNetInterfaceAddress *self, JavaNetInet6Address *address, jshort prefixLength);

FOUNDATION_EXPORT JavaNetInterfaceAddress *new_JavaNetInterfaceAddress_initWithJavaNetInet6Address_withShort_(JavaNetInet6Address *address, jshort prefixLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInterfaceAddress *create_JavaNetInterfaceAddress_initWithJavaNetInet6Address_withShort_(JavaNetInet6Address *address, jshort prefixLength);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetInterfaceAddress)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetInterfaceAddress")
