//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/Proxy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetProxy")
#ifdef RESTRICT_JavaNetProxy
#define INCLUDE_ALL_JavaNetProxy 0
#else
#define INCLUDE_ALL_JavaNetProxy 1
#endif
#undef RESTRICT_JavaNetProxy

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNetProxy_) && (INCLUDE_ALL_JavaNetProxy || defined(INCLUDE_JavaNetProxy))
#define JavaNetProxy_

@class JavaNetProxy_Type;
@class JavaNetSocketAddress;

/*!
 @brief This class represents proxy server settings.
 A created instance of <code>Proxy</code>
  stores a type and an address and is immutable. There are three types
 of proxies:
 <ul>
 <li>DIRECT</li>
 <li>HTTP</li>
 <li>SOCKS</li></ul
 */
@interface JavaNetProxy : NSObject

+ (JavaNetProxy *)NO_PROXY;

#pragma mark Public

/*!
 @brief Creates a new <code>Proxy</code> instance.
 <code>SocketAddress</code> must NOT be
 <code>null</code> when <code>type</code> is either <code>Proxy.Type.HTTP</code> or
 <code>Proxy.Type.SOCKS</code>. To create a <code>Proxy</code> instance representing
 the proxy type <code>Proxy.Type.DIRECT</code>, use <code>Proxy.NO_PROXY</code>
 instead of this constructor.
 @param type
 the proxy type of this instance.
 @param sa
 the proxy address of this instance.
 @throws IllegalArgumentException
 if the parameter <code>type</code> is set to <code>Proxy.Type.DIRECT</code>
  or the value for <code>SocketAddress</code> is
 <code>null</code>.
 */
- (instancetype)initWithJavaNetProxy_Type:(JavaNetProxy_Type *)type
                 withJavaNetSocketAddress:(JavaNetSocketAddress *)sa;

/*!
 @brief Gets the address of this <code>Proxy</code> instance.
 @return the stored proxy address or <code>null</code> if the proxy type is
 <code>DIRECT</code>.
 */
- (JavaNetSocketAddress *)address;

/*!
 @brief Compares the specified <code>obj</code> to this <code>Proxy</code> instance and
 returns whether they are equal or not.
 The given object must be an
 instance of <code>Proxy</code> with the same address and the same type value
 to be equal.
 @param obj
 the object to compare with this instance.
 @return <code>true</code> if the given object represents the same <code>Proxy</code>
  as this instance, <code>false</code> otherwise.
 - seealso: #hashCode
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Gets the hashcode for this <code>Proxy</code> instance.
 @return the hashcode value for this Proxy instance.
 */
- (NSUInteger)hash;

/*!
 @brief Gets a textual representation of this <code>Proxy</code> instance.
 The string
 includes the two parts <code>type.toString()</code> and <code>address.toString()</code>
  if <code>address</code> is not <code>null</code>.
 @return the representing string of this proxy.
 */
- (NSString *)description;

/*!
 @brief Gets the type of this <code>Proxy</code> instance.
 @return the stored proxy type.
 */
- (JavaNetProxy_Type *)type;

@end

J2OBJC_STATIC_INIT(JavaNetProxy)

/*!
 @brief Represents the proxy type setting <code>Proxy.Type.DIRECT</code>.
 It tells
 protocol handlers that there is no proxy to be used. The address is set
 to <code>null</code>.
 */
inline JavaNetProxy *JavaNetProxy_get_NO_PROXY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaNetProxy *JavaNetProxy_NO_PROXY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNetProxy, NO_PROXY, JavaNetProxy *)

FOUNDATION_EXPORT void JavaNetProxy_initWithJavaNetProxy_Type_withJavaNetSocketAddress_(JavaNetProxy *self, JavaNetProxy_Type *type, JavaNetSocketAddress *sa);

FOUNDATION_EXPORT JavaNetProxy *new_JavaNetProxy_initWithJavaNetProxy_Type_withJavaNetSocketAddress_(JavaNetProxy_Type *type, JavaNetSocketAddress *sa) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetProxy *create_JavaNetProxy_initWithJavaNetProxy_Type_withJavaNetSocketAddress_(JavaNetProxy_Type *type, JavaNetSocketAddress *sa);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetProxy)

#endif

#if !defined (JavaNetProxy_Type_) && (INCLUDE_ALL_JavaNetProxy || defined(INCLUDE_JavaNetProxy_Type))
#define JavaNetProxy_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaNetProxy_Type_Enum) {
  JavaNetProxy_Type_Enum_DIRECT = 0,
  JavaNetProxy_Type_Enum_HTTP = 1,
  JavaNetProxy_Type_Enum_SOCKS = 2,
};

/*!
 @brief <code>Enum</code> class for the proxy type.
 Possible options are <code>DIRECT</code>
 , <code>HTTP</code> and <code>SOCKS</code>.
 */
@interface JavaNetProxy_Type : JavaLangEnum < NSCopying >

+ (JavaNetProxy_Type * __nonnull)DIRECT;

+ (JavaNetProxy_Type * __nonnull)HTTP;

+ (JavaNetProxy_Type * __nonnull)SOCKS;

#pragma mark Public

+ (JavaNetProxy_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;
- (JavaNetProxy_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaNetProxy_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaNetProxy_Type *JavaNetProxy_Type_values_[];

/*!
 @brief Direct connection.
 Connect without any proxy.
 */
inline JavaNetProxy_Type *JavaNetProxy_Type_get_DIRECT();
J2OBJC_ENUM_CONSTANT(JavaNetProxy_Type, DIRECT)

/*!
 @brief HTTP type proxy.
 It's often used by protocol handlers such as HTTP,
 HTTPS and FTP.
 */
inline JavaNetProxy_Type *JavaNetProxy_Type_get_HTTP();
J2OBJC_ENUM_CONSTANT(JavaNetProxy_Type, HTTP)

/*!
 @brief SOCKS type proxy.
 */
inline JavaNetProxy_Type *JavaNetProxy_Type_get_SOCKS();
J2OBJC_ENUM_CONSTANT(JavaNetProxy_Type, SOCKS)

FOUNDATION_EXPORT IOSObjectArray *JavaNetProxy_Type_values();

FOUNDATION_EXPORT JavaNetProxy_Type *JavaNetProxy_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaNetProxy_Type *JavaNetProxy_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetProxy_Type)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetProxy")
