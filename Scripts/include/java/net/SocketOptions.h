//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/SocketOptions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetSocketOptions")
#ifdef RESTRICT_JavaNetSocketOptions
#define INCLUDE_ALL_JavaNetSocketOptions 0
#else
#define INCLUDE_ALL_JavaNetSocketOptions 1
#endif
#undef RESTRICT_JavaNetSocketOptions

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNetSocketOptions_) && (INCLUDE_ALL_JavaNetSocketOptions || defined(INCLUDE_JavaNetSocketOptions))
#define JavaNetSocketOptions_

/*!
 @brief Defines an interface for socket implementations to get and set socket
 options.
 It is implemented by the classes <code>SocketImpl</code> and <code>DatagramSocketImpl</code>
 .
 - seealso: SocketImpl
 - seealso: DatagramSocketImpl
 */
@protocol JavaNetSocketOptions < JavaObject >

/*!
 @brief Gets the value for the specified socket option.
 @return the option value.
 @param optID
 the option identifier.
 @throws SocketException
 if an error occurs reading the option value.
 */
- (id)getOptionWithInt:(jint)optID;

/*!
 @brief Sets the value of the specified socket option.
 @param optID
 the option identifier.
 @param val
 the value to be set for the option.
 @throws SocketException
 if an error occurs setting the option value.
 */
- (void)setOptionWithInt:(jint)optID
                  withId:(id)val;

@end

@interface JavaNetSocketOptions : NSObject

+ (jint)SO_LINGER_;

+ (jint)SO_TIMEOUT;

+ (jint)TCP_NODELAY_;

+ (jint)IP_MULTICAST_IF;

+ (jint)SO_BINDADDR;

+ (jint)SO_REUSEADDR_;

+ (jint)SO_SNDBUF_;

+ (jint)SO_RCVBUF_;

+ (jint)SO_KEEPALIVE_;

+ (jint)IP_TOS;

+ (jint)IP_MULTICAST_LOOP_;

+ (jint)SO_BROADCAST_;

+ (jint)SO_OOBINLINE;

+ (jint)IP_MULTICAST_IF2;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetSocketOptions)

/*!
 @brief Number of seconds to wait when closing a socket if there is still some buffered data to be
 sent.
 <p>The option can be set to disabled using <code>setOption(int,Object)</code> with a value of
 <code>Boolean.FALSE</code>.
 <p>If this option is set to 0, the TCP socket is closed forcefully and the call to
 <code>close</code> returns immediately.
 If this option is disabled, closing a socket will return immediately and the close will be
 handled in the background.
 <p>If this option is set to a value greater than 0, the value is interpreted as the number of
 seconds to wait. If all data could be sent during this time, the socket is closed normally.
 Otherwise the connection will be closed forcefully.
 <p>Valid numeric values for this option are in the range 0 to 65535 inclusive. (Larger
 timeouts will be treated as 65535s timeouts; roughly 18 hours.)
 <p>This option is intended for use with sockets in blocking mode. The behavior of this option
 for non-blocking sockets is undefined.
 */
inline jint JavaNetSocketOptions_get_SO_LINGER();
#define JavaNetSocketOptions_SO_LINGER 128
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_LINGER, jint)

/*!
 @brief Integer timeout in milliseconds for blocking accept or read/receive operations (but not
 write/send operations).
 A timeout of 0 means no timeout. Negative
 timeouts are not allowed.
 <p>An <code>InterruptedIOException</code> is thrown if this timeout expires.
 */
inline jint JavaNetSocketOptions_get_SO_TIMEOUT();
#define JavaNetSocketOptions_SO_TIMEOUT 4102
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_TIMEOUT, jint)

/*!
 @brief This boolean option specifies whether data is sent immediately on this socket or buffered.
 <p>
 If set to <code>Boolean.TRUE</code> the Nagle algorithm is disabled and there is no buffering.
 This could lead to low packet efficiency. When set to <code>Boolean.FALSE</code> the the socket
 implementation uses buffering to try to reach a higher packet efficiency.
 <p>See <a href="http://www.ietf.org/rfc/rfc1122.txt">RFC 1122: Requirements for Internet
 Hosts -- Communication Layers</a> for more information about buffering and the Nagle
 algorithm.
 */
inline jint JavaNetSocketOptions_get_TCP_NODELAY();
#define JavaNetSocketOptions_TCP_NODELAY 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, TCP_NODELAY, jint)

/*!
 @brief This is an IPv4-only socket option whose functionality is subsumed by
 <code>IP_MULTICAST_IF2</code> and not implemented on Android.
 */
inline jint JavaNetSocketOptions_get_IP_MULTICAST_IF();
#define JavaNetSocketOptions_IP_MULTICAST_IF 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, IP_MULTICAST_IF, jint)

/*!
 @brief This option does not correspond to any Unix socket option and is not implemented on Android.
 */
inline jint JavaNetSocketOptions_get_SO_BINDADDR();
#define JavaNetSocketOptions_SO_BINDADDR 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_BINDADDR, jint)

/*!
 @brief This boolean option specifies whether a reuse of a local address is allowed when another
 socket has not yet been removed by the operating system.
 <p>For connection-oriented sockets, if this option is disabled and if there is another socket
 in state TIME_WAIT on a given address then another socket binding to that address would fail.
 Setting this value after a socket is bound has no effect.
 <p>For datagram sockets this option determines whether several sockets can listen on the
 same address; when enabled each socket will receive a copy of the datagram.
 <p>See <a href="https://www.ietf.org/rfc/rfc793.txt">RFC 793: Transmission Control Protocol
 </a> for more information about socket re-use.
 */
inline jint JavaNetSocketOptions_get_SO_REUSEADDR();
#define JavaNetSocketOptions_SO_REUSEADDR 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_REUSEADDR, jint)

/*!
 @brief The size in bytes of a socket's send buffer.
 This must be an integer greater than 0.
 This is a hint to the kernel; the kernel may use a larger buffer.
 <p>For datagram sockets, it is implementation-defined whether packets larger than
 this size can be sent.
 */
inline jint JavaNetSocketOptions_get_SO_SNDBUF();
#define JavaNetSocketOptions_SO_SNDBUF 4097
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_SNDBUF, jint)

/*!
 @brief The size in bytes of a socket's receive buffer.
 This must be an integer greater than 0.
 This is a hint to the kernel; the kernel may use a larger buffer.
 <p>For datagram sockets, packets larger than this value will be discarded.
 <p>See <a href="http://www.ietf.org/rfc/rfc1323.txt">RFC1323: TCP Extensions for High
 Performance</a> for more information about TCP/IP buffering.
 */
inline jint JavaNetSocketOptions_get_SO_RCVBUF();
#define JavaNetSocketOptions_SO_RCVBUF 4098
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_RCVBUF, jint)

/*!
 @brief This boolean option specifies whether the kernel sends keepalive messages on
 connection-oriented sockets.
 <p>See <a href="http://www.ietf.org/rfc/rfc1122.txt">RFC 1122: Requirements for Internet
 Hosts -- Communication Layers</a> for more information on keep-alive.
 */
inline jint JavaNetSocketOptions_get_SO_KEEPALIVE();
#define JavaNetSocketOptions_SO_KEEPALIVE 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_KEEPALIVE, jint)

/*!
 @brief This integer option specifies the value for the type-of-service field of the IPv4 header,
 or the traffic class field of the IPv6 header.
 These correspond to the IP_TOS and IPV6_TCLASS
 socket options. These may be ignored by the underlying OS. Values must be between 0 and 255
 inclusive.
 <p>See <a href="http://www.ietf.org/rfc/rfc1349.txt">RFC 1349</a> for more about IPv4
 and <a href="http://www.ietf.org/rfc/rfc2460.txt">RFC 2460</a> for more about IPv6.
 */
inline jint JavaNetSocketOptions_get_IP_TOS();
#define JavaNetSocketOptions_IP_TOS 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, IP_TOS, jint)

/*!
 @brief This boolean option specifies whether the local loopback of multicast packets is
 enabled or disabled.
 This loopback is enabled by default on multicast sockets.
 <p>See <a href="http://tools.ietf.org/rfc/rfc1112.txt">RFC 1112: Host Extensions for IP
 Multicasting</a> for more information about IP multicast.
 <p>See <code>MulticastSocket.setLoopbackMode</code>.
 */
inline jint JavaNetSocketOptions_get_IP_MULTICAST_LOOP();
#define JavaNetSocketOptions_IP_MULTICAST_LOOP 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, IP_MULTICAST_LOOP, jint)

/*!
 @brief This boolean option can be used to enable or disable broadcasting on datagram sockets.
 This
 option must be enabled to send broadcast messages. The default value is false.
 */
inline jint JavaNetSocketOptions_get_SO_BROADCAST();
#define JavaNetSocketOptions_SO_BROADCAST 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_BROADCAST, jint)

/*!
 @brief This boolean option specifies whether sending TCP urgent data is supported on
 this socket or not.
 */
inline jint JavaNetSocketOptions_get_SO_OOBINLINE();
#define JavaNetSocketOptions_SO_OOBINLINE 4099
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, SO_OOBINLINE, jint)

/*!
 @brief This integer option sets the outgoing interface for multicast packets
 using an interface index.
 <p>See <a href="http://tools.ietf.org/rfc/rfc1112.txt">RFC 1112: Host Extensions for IP
 Multicasting</a> for more information about IP multicast.
 */
inline jint JavaNetSocketOptions_get_IP_MULTICAST_IF2();
#define JavaNetSocketOptions_IP_MULTICAST_IF2 31
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetSocketOptions, IP_MULTICAST_IF2, jint)

J2OBJC_TYPE_LITERAL_HEADER(JavaNetSocketOptions)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetSocketOptions")
