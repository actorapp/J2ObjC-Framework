//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/StringTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilStringTokenizer")
#ifdef RESTRICT_JavaUtilStringTokenizer
#define INCLUDE_ALL_JavaUtilStringTokenizer 0
#else
#define INCLUDE_ALL_JavaUtilStringTokenizer 1
#endif
#undef RESTRICT_JavaUtilStringTokenizer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilStringTokenizer_) && (INCLUDE_ALL_JavaUtilStringTokenizer || defined(INCLUDE_JavaUtilStringTokenizer))
#define JavaUtilStringTokenizer_

#define RESTRICT_JavaUtilEnumeration 1
#define INCLUDE_JavaUtilEnumeration 1
#include "java/util/Enumeration.h"

/*!
 @brief Breaks a string into tokens; new code should probably use <code>String.split</code>.
 <blockquote>
 @code

  // Legacy code:
  StringTokenizer st = new StringTokenizer("a:b:c", ":");
  while (st.hasMoreTokens()) {
     System.err.println(st.nextToken());
  }
  // New code:
  for (String token : "a:b:c".split(":")) {
     System.err.println(token);
  }
  
@endcode
 </blockquote>
 @since 1.0
 */
@interface JavaUtilStringTokenizer : NSObject < JavaUtilEnumeration >

#pragma mark Public

/*!
 @brief Constructs a new <code>StringTokenizer</code> for the parameter string using
 whitespace as the delimiter.
 The <code>returnDelimiters</code> flag is set to
 <code>false</code>.
 @param string
 the string to be tokenized.
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Constructs a new <code>StringTokenizer</code> for the parameter string using
 the specified delimiters.
 The <code>returnDelimiters</code> flag is set to
 <code>false</code>. If <code>delimiters</code> is <code>null</code>, this constructor
 doesn't throw an <code>Exception</code>, but later calls to some methods might
 throw a <code>NullPointerException</code>.
 @param string
 the string to be tokenized.
 @param delimiters
 the delimiters to use.
 */
- (instancetype)initWithNSString:(NSString *)string
                    withNSString:(NSString *)delimiters;

/*!
 @brief Constructs a new <code>StringTokenizer</code> for the parameter string using
 the specified delimiters, returning the delimiters as tokens if the
 parameter <code>returnDelimiters</code> is <code>true</code>.
 If <code>delimiters</code>
 is null this constructor doesn't throw an <code>Exception</code>, but later
 calls to some methods might throw a <code>NullPointerException</code>.
 @param string
 the string to be tokenized.
 @param delimiters
 the delimiters to use.
 @param returnDelimiters
 <code>true</code> to return each delimiter as a token.
 */
- (instancetype)initWithNSString:(NSString *)string
                    withNSString:(NSString *)delimiters
                     withBoolean:(jboolean)returnDelimiters;

/*!
 @brief Returns the number of unprocessed tokens remaining in the string.
 @return number of tokens that can be retreived before an <code>Exception</code>
  will result from a call to <code>nextToken()</code>.
 */
- (jint)countTokens;

/*!
 @brief Returns <code>true</code> if unprocessed tokens remain.
 This method is
 implemented in order to satisfy the <code>Enumeration</code> interface.
 @return <code>true</code> if unprocessed tokens remain.
 */
- (jboolean)hasMoreElements;

/*!
 @brief Returns <code>true</code> if unprocessed tokens remain.
 @return <code>true</code> if unprocessed tokens remain.
 */
- (jboolean)hasMoreTokens;

/*!
 @brief Returns the next token in the string as an <code>Object</code>.
 This method is
 implemented in order to satisfy the <code>Enumeration</code> interface.
 @return next token in the string as an <code>Object</code>
 @throws NoSuchElementException
 if no tokens remain.
 */
- (id)nextElement;

/*!
 @brief Returns the next token in the string as a <code>String</code>.
 @return next token in the string as a <code>String</code>.
 @throws NoSuchElementException
 if no tokens remain.
 */
- (NSString *)nextToken;

/*!
 @brief Returns the next token in the string as a <code>String</code>.
 The delimiters
 used are changed to the specified delimiters.
 @param delims
 the new delimiters to use.
 @return next token in the string as a <code>String</code>.
 @throws NoSuchElementException
 if no tokens remain.
 */
- (NSString *)nextTokenWithNSString:(NSString *)delims;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilStringTokenizer)

FOUNDATION_EXPORT void JavaUtilStringTokenizer_initWithNSString_(JavaUtilStringTokenizer *self, NSString *string);

FOUNDATION_EXPORT JavaUtilStringTokenizer *new_JavaUtilStringTokenizer_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilStringTokenizer *create_JavaUtilStringTokenizer_initWithNSString_(NSString *string);

FOUNDATION_EXPORT void JavaUtilStringTokenizer_initWithNSString_withNSString_(JavaUtilStringTokenizer *self, NSString *string, NSString *delimiters);

FOUNDATION_EXPORT JavaUtilStringTokenizer *new_JavaUtilStringTokenizer_initWithNSString_withNSString_(NSString *string, NSString *delimiters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilStringTokenizer *create_JavaUtilStringTokenizer_initWithNSString_withNSString_(NSString *string, NSString *delimiters);

FOUNDATION_EXPORT void JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(JavaUtilStringTokenizer *self, NSString *string, NSString *delimiters, jboolean returnDelimiters);

FOUNDATION_EXPORT JavaUtilStringTokenizer *new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(NSString *string, NSString *delimiters, jboolean returnDelimiters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilStringTokenizer *create_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(NSString *string, NSString *delimiters, jboolean returnDelimiters);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilStringTokenizer)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilStringTokenizer")
