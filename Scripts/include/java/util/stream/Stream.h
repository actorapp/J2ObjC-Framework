//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/stream/Stream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilStreamStream")
#ifdef RESTRICT_JavaUtilStreamStream
#define INCLUDE_ALL_JavaUtilStreamStream 0
#else
#define INCLUDE_ALL_JavaUtilStreamStream 1
#endif
#undef RESTRICT_JavaUtilStreamStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilStreamStream_) && (INCLUDE_ALL_JavaUtilStreamStream || defined(INCLUDE_JavaUtilStreamStream))
#define JavaUtilStreamStream_

#define RESTRICT_JavaUtilStreamBaseStream 1
#define INCLUDE_JavaUtilStreamBaseStream 1
#include "java/util/stream/BaseStream.h"

@class IOSObjectArray;
@class JavaUtilOptional;
@protocol JavaLangRunnable;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionIntFunction;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilFunctionSupplier;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilFunctionUnaryOperator;
@protocol JavaUtilStreamCollector;
@protocol JavaUtilStreamDoubleStream;
@protocol JavaUtilStreamIntStream;
@protocol JavaUtilStreamLongStream;
@protocol JavaUtilStreamStream_Builder;

/*!
 @brief A sequence of elements supporting sequential and parallel aggregate
 operations.
 The following example illustrates an aggregate operation using
 <code>Stream</code> and <code>IntStream</code>:
 @code
    int sum = widgets.stream()
                      .filter(w -> w.getColor() == RED)
                      .mapToInt(w -> w.getWeight())
                      .sum();
 
@endcode
 In this example, <code>widgets</code> is a <code>Collection<Widget></code>.  We create
 a stream of <code>Widget</code> objects via <code>Collection.stream()</code>,
 filter it to produce a stream containing only the red widgets, and then
 transform it into a stream of <code>int</code> values representing the weight of
 each red widget. Then this stream is summed to produce a total weight.
 <p>In addition to <code>Stream</code>, which is a stream of object references,
 there are primitive specializations for <code>IntStream</code>, <code>LongStream</code>,
 and <code>DoubleStream</code>, all of which are referred to as "streams" and
 conform to the characteristics and restrictions described here.
 <p>To perform a computation, stream
 <a href="package-summary.html#StreamOps">operations</a> are composed into a
 <em>stream pipeline</em>.  A stream pipeline consists of a source (which
 might be an array, a collection, a generator function, an I/O channel,
 etc), zero or more <em>intermediate operations</em> (which transform a
 stream into another stream, such as <code>Stream.filter(Predicate)</code>), and a
 <em>terminal operation</em> (which produces a result or side-effect, such
 as <code>Stream.count()</code> or <code>Stream.forEach(Consumer)</code>).
 Streams are lazy; computation on the source data is only performed when the
 terminal operation is initiated, and source elements are consumed only
 as needed.
 <p>Collections and streams, while bearing some superficial similarities,
 have different goals.  Collections are primarily concerned with the efficient
 management of, and access to, their elements.  By contrast, streams do not
 provide a means to directly access or manipulate their elements, and are
 instead concerned with declaratively describing their source and the
 computational operations which will be performed in aggregate on that source.
 However, if the provided stream operations do not offer the desired
 functionality, the <code>iterator()</code> and <code>spliterator()</code> operations
 can be used to perform a controlled traversal.
 <p>A stream pipeline, like the "widgets" example above, can be viewed as
 a <em>query</em> on the stream source.  Unless the source was explicitly
 designed for concurrent modification (such as a <code>ConcurrentHashMap</code>),
 unpredictable or erroneous behavior may result from modifying the stream
 source while it is being queried.
 <p>Most stream operations accept parameters that describe user-specified
 behavior, such as the lambda expression <code>w -> w.getWeight()</code> passed to
 <code>mapToInt</code> in the example above.  To preserve correct behavior,
 these <em>behavioral parameters</em>:
 <ul>
 <li>must be <a href="package-summary.html#NonInterference">non-interfering</a>
 (they do not modify the stream source); and</li>
 <li>in most cases must be <a href="package-summary.html#Statelessness">stateless</a>
 (their result should not depend on any state that might change during execution
 of the stream pipeline).</li>
 </ul>
 <p>Such parameters are always instances of a
 <a href="../function/package-summary.html">functional interface</a> such
 as <code>java.util.function.Function</code>, and are often lambda expressions or
 method references.  Unless otherwise specified these parameters must be
 <em>non-null</em>.
 <p>A stream should be operated on (invoking an intermediate or terminal stream
 operation) only once.  This rules out, for example, "forked" streams, where
 the same source feeds two or more pipelines, or multiple traversals of the
 same stream.  A stream implementation may throw <code>IllegalStateException</code>
 if it detects that the stream is being reused. However, since some stream
 operations may return their receiver rather than a new stream object, it may
 not be possible to detect reuse in all cases.
 <p>Streams have a <code>close()</code> method and implement <code>AutoCloseable</code>,
 but nearly all stream instances do not actually need to be closed after use.
 Generally, only streams whose source is an IO channel will require closing.  Most streams
 are backed by collections, arrays, or generating functions, which require no
 special resource management.  (If a stream does require closing, it can be
 declared as a resource in a <code>try</code>-with-resources statement.)
 <p>Stream pipelines may execute either sequentially or in
 <a href="package-summary.html#Parallelism">parallel</a>.  This
 execution mode is a property of the stream.  Streams are created
 with an initial choice of sequential or parallel execution.  (For example,
 <code>Collection.stream()</code> creates a sequential stream,
 and <code>Collection.parallelStream()</code> creates
 a parallel one.)  This choice of execution mode may be modified by the
 <code>sequential()</code> or <code>parallel()</code> methods, and may be queried with
 the <code>isParallel()</code> method.
 @since 1.8
 - seealso: IntStream
 - seealso: LongStream
 - seealso: DoubleStream
 - seealso: <a href="package-summary.html">java.util.stream</a>
 */
@protocol JavaUtilStreamStream < JavaUtilStreamBaseStream, JavaObject >

/*!
 @brief Returns a stream consisting of the elements of this stream that match
 the given predicate.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param predicate a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 predicate to apply to each element to determine if it
 should be included
 @return the new stream
 */
- (id<JavaUtilStreamStream>)filterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)predicate;

/*!
 @brief Returns a stream consisting of the results of applying the given
 function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamStream>)mapWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mapper;

/*!
 @brief Returns an <code>IntStream</code> consisting of the results of applying the
 given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">
 intermediate operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamIntStream>)mapToIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)mapper;

/*!
 @brief Returns a <code>LongStream</code> consisting of the results of applying the
 given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamLongStream>)mapToLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)mapper;

/*!
 @brief Returns a <code>DoubleStream</code> consisting of the results of applying the
 given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamDoubleStream>)mapToDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)mapper;

/*!
 @brief Returns a stream consisting of the results of replacing each element of
 this stream with the contents of a mapped stream produced by applying
 the provided mapping function to each element.
 Each mapped stream is
 <code>closed</code> after its contents
 have been placed into this stream.  (If a mapped stream is <code>null</code>
 an empty stream is used, instead.)
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 The <code>flatMap()</code> operation has the effect of applying a one-to-many
 transformation to the elements of the stream, and then flattening the
 resulting elements into a new stream.
 <p><b>Examples.</b>
 <p>If <code>orders</code> is a stream of purchase orders, and each purchase
 order contains a collection of line items, then the following produces a
 stream containing all the line items in all the orders:
 @code
    orders.flatMap(order -> order.getLineItems().stream())...
 
@endcode
 <p>If <code>path</code> is the path to a file, then the following produces a
 stream of the <code>words</code> contained in that file:
 @code
    Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);
     Stream<String> words = lines.flatMap(line -> Stream.of(line.split(" +")));
 
@endcode
 The <code>mapper</code> function passed to <code>flatMap</code> splits a line,
 using a simple regular expression, into an array of words, and then
 creates a stream of words from that array.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element which produces a stream
 of new values
 @return the new stream
 */
- (id<JavaUtilStreamStream>)flatMapWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mapper;

/*!
 @brief Returns an <code>IntStream</code> consisting of the results of replacing each
 element of this stream with the contents of a mapped stream produced by
 applying the provided mapping function to each element.
 Each mapped
 stream is <code>closed</code> after its
 contents have been placed into this stream.  (If a mapped stream is
 <code>null</code> an empty stream is used, instead.)
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element which produces a stream
 of new values
 @return the new stream
 - seealso: #flatMap(Function)
 */
- (id<JavaUtilStreamIntStream>)flatMapToIntWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mapper;

/*!
 @brief Returns an <code>LongStream</code> consisting of the results of replacing each
 element of this stream with the contents of a mapped stream produced by
 applying the provided mapping function to each element.
 Each mapped
 stream is <code>closed</code> after its
 contents have been placed into this stream.  (If a mapped stream is
 <code>null</code> an empty stream is used, instead.)
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element which produces a stream
 of new values
 @return the new stream
 - seealso: #flatMap(Function)
 */
- (id<JavaUtilStreamLongStream>)flatMapToLongWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mapper;

/*!
 @brief Returns an <code>DoubleStream</code> consisting of the results of replacing
 each element of this stream with the contents of a mapped stream produced
 by applying the provided mapping function to each element.
 Each mapped
 stream is <code>closed</code> after its
 contents have placed been into this stream.  (If a mapped stream is
 <code>null</code> an empty stream is used, instead.)
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 @param mapper a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function to apply to each element which produces a stream
 of new values
 @return the new stream
 - seealso: #flatMap(Function)
 */
- (id<JavaUtilStreamDoubleStream>)flatMapToDoubleWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mapper;

/*!
 @brief Returns a stream consisting of the distinct elements (according to
 <code>Object.equals(Object)</code>) of this stream.
 <p>For ordered streams, the selection of distinct elements is stable
 (for duplicated elements, the element appearing first in the encounter
 order is preserved.)  For unordered streams, no stability guarantees
 are made.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
 intermediate operation</a>.
 Preserving stability for <code>distinct()</code> in parallel pipelines is
 relatively expensive (requires that the operation act as a full barrier,
 with substantial buffering overhead), and stability is often not needed.
 Using an unordered stream source (such as <code>generate(Supplier)</code>)
 or removing the ordering constraint with <code>unordered()</code> may result
 in significantly more efficient execution for <code>distinct()</code> in parallel
 pipelines, if the semantics of your situation permit.  If consistency
 with encounter order is required, and you are experiencing poor performance
 or memory utilization with <code>distinct()</code> in parallel pipelines,
 switching to sequential execution with <code>sequential()</code> may improve
 performance.
 @return the new stream
 */
- (id<JavaUtilStreamStream>)distinct;

/*!
 @brief Returns a stream consisting of the elements of this stream, sorted
 according to natural order.
 If the elements of this stream are not
 <code>Comparable</code>, a <code>java.lang.ClassCastException</code> may be thrown
 when the terminal operation is executed.
 <p>For ordered streams, the sort is stable.  For unordered streams, no
 stability guarantees are made.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
 intermediate operation</a>.
 @return the new stream
 */
- (id<JavaUtilStreamStream>)sorted;

/*!
 @brief Returns a stream consisting of the elements of this stream, sorted
 according to the provided <code>Comparator</code>.
 <p>For ordered streams, the sort is stable.  For unordered streams, no
 stability guarantees are made.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
 intermediate operation</a>.
 @param comparator a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 <code>Comparator</code> to be used to compare stream elements
 @return the new stream
 */
- (id<JavaUtilStreamStream>)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Returns a stream consisting of the elements of this stream, additionally
 performing the provided action on each element as elements are consumed
 from the resulting stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
 operation</a>.
 <p>For parallel stream pipelines, the action may be called at
 whatever time and in whatever thread the element is made available by the
 upstream operation.  If the action modifies shared state,
 it is responsible for providing the required synchronization.
  This method exists mainly to support debugging, where you want
 to see the elements as they flow past a certain point in a pipeline:
 @code
    Stream.of("one", "two", "three", "four")
         .filter(e -> e.length() > 3)
         .peek(e -> System.out.println("Filtered value: " + e))
         .map(String::toUpperCase)
         .peek(e -> System.out.println("Mapped value: " + e))
         .collect(Collectors.toList());
 
@endcode
 @param action a <a href="package-summary.html#NonInterference">
 non-interfering</a> action to perform on the elements as
 they are consumed from the stream
 @return the new stream
 */
- (id<JavaUtilStreamStream>)peekWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns a stream consisting of the elements of this stream, truncated
 to be no longer than <code>maxSize</code> in length.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 stateful intermediate operation</a>.
 While <code>limit()</code> is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel pipelines,
 especially for large values of <code>maxSize</code>, since <code>limit(n)</code>
 is constrained to return not just any <em>n</em> elements, but the
 <em>first n</em> elements in the encounter order.  Using an unordered
 stream source (such as <code>generate(Supplier)</code>) or removing the
 ordering constraint with <code>unordered()</code> may result in significant
 speedups of <code>limit()</code> in parallel pipelines, if the semantics of
 your situation permit.  If consistency with encounter order is required,
 and you are experiencing poor performance or memory utilization with
 <code>limit()</code> in parallel pipelines, switching to sequential execution
 with <code>sequential()</code> may improve performance.
 @param maxSize the number of elements the stream should be limited to
 @return the new stream
 @throws IllegalArgumentException if <code>maxSize</code> is negative
 */
- (id<JavaUtilStreamStream>)limitWithLong:(jlong)maxSize;

/*!
 @brief Returns a stream consisting of the remaining elements of this stream
 after discarding the first <code>n</code> elements of the stream.
 If this stream contains fewer than <code>n</code> elements then an
 empty stream will be returned.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
 intermediate operation</a>.
 While <code>skip()</code> is generally a cheap operation on sequential
 stream pipelines, it can be quite expensive on ordered parallel pipelines,
 especially for large values of <code>n</code>, since <code>skip(n)</code>
 is constrained to skip not just any <em>n</em> elements, but the
 <em>first n</em> elements in the encounter order.  Using an unordered
 stream source (such as <code>generate(Supplier)</code>) or removing the
 ordering constraint with <code>unordered()</code> may result in significant
 speedups of <code>skip()</code> in parallel pipelines, if the semantics of
 your situation permit.  If consistency with encounter order is required,
 and you are experiencing poor performance or memory utilization with
 <code>skip()</code> in parallel pipelines, switching to sequential execution
 with <code>sequential()</code> may improve performance.
 @param n the number of leading elements to skip
 @return the new stream
 @throws IllegalArgumentException if <code>n</code> is negative
 */
- (id<JavaUtilStreamStream>)skipWithLong:(jlong)n;

/*!
 @brief Performs an action for each element of this stream.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 <p>The behavior of this operation is explicitly nondeterministic.
 For parallel stream pipelines, this operation does <em>not</em>
 guarantee to respect the encounter order of the stream, as doing so
 would sacrifice the benefit of parallelism.  For any given element, the
 action may be performed at whatever time and in whatever thread the
 library chooses.  If the action accesses shared state, it is
 responsible for providing the required synchronization.
 @param action a <a href="package-summary.html#NonInterference">
 non-interfering</a> action to perform on the elements
 */
- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Performs an action for each element of this stream, in the encounter
 order of the stream if the stream has a defined encounter order.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 <p>This operation processes the elements one at a time, in encounter
 order if one exists.  Performing the action for one element
 <a href="../concurrent/package-summary.html#MemoryVisibility"><i>happens-before</i></a>
 performing the action for subsequent elements, but for any given element,
 the action may be performed in whatever thread the library chooses.
 @param action a <a href="package-summary.html#NonInterference">
 non-interfering</a> action to perform on the elements
 - seealso: #forEach(Consumer)
 */
- (void)forEachOrderedWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns an array containing the elements of this stream.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 @return an array containing the elements of this stream
 */
- (IOSObjectArray *)toArray;

/*!
 @brief Returns an array containing the elements of this stream, using the
 provided <code>generator</code> function to allocate the returned array, as
 well as any additional arrays that might be required for a partitioned
 execution or for resizing.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 The generator function takes an integer, which is the size of the
 desired array, and produces an array of the desired size.  This can be
 concisely expressed with an array constructor reference:
 @code
    Person[] men = people.stream()
                          .filter(p -> p.getGender() == MALE)
                          .toArray(Person[]::new);
 
@endcode
 @param generator a function which produces a new array of the desired
 type and the provided length
 @return an array containing the elements in this stream
 @throws ArrayStoreException if the runtime type of the array returned
 from the array generator is not a supertype of the runtime type of every
 element in this stream
 */
- (IOSObjectArray *)toArrayWithJavaUtilFunctionIntFunction:(id<JavaUtilFunctionIntFunction>)generator;

/*!
 @brief Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 elements of this stream, using the provided identity value and an
 <a href="package-summary.html#Associativity">associative</a>
 accumulation function, and returns the reduced value.
 This is equivalent
 to:
 @code
    T result = identity;
     for (T element : this stream)
         result = accumulator.apply(result, element)
     return result;
 
@endcode
 but is not constrained to execute sequentially.
 <p>The <code>identity</code> value must be an identity for the accumulator
 function. This means that for all <code>t</code>,
 <code>accumulator.apply(identity, t)</code> is equal to <code>t</code>.
 The <code>accumulator</code> function must be an
 <a href="package-summary.html#Associativity">associative</a> function.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
  Sum, min, max, average, and string concatenation are all special
 cases of reduction. Summing a stream of numbers can be expressed as:
 @code
    Integer sum = integers.reduce(0, (a, b) -> a+b);
 
@endcode
 or:
 @code
    Integer sum = integers.reduce(0, Integer::sum);
 
@endcode
 <p>While this may seem a more roundabout way to perform an aggregation
 compared to simply mutating a running total in a loop, reduction
 operations parallelize more gracefully, without needing additional
 synchronization and with greatly reduced risk of data races.
 @param identity the identity value for the accumulating function
 @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for combining two values
 @return the result of the reduction
 */
- (id)reduceWithId:(id)identity
withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)accumulator;

/*!
 @brief Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 elements of this stream, using an
 <a href="package-summary.html#Associativity">associative</a> accumulation
 function, and returns an <code>Optional</code> describing the reduced value,
 if any.
 This is equivalent to:
 @code
    boolean foundAny = false;
     T result = null;
     for (T element : this stream) 
         if (!foundAny) {
             foundAny = true;
             result = element;
         }
         else
             result = accumulator.apply(result, element);
     }
     return foundAny ? Optional.of(result) : Optional.empty();
  
@endcode
 but is not constrained to execute sequentially.
 <p>The <code>accumulator</code> function must be an
 <a href="package-summary.html#Associativity">associative</a> function.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for combining two values
 @return an <code>Optional</code> describing the result of the reduction
 @throws NullPointerException if the result of the reduction is null
 - seealso: #reduce(Object,BinaryOperator)
 - seealso: #min(Comparator)
 - seealso: #max(Comparator)
 */
- (JavaUtilOptional *)reduceWithJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)accumulator;

/*!
 @brief Performs a <a href="package-summary.html#Reduction">reduction</a> on the
 elements of this stream, using the provided identity, accumulation and
 combining functions.
 This is equivalent to:
 @code
    U result = identity;
     for (T element : this stream)
         result = accumulator.apply(result, element)
     return result;
 
@endcode
 but is not constrained to execute sequentially.
 <p>The <code>identity</code> value must be an identity for the combiner
 function.  This means that for all <code>u</code>, <code>combiner(identity, u)</code>
 is equal to <code>u</code>.  Additionally, the <code>combiner</code> function
 must be compatible with the <code>accumulator</code> function; for all
 <code>u</code> and <code>t</code>, the following must hold:
 @code
    combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)
 
@endcode
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
  Many reductions using this form can be represented more simply
 by an explicit combination of <code>map</code> and <code>reduce</code> operations.
 The <code>accumulator</code> function acts as a fused mapper and accumulator,
 which can sometimes be more efficient than separate mapping and reduction,
 such as when knowing the previously reduced value allows you to avoid
 some computation.
 @param identity the identity value for the combiner function
 @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for incorporating an additional element into a result
 @param combiner an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for combining two values, which must be
 compatible with the accumulator function
 @return the result of the reduction
 - seealso: #reduce(BinaryOperator)
 - seealso: #reduce(Object,BinaryOperator)
 */
- (id)reduceWithId:(id)identity
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)accumulator
withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)combiner;

/*!
 @brief Performs a <a href="package-summary.html#MutableReduction">mutable
 reduction</a> operation on the elements of this stream.
 A mutable
 reduction is one in which the reduced value is a mutable result container,
 such as an <code>ArrayList</code>, and elements are incorporated by updating
 the state of the result rather than by replacing the result.  This
 produces a result equivalent to:
 @code
    R result = supplier.get();
     for (T element : this stream)
         accumulator.accept(result, element);
     return result;
 
@endcode
 <p>Like <code>reduce(Object,BinaryOperator)</code>, <code>collect</code> operations
 can be parallelized without requiring additional synchronization.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
  There are many existing classes in the JDK whose signatures are
 well-suited for use with method references as arguments to <code>collect()</code>.
 For example, the following will accumulate strings into an <code>ArrayList</code>:
 @code
    List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,
                                                ArrayList::addAll);
 
@endcode
 <p>The following will take a stream of strings and concatenates them into a
 single string:
 @code
    String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,
                                          StringBuilder::append)
                                 .toString();
 
@endcode
 @param supplier a function that creates a new result container. For a
 parallel execution, this function may be called
 multiple times and must return a fresh value each time.
 @param accumulator an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for incorporating an additional element into a result
 @param combiner an <a href="package-summary.html#Associativity">associative</a>,
 <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 function for combining two values, which must be
 compatible with the accumulator function
 @return the result of the reduction
 */
- (id)collectWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)supplier
           withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)accumulator
           withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)combiner;

/*!
 @brief Performs a <a href="package-summary.html#MutableReduction">mutable
 reduction</a> operation on the elements of this stream using a
 <code>Collector</code>.
 A <code>Collector</code>
 encapsulates the functions used as arguments to
 <code>collect(Supplier,BiConsumer,BiConsumer)</code>, allowing for reuse of
 collection strategies and composition of collect operations such as
 multiple-level grouping or partitioning.
 <p>If the stream is parallel, and the <code>Collector</code>
 is <code>concurrent</code>, and
 either the stream is unordered or the collector is
 <code>unordered</code>,
 then a concurrent reduction will be performed (see <code>Collector</code> for
 details on concurrent reduction.)
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 <p>When executed in parallel, multiple intermediate results may be
 instantiated, populated, and merged so as to maintain isolation of
 mutable data structures.  Therefore, even when executed in parallel
 with non-thread-safe data structures (such as <code>ArrayList</code>), no
 additional synchronization is needed for a parallel reduction.
 The following will accumulate strings into an ArrayList:
 @code
    List<String> asList = stringStream.collect(Collectors.toList());
 
@endcode
 <p>The following will classify <code>Person</code> objects by city:
 @code
    Map<String, List<Person>> peopleByCity
         = personStream.collect(Collectors.groupingBy(Person::getCity));
 
@endcode
 <p>The following will classify <code>Person</code> objects by state and city,
 cascading two <code>Collector</code>s together:
 @code
    Map<String, Map<String, List<Person>>> peopleByStateAndCity
         = personStream.collect(Collectors.groupingBy(Person::getState,
                                                      Collectors.groupingBy(Person::getCity)));
 
@endcode
 @param collector the <code>Collector</code> describing the reduction
 @return the result of the reduction
 - seealso: #collect(Supplier,BiConsumer,BiConsumer)
 - seealso: Collectors
 */
- (id)collectWithJavaUtilStreamCollector:(id<JavaUtilStreamCollector>)collector;

/*!
 @brief Returns the minimum element of this stream according to the provided
 <code>Comparator</code>.
 This is a special case of a
 <a href="package-summary.html#Reduction">reduction</a>.
 <p>This is a <a href="package-summary.html#StreamOps">terminal operation</a>.
 @param comparator a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 <code>Comparator</code> to compare elements of this stream
 @return an <code>Optional</code> describing the minimum element of this stream,
 or an empty <code>Optional</code> if the stream is empty
 @throws NullPointerException if the minimum element is null
 */
- (JavaUtilOptional *)minWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Returns the maximum element of this stream according to the provided
 <code>Comparator</code>.
 This is a special case of a
 <a href="package-summary.html#Reduction">reduction</a>.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
 operation</a>.
 @param comparator a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 <code>Comparator</code> to compare elements of this stream
 @return an <code>Optional</code> describing the maximum element of this stream,
 or an empty <code>Optional</code> if the stream is empty
 @throws NullPointerException if the maximum element is null
 */
- (JavaUtilOptional *)maxWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Returns the count of elements in this stream.
 This is a special case of
 a <a href="package-summary.html#Reduction">reduction</a> and is
 equivalent to:
 @code
    return mapToLong(e -> 1L).sum();
 
@endcode
 <p>This is a <a href="package-summary.html#StreamOps">terminal operation</a>.
 @return the count of elements in this stream
 */
- (jlong)count;

/*!
 @brief Returns whether any elements of this stream match the provided
 predicate.
 May not evaluate the predicate on all elements if not
 necessary for determining the result.  If the stream is empty then
 <code>false</code> is returned and the predicate is not evaluated.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 terminal operation</a>.
 This method evaluates the <em>existential quantification</em> of the
 predicate over the elements of the stream (for some x P(x)).
 @param predicate a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 predicate to apply to elements of this stream
 @return <code>true</code> if any elements of the stream match the provided
 predicate, otherwise <code>false</code>
 */
- (jboolean)anyMatchWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)predicate;

/*!
 @brief Returns whether all elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
 determining the result.  If the stream is empty then <code>true</code> is
 returned and the predicate is not evaluated.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 terminal operation</a>.
 This method evaluates the <em>universal quantification</em> of the
 predicate over the elements of the stream (for all x P(x)).  If the
 stream is empty, the quantification is said to be <em>vacuously
 satisfied</em> and is always <code>true</code> (regardless of P(x)).
 @param predicate a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 predicate to apply to elements of this stream
 @return <code>true</code> if either all elements of the stream match the
 provided predicate or the stream is empty, otherwise <code>false</code>
 */
- (jboolean)allMatchWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)predicate;

/*!
 @brief Returns whether no elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
 determining the result.  If the stream is empty then <code>true</code> is
 returned and the predicate is not evaluated.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 terminal operation</a>.
 This method evaluates the <em>universal quantification</em> of the
 negated predicate over the elements of the stream (for all x ~P(x)).  If
 the stream is empty, the quantification is said to be vacuously satisfied
 and is always <code>true</code>, regardless of P(x).
 @param predicate a <a href="package-summary.html#NonInterference">non-interfering</a>,
 <a href="package-summary.html#Statelessness">stateless</a>
 predicate to apply to elements of this stream
 @return <code>true</code> if either no elements of the stream match the
 provided predicate or the stream is empty, otherwise <code>false</code>
 */
- (jboolean)noneMatchWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)predicate;

/*!
 @brief Returns an <code>Optional</code> describing the first element of this stream,
 or an empty <code>Optional</code> if the stream is empty.
 If the stream has
 no encounter order, then any element may be returned.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 terminal operation</a>.
 @return an <code>Optional</code> describing the first element of this stream,
 or an empty <code>Optional</code> if the stream is empty
 @throws NullPointerException if the element selected is null
 */
- (JavaUtilOptional *)findFirst;

/*!
 @brief Returns an <code>Optional</code> describing some element of the stream, or an
 empty <code>Optional</code> if the stream is empty.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
 terminal operation</a>.
 <p>The behavior of this operation is explicitly nondeterministic; it is
 free to select any element in the stream.  This is to allow for maximal
 performance in parallel operations; the cost is that multiple invocations
 on the same source may not return the same result.  (If a stable result
 is desired, use <code>findFirst()</code> instead.)
 @return an <code>Optional</code> describing some element of this stream, or an
 empty <code>Optional</code> if the stream is empty
 @throws NullPointerException if the element selected is null
 - seealso: #findFirst()
 */
- (JavaUtilOptional *)findAny;

- (id<JavaUtilStreamStream>)unordered;

- (id<JavaUtilStreamStream>)parallel;

- (id<JavaUtilStreamStream>)sequential;

- (id<JavaUtilStreamStream>)onCloseWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

@end

@interface JavaUtilStreamStream : NSObject

/*!
 @brief Returns a builder for a <code>Stream</code>.
 @return a stream builder
 */
+ (id<JavaUtilStreamStream_Builder>)builder;

/*!
 @brief Returns an empty sequential <code>Stream</code>.
 @return an empty sequential stream
 */
+ (id<JavaUtilStreamStream>)empty;

/*!
 @brief Returns a sequential <code>Stream</code> containing a single element.
 @param t the single element
 @return a singleton sequential stream
 */
+ (id<JavaUtilStreamStream>)ofWithId:(id)t;

/*!
 @brief Returns a sequential ordered stream whose elements are the specified values.
 @param values the elements of the new stream
 @return the new stream
 */
+ (id<JavaUtilStreamStream>)ofWithNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Returns an infinite sequential ordered <code>Stream</code> produced by iterative
 application of a function <code>f</code> to an initial element <code>seed</code>,
 producing a <code>Stream</code> consisting of <code>seed</code>, <code>f(seed)</code>,
 <code>f(f(seed))</code>, etc.
 <p>The first element (position <code>0</code>) in the <code>Stream</code> will be
 the provided <code>seed</code>.  For <code>n > 0</code>, the element at position
 <code>n</code>, will be the result of applying the function <code>f</code> to the
 element at position <code>n - 1</code>.
 @param seed the initial element
 @param f a function to be applied to to the previous element to produce
 a new element
 @return a new sequential <code>Stream</code>
 */
+ (id<JavaUtilStreamStream>)iterateWithId:(id)seed
        withJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)f;

/*!
 @brief Returns an infinite sequential unordered stream where each element is
 generated by the provided <code>Supplier</code>.
 This is suitable for
 generating constant streams, streams of random elements, etc.
 @param s the <code>Supplier</code> of generated elements
 @return a new infinite sequential unordered <code>Stream</code>
 */
+ (id<JavaUtilStreamStream>)generateWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)s;

/*!
 @brief Creates a lazily concatenated stream whose elements are all the
 elements of the first stream followed by all the elements of the
 second stream.
 The resulting stream is ordered if both
 of the input streams are ordered, and parallel if either of the input
 streams is parallel.  When the resulting stream is closed, the close
 handlers for both input streams are invoked.
 Use caution when constructing streams from repeated concatenation.
 Accessing an element of a deeply concatenated stream can result in deep
 call chains, or even <code>StackOverflowException</code>.
 @param a the first stream
 @param b the second stream
 @return the concatenation of the two input streams
 */
+ (id<JavaUtilStreamStream>)concatWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)a
                                  withJavaUtilStreamStream:(id<JavaUtilStreamStream>)b;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilStreamStream)

FOUNDATION_EXPORT id<JavaUtilStreamStream_Builder> JavaUtilStreamStream_builder();

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_empty();

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_ofWithId_(id t);

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_ofWithNSObjectArray_(IOSObjectArray *values);

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_iterateWithId_withJavaUtilFunctionUnaryOperator_(id seed, id<JavaUtilFunctionUnaryOperator> f);

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_generateWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> s);

FOUNDATION_EXPORT id<JavaUtilStreamStream> JavaUtilStreamStream_concatWithJavaUtilStreamStream_withJavaUtilStreamStream_(id<JavaUtilStreamStream> a, id<JavaUtilStreamStream> b);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilStreamStream)

#endif

#if !defined (JavaUtilStreamStream_Builder_) && (INCLUDE_ALL_JavaUtilStreamStream || defined(INCLUDE_JavaUtilStreamStream_Builder))
#define JavaUtilStreamStream_Builder_

#define RESTRICT_JavaUtilFunctionConsumer 1
#define INCLUDE_JavaUtilFunctionConsumer 1
#include "java/util/function/Consumer.h"

@protocol JavaUtilStreamStream;

/*!
 @brief A mutable builder for a <code>Stream</code>.
 This allows the creation of a
 <code>Stream</code> by generating elements individually and adding them to the
 <code>Builder</code> (without the copying overhead that comes from using
 an <code>ArrayList</code> as a temporary buffer.)
 <p>A stream builder has a lifecycle, which starts in a building
 phase, during which elements can be added, and then transitions to a built
 phase, after which elements may not be added.  The built phase begins
 when the <code>build()</code> method is called, which creates an ordered
 <code>Stream</code> whose elements are the elements that were added to the stream
 builder, in the order they were added.
 - seealso: Stream#builder()
 @since 1.8
 */
@protocol JavaUtilStreamStream_Builder < JavaUtilFunctionConsumer, JavaObject >

/*!
 @brief Adds an element to the stream being built.
 @throws IllegalStateException if the builder has already transitioned to
 the built state
 */
- (void)acceptWithId:(id)t;

/*!
 @brief Adds an element to the stream being built.
 The default implementation behaves as if:
 @code
    accept(t)
     return this;
 
@endcode
 @param t the element to add
 @return <code>this</code> builder
 @throws IllegalStateException if the builder has already transitioned to
 the built state
 */
- (id<JavaUtilStreamStream_Builder>)addWithId:(id)t;

/*!
 @brief Builds the stream, transitioning this builder to the built state.
 An <code>IllegalStateException</code> is thrown if there are further attempts
 to operate on the builder after it has entered the built state.
 @return the built stream
 @throws IllegalStateException if the builder has already transitioned to
 the built state
 */
- (id<JavaUtilStreamStream>)build;

@end

@interface JavaUtilStreamStream_Builder : NSObject < JavaUtilStreamStream_Builder >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilStreamStream_Builder)

FOUNDATION_EXPORT id<JavaUtilStreamStream_Builder> JavaUtilStreamStream_Builder_addWithId_(id<JavaUtilStreamStream_Builder> self, id t);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilStreamStream_Builder)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilStreamStream")
