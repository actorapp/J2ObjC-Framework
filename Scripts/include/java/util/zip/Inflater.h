//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/zip/Inflater.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilZipInflater")
#ifdef RESTRICT_JavaUtilZipInflater
#define INCLUDE_ALL_JavaUtilZipInflater 0
#else
#define INCLUDE_ALL_JavaUtilZipInflater 1
#endif
#undef RESTRICT_JavaUtilZipInflater

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilZipInflater_) && (INCLUDE_ALL_JavaUtilZipInflater || defined(INCLUDE_JavaUtilZipInflater))
#define JavaUtilZipInflater_

@class IOSByteArray;
@class JavaIoFileDescriptor;

/*!
 @brief This class decompresses data that was compressed using the <i>DEFLATE</i>
 algorithm (see <a href="http://www.gzip.org/algorithm.txt">specification</a>).
 <p>It is usually more convenient to use <code>InflaterInputStream</code>.
 <p>To decompress an in-memory <code>byte[]</code> to another in-memory <code>byte[]</code> manually:
 @code

     byte[] compressedBytes = ...
     int decompressedByteCount = ... // From your format's metadata.
     Inflater inflater = new Inflater();
     inflater.setInput(compressedBytes, 0, compressedBytes.length);
     byte[] decompressedBytes = new byte[decompressedByteCount];
     if (inflater.inflate(decompressedBytes) != decompressedByteCount) {
         throw new AssertionError();
     }
     inflater.end();
  
@endcode
 <p>In situations where you don't have all the input in one array (or have so much
 input that you want to feed it to the inflater in chunks), it's possible to call
 <code>setInput</code> repeatedly, but you're much better off using <code>InflaterInputStream</code>
 to handle all this for you.
 <p>If you don't know how big the decompressed data will be, you can call <code>inflate</code>
 repeatedly on a temporary buffer, copying the bytes to a <code>java.io.ByteArrayOutputStream</code>,
 but this is probably another sign you'd be better off using <code>InflaterInputStream</code>.
 Ported to j2objc by Alexander Jarvis
 */
@interface JavaUtilZipInflater : NSObject

#pragma mark Public

/*!
 @brief This constructor creates an inflater that expects a header from the input
 stream.
 Use <code>Inflater(boolean)</code> if the input comes without a ZLIB
 header.
 */
- (instancetype)init;

/*!
 @brief This constructor allows to create an inflater that expects no header from
 the input stream.
 @param noHeader
 <code>true</code> indicates that no ZLIB header comes with the
 input.
 */
- (instancetype)initWithBoolean:(jboolean)noHeader;

/*!
 @brief Releases resources associated with this <code>Inflater</code>.
 Any unused
 input or output is discarded. This method should be called explicitly in
 order to free native resources as soon as possible. After <code>end()</code> is
 called, other methods will typically throw <code>IllegalStateException</code>.
 */
- (void)end;

/*!
 @brief Indicates if the <code>Inflater</code> has inflated the entire deflated
 stream.
 If deflated bytes remain and <code>needsInput</code> returns <code>true</code>
  this method will return <code>false</code>. This method should be
 called after all deflated input is supplied to the <code>Inflater</code>.
 @return <code>true</code> if all input has been inflated, <code>false</code>
 otherwise.
 */
- (jboolean)finished;

/*!
 @brief Returns the <code>Adler32</code> checksum of the bytes inflated so far, or the
 checksum of the preset dictionary if <code>needsDictionary</code> returns true.
 */
- (jint)getAdler;

/*!
 @brief Returns the total number of bytes read by the <code>Inflater</code>.
 This
 method is the same as <code>getTotalIn</code> except that it returns a
 <code>long</code> value instead of an integer.
 */
- (jlong)getBytesRead;

/*!
 @brief Returns a the total number of bytes written by this <code>Inflater</code>.
 This
 method is the same as <code>getTotalOut</code> except it returns a
 <code>long</code> value instead of an integer.
 */
- (jlong)getBytesWritten;

/*!
 @brief Returns the number of bytes of current input remaining to be read by this
 inflater.
 */
- (jint)getRemaining;

/*!
 @brief Returns the total number of bytes of input read by this <code>Inflater</code>.
 This
 method is limited to 32 bits; use <code>getBytesRead</code> instead.
 */
- (jint)getTotalIn;

/*!
 @brief Returns the total number of bytes written to the output buffer by this <code>Inflater</code>
 .
 The method is limited to 32 bits; use <code>getBytesWritten</code> instead.
 */
- (jint)getTotalOut;

/*!
 @brief Inflates bytes from the current input and stores them in <code>buf</code>.
 @param buf
 the buffer where decompressed data bytes are written.
 @return the number of bytes inflated.
 @throws DataFormatException
 if the underlying stream is corrupted or was not compressed
 using a <code>Deflater</code>.
 */
- (jint)inflateWithByteArray:(IOSByteArray *)buf;

/*!
 @brief Inflates up to <code>byteCount</code> bytes from the current input and stores them in
 <code>buf</code> starting at <code>offset</code>.
 @throws DataFormatException
 if the underlying stream is corrupted or was not compressed
 using a <code>Deflater</code>.
 @return the number of bytes inflated.
 */
- (jint)inflateWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)offset
                     withInt:(jint)byteCount;

/*!
 @brief Returns true if the input bytes were compressed with a preset
 dictionary.
 This method should be called if the first call to <code>inflate</code> returns 0,
 to determine whether a dictionary is required. If so, <code>setDictionary</code>
 should be called with the appropriate dictionary before calling <code>inflate</code>
  again. Use <code>getAdler</code> to determine which dictionary is required.
 */
- (jboolean)needsDictionary;

/*!
 @brief Returns true if <code>setInput</code> must be called before inflation can continue.
 */
- (jboolean)needsInput;

/*!
 @brief Resets this <code>Inflater</code>.
 Should be called prior to inflating a new
 set of data.
 */
- (void)reset;

/*!
 @brief Sets the preset dictionary to be used for inflation to <code>dictionary</code>.
 See <code>needsDictionary</code> for details.
 */
- (void)setDictionaryWithByteArray:(IOSByteArray *)dictionary;

/*!
 @brief Sets the preset dictionary to be used for inflation to a subsequence of <code>dictionary</code>
 starting at <code>offset</code> and continuing for <code>byteCount</code> bytes.
 See <code>needsDictionary</code>
  for details.
 */
- (void)setDictionaryWithByteArray:(IOSByteArray *)dictionary
                           withInt:(jint)offset
                           withInt:(jint)byteCount;

/*!
 @brief Sets the current input to to be decompressed.
 This method should only be
 called if <code>needsInput</code> returns <code>true</code>.
 */
- (void)setInputWithByteArray:(IOSByteArray *)buf;

/*!
 @brief Sets the current input to to be decompressed.
 This method should only be
 called if <code>needsInput</code> returns <code>true</code>.
 */
- (void)setInputWithByteArray:(IOSByteArray *)buf
                      withInt:(jint)offset
                      withInt:(jint)byteCount;

#pragma mark Protected

- (void)javaFinalize;

#pragma mark Package-Private

/*!
 @brief Returns the offset of the next byte to read in the underlying buffer.
 For internal use only.
 */
- (jint)getCurrentOffset;

- (jint)setFileInputWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fd
                                    withLong:(jlong)offset
                                     withInt:(jint)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilZipInflater)

FOUNDATION_EXPORT void JavaUtilZipInflater_init(JavaUtilZipInflater *self);

FOUNDATION_EXPORT JavaUtilZipInflater *new_JavaUtilZipInflater_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipInflater *create_JavaUtilZipInflater_init();

FOUNDATION_EXPORT void JavaUtilZipInflater_initWithBoolean_(JavaUtilZipInflater *self, jboolean noHeader);

FOUNDATION_EXPORT JavaUtilZipInflater *new_JavaUtilZipInflater_initWithBoolean_(jboolean noHeader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipInflater *create_JavaUtilZipInflater_initWithBoolean_(jboolean noHeader);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipInflater)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilZipInflater")
