//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/FieldPosition.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextFieldPosition")
#ifdef RESTRICT_JavaTextFieldPosition
#define INCLUDE_ALL_JavaTextFieldPosition 0
#else
#define INCLUDE_ALL_JavaTextFieldPosition 1
#endif
#undef RESTRICT_JavaTextFieldPosition

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaTextFieldPosition_) && (INCLUDE_ALL_JavaTextFieldPosition || defined(INCLUDE_JavaTextFieldPosition))
#define JavaTextFieldPosition_

@class JavaTextFormat_Field;

/*!
 @brief Identifies fields in formatted strings.
 If a <code>FieldPosition</code> is passed
 to the format method with such a parameter, then the indices will be set to
 the start and end indices of the field in the formatted string.
 <p>A <code>FieldPosition</code> can be created by using the integer constants in the
 various format classes (for example <code>NumberFormat.INTEGER_FIELD</code>) or
 one of the fields of type <code>Format.Field</code>.
 <p>If more than one field position is needed, the method
 <code>NumberFormat.formatToCharacterIterator(Object)</code> should be used.
 */
@interface JavaTextFieldPosition : NSObject

#pragma mark Public

/*!
 @brief Constructs a new <code>FieldPosition</code> for the given <code>Field</code> attribute.
 */
- (instancetype)initWithJavaTextFormat_Field:(JavaTextFormat_Field *)attribute;

/*!
 @brief Constructs a new <code>FieldPosition</code> for the given <code>Field</code> attribute and field id.
 */
- (instancetype)initWithJavaTextFormat_Field:(JavaTextFormat_Field *)attribute
                                     withInt:(jint)field;

/*!
 @brief Constructs a new <code>FieldPosition</code> for the given field id.
 */
- (instancetype)initWithInt:(jint)field;

/*!
 @brief Compares the given object to this field position and indicates if
 they are equal.
 In order to be equal, <code>object</code> must be an instance
 of <code>FieldPosition</code> with the same field, begin index and end index.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Returns the index of the beginning of the field.
 */
- (jint)getBeginIndex;

/*!
 @brief Returns the index one past the end of the field.
 */
- (jint)getEndIndex;

/*!
 @brief Returns the field which is being identified.
 */
- (jint)getField;

/*!
 @brief Returns the attribute which is being identified.
 */
- (JavaTextFormat_Field *)getFieldAttribute;

- (NSUInteger)hash;

/*!
 @brief Sets the index of the beginning of the field.
 */
- (void)setBeginIndexWithInt:(jint)index;

/*!
 @brief Sets the index of the end of the field.
 */
- (void)setEndIndexWithInt:(jint)index;

/*!
 @brief Returns the string representation of this field position.
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTextFieldPosition)

FOUNDATION_EXPORT void JavaTextFieldPosition_initWithInt_(JavaTextFieldPosition *self, jint field);

FOUNDATION_EXPORT JavaTextFieldPosition *new_JavaTextFieldPosition_initWithInt_(jint field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextFieldPosition *create_JavaTextFieldPosition_initWithInt_(jint field);

FOUNDATION_EXPORT void JavaTextFieldPosition_initWithJavaTextFormat_Field_(JavaTextFieldPosition *self, JavaTextFormat_Field *attribute);

FOUNDATION_EXPORT JavaTextFieldPosition *new_JavaTextFieldPosition_initWithJavaTextFormat_Field_(JavaTextFormat_Field *attribute) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextFieldPosition *create_JavaTextFieldPosition_initWithJavaTextFormat_Field_(JavaTextFormat_Field *attribute);

FOUNDATION_EXPORT void JavaTextFieldPosition_initWithJavaTextFormat_Field_withInt_(JavaTextFieldPosition *self, JavaTextFormat_Field *attribute, jint field);

FOUNDATION_EXPORT JavaTextFieldPosition *new_JavaTextFieldPosition_initWithJavaTextFormat_Field_withInt_(JavaTextFormat_Field *attribute, jint field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextFieldPosition *create_JavaTextFieldPosition_initWithJavaTextFormat_Field_withInt_(JavaTextFormat_Field *attribute, jint field);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextFieldPosition)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTextFieldPosition")
