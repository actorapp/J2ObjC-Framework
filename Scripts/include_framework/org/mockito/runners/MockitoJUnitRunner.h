//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/runners/MockitoJUnitRunner.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoRunnersMockitoJUnitRunner")
#ifdef RESTRICT_OrgMockitoRunnersMockitoJUnitRunner
#define INCLUDE_ALL_OrgMockitoRunnersMockitoJUnitRunner 0
#else
#define INCLUDE_ALL_OrgMockitoRunnersMockitoJUnitRunner 1
#endif
#undef RESTRICT_OrgMockitoRunnersMockitoJUnitRunner

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgMockitoRunnersMockitoJUnitRunner_) && (INCLUDE_ALL_OrgMockitoRunnersMockitoJUnitRunner || defined(INCLUDE_OrgMockitoRunnersMockitoJUnitRunner))
#define OrgMockitoRunnersMockitoJUnitRunner_

#define RESTRICT_OrgJunitRunnerRunner 1
#define INCLUDE_OrgJunitRunnerRunner 1
#include "../../../org/junit/runner/Runner.h"

#define RESTRICT_OrgJunitRunnerManipulationFilterable 1
#define INCLUDE_OrgJunitRunnerManipulationFilterable 1
#include "../../../org/junit/runner/manipulation/Filterable.h"

@class IOSClass;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnerManipulationFilter;
@class OrgJunitRunnerNotificationRunNotifier;

/*!
 @brief Compatible with <b>JUnit 4.4 and higher</b>, this runner adds following behavior:
 <ul>
 <li>
 Initializes mocks annotated with <code>Mock</code>,
 so that explicit usage of <code>MockitoAnnotations.initMocks(Object)</code> is not necessary.
 Mocks are initialized before each test method.
 <li>
 validates framework usage after each test method. See javadoc for <code>Mockito.validateMockitoUsage()</code>.
 </ul>
 Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
 Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.
 See javadoc for <code>Mockito.validateMockitoUsage()</code>.
 <p>
 Read more about &#064;Mock annotation in javadoc for <code>MockitoAnnotations</code>
 <pre class="code"><code class="java">
 <b>&#064;RunWith(MockitoJUnitRunner.class)</b>
 public class ExampleTest {
 &#064;Mock
 private List list;
 &#064;Test
 public void shouldDoSomething() {
 list.add(100);
 }
 }
 
@endcode
 */
@interface OrgMockitoRunnersMockitoJUnitRunner : OrgJunitRunnerRunner < OrgJunitRunnerManipulationFilterable >

#pragma mark Public

- (instancetype)initWithIOSClass:(IOSClass *)klass;

- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter;

- (OrgJunitRunnerDescription *)getDescription;

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoRunnersMockitoJUnitRunner)

FOUNDATION_EXPORT void OrgMockitoRunnersMockitoJUnitRunner_initWithIOSClass_(OrgMockitoRunnersMockitoJUnitRunner *self, IOSClass *klass);

FOUNDATION_EXPORT OrgMockitoRunnersMockitoJUnitRunner *new_OrgMockitoRunnersMockitoJUnitRunner_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoRunnersMockitoJUnitRunner *create_OrgMockitoRunnersMockitoJUnitRunner_initWithIOSClass_(IOSClass *klass);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoRunnersMockitoJUnitRunner)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoRunnersMockitoJUnitRunner")
