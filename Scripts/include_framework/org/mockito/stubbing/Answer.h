//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/stubbing/Answer.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoStubbingAnswer")
#ifdef RESTRICT_OrgMockitoStubbingAnswer
#define INCLUDE_ALL_OrgMockitoStubbingAnswer 0
#else
#define INCLUDE_ALL_OrgMockitoStubbingAnswer 1
#endif
#undef RESTRICT_OrgMockitoStubbingAnswer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgMockitoStubbingAnswer_) && (INCLUDE_ALL_OrgMockitoStubbingAnswer || defined(INCLUDE_OrgMockitoStubbingAnswer))
#define OrgMockitoStubbingAnswer_

@protocol OrgMockitoInvocationInvocationOnMock;

/*!
 @brief Generic interface to be used for configuring mock's answer.
 Answer specifies an action that is executed and a return value that is returned when you interact with the mock.   
 <p>
 Example of stubbing a mock with custom answer: 
 <pre class="code"><code class="java">
 when(mock.someMethod(anyString())).thenAnswer(new Answer() {
 Object answer(InvocationOnMock invocation) {
 Object[] args = invocation.getArguments();
 Object mock = invocation.getMock();
 return "called with arguments: " + args;
 }
 });
 //Following prints "called with arguments: foo"
 System.out.println(mock.someMethod("foo"));
 
@endcode
 */
@protocol OrgMockitoStubbingAnswer < JavaObject >

/*!
 @param invocation the invocation on the mock.
 @return the value to be returned
 @throws Throwable the throwable to be thrown
 */
- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoStubbingAnswer)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoStubbingAnswer)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoStubbingAnswer")
