//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/ArgumentCaptor.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoArgumentCaptor")
#ifdef RESTRICT_OrgMockitoArgumentCaptor
#define INCLUDE_ALL_OrgMockitoArgumentCaptor 0
#else
#define INCLUDE_ALL_OrgMockitoArgumentCaptor 1
#endif
#undef RESTRICT_OrgMockitoArgumentCaptor

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgMockitoArgumentCaptor_) && (INCLUDE_ALL_OrgMockitoArgumentCaptor || defined(INCLUDE_OrgMockitoArgumentCaptor))
#define OrgMockitoArgumentCaptor_

@class IOSClass;
@class OrgMockitoInternalProgressHandyReturnValues;
@protocol JavaUtilList;

/*!
 @brief Use it to capture argument values for further assertions.
 <p>
 Mockito verifies argument values in natural java style: by using an equals() method.
 This is also the recommended way of matching arguments because it makes tests clean & simple.
 In some situations though, it is helpful to assert on certain arguments after the actual verification.
 For example:
 <pre class="code"><code class="java">
 ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
 verify(mock).doSomething(argument.capture());
 assertEquals("John", argument.getValue().getName());
 
@endcode
 <p>
 <strong>Warning:</strong> it is recommended to use ArgumentCaptor with verification <strong>but not</strong> with stubbing.
 Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.
 Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
 <p>
 In a way ArgumentCaptor is related to custom argument matchers (see javadoc for <code>ArgumentMatcher</code> class).
 Both techniques can be used for making sure certain arguments where passed to mocks. 
 However, ArgumentCaptor may be a better fit if:
 <ul>  
 <li>custom argument matcher is not likely to be reused</li>
 <li>you just need it to assert on argument values to complete verification</li>
 </ul>
 Custom argument matchers via <code>ArgumentMatcher</code> are usually better for stubbing.
 <p>
 This utility class <strong>*don't do any type checks*</strong>, the generic signatures are only there to avoid casting
 in your code. If you want specific types, then you should do that the captured values.
 This behavior might change (type checks could be added) in a
 future major release.
 <p>
 There is an <strong>annotation</strong> that you might find useful: &#64;<code>Captor</code>
 <p>
 See the full documentation on Mockito in javadoc for <code>Mockito</code> class.
 - seealso: Captor
 @since 1.8.0
 */
@interface OrgMockitoArgumentCaptor : NSObject {
 @public
  OrgMockitoInternalProgressHandyReturnValues *handyReturnValues_;
}

#pragma mark Public

/*!
 */
- (instancetype)init __attribute__((deprecated));

/*!
 @brief Use it to capture the argument.
 This method <b>must be used inside of verification</b>.
 <p>
 Internally, this method registers a special implementation of an <code>ArgumentMatcher</code>.
 This argument matcher stores the argument value so that you can use it later to perform assertions.  
 <p>
 See examples in javadoc for <code>ArgumentCaptor</code> class.
 @return null
 */
- (id)capture;

/*!
 @brief Build a new <code>ArgumentCaptor</code>.
 <p>
 Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting
 in your code. This might however change (type checks could be added) in a
 future major release.
 @param clazz Type matching the parameter to be captured.
 @return A new ArgumentCaptor
 */
+ (OrgMockitoArgumentCaptor *)forClassWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Returns all captured values.
 Use it in case the verified method was called multiple times.
 <p>
 Example: 
 <pre class="code"><code class="java">
 ArgumentCaptor&lt;Person&gt; peopleCaptor = ArgumentCaptor.forClass(Person.class);
 verify(mock, times(2)).doSomething(peopleCaptor.capture());
 List&lt;Person&gt; capturedPeople = peopleCaptor.getAllValues();
 assertEquals("John", capturedPeople.get(0).getName());
 assertEquals("Jane", capturedPeople.get(1).getName());
 
@endcode
 See more examples in javadoc for <code>ArgumentCaptor</code> class.
 @return captured argument value
 */
- (id<JavaUtilList>)getAllValues;

/*!
 @brief Returns the captured value of the argument.
 <p>
 If the method was called multiple times then it returns the latest captured value
 <p>
 See examples in javadoc for <code>ArgumentCaptor</code> class.
 @return captured argument value
 */
- (id)getValue;

#pragma mark Package-Private

- (instancetype)initWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoArgumentCaptor)

J2OBJC_FIELD_SETTER(OrgMockitoArgumentCaptor, handyReturnValues_, OrgMockitoInternalProgressHandyReturnValues *)

FOUNDATION_EXPORT void OrgMockitoArgumentCaptor_init(OrgMockitoArgumentCaptor *self);

FOUNDATION_EXPORT OrgMockitoArgumentCaptor *new_OrgMockitoArgumentCaptor_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoArgumentCaptor *create_OrgMockitoArgumentCaptor_init();

FOUNDATION_EXPORT void OrgMockitoArgumentCaptor_initWithIOSClass_(OrgMockitoArgumentCaptor *self, IOSClass *clazz);

FOUNDATION_EXPORT OrgMockitoArgumentCaptor *new_OrgMockitoArgumentCaptor_initWithIOSClass_(IOSClass *clazz) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoArgumentCaptor *create_OrgMockitoArgumentCaptor_initWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT OrgMockitoArgumentCaptor *OrgMockitoArgumentCaptor_forClassWithIOSClass_(IOSClass *clazz);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoArgumentCaptor)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoArgumentCaptor")
