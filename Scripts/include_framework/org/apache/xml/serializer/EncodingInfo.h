//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/EncodingInfo.java
//

#include "../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodingInfo")
#ifdef RESTRICT_OrgApacheXmlSerializerEncodingInfo
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodingInfo 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodingInfo 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerEncodingInfo

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgApacheXmlSerializerEncodingInfo_) && (INCLUDE_ALL_OrgApacheXmlSerializerEncodingInfo || defined(INCLUDE_OrgApacheXmlSerializerEncodingInfo))
#define OrgApacheXmlSerializerEncodingInfo_

/*!
 @brief Holds information about a given encoding, which is the Java name for the
 encoding, the equivalent ISO name.
 <p>
 An object of this type has two useful methods
 @code

  isInEncoding(char ch);
  
@endcode
 which can be called if the character is not the high one in
 a surrogate pair and:
 @code

  isInEncoding(char high, char low);
  
@endcode
 which can be called if the two characters from a high/low surrogate pair.
 <p>
 An EncodingInfo object is a node in a binary search tree. Such a node
 will answer if a character is in the encoding, and do so for a given
 range of unicode values (<code>m_first</code> to
 <code>m_last</code>). It will handle a certain range of values
 explicitly (<code>m_explFirst</code> to <code>m_explLast</code>).
 If the unicode point is before that explicit range, that is it
 is in the range <code>m_first <= value < m_explFirst</code>, then it will delegate to another EncodingInfo object for The root
 of such a tree, m_before.  Likewise for values in the range 
 <code>m_explLast < value <= m_last</code>, but delgating to <code>m_after</code>
 <p>
 Actually figuring out if a code point is in the encoding is expensive. So the
 purpose of this tree is to cache such determinations, and not to build the
 entire tree of information at the start, but only build up as much of the 
 tree as is used during the transformation.
 <p>
 This Class is not a public API, and should only be used internally within
 the serializer.
 <p>
 This class is not a public API.
  internal
 */
@interface OrgApacheXmlSerializerEncodingInfo : NSObject {
 @public
  /*!
   @brief The ISO encoding name.
   */
  NSString *name_;
  /*!
   @brief The name used by the Java convertor.
   */
  NSString *javaName_;
}

#pragma mark Public

/*!
 @brief Create an EncodingInfo object based on the ISO name and Java name.
 If both parameters are null any character will be considered to
 be in the encoding. This is useful for when the serializer is in
 temporary output state, and has no assciated encoding.
 @param name reference to the ISO name.
 @param javaName reference to the Java encoding name.
 @param highChar The char for which characters at or below this value are 
 definately in the
 encoding, although for characters above this point they might be in the encoding.
 */
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)javaName
                        withChar:(jchar)highChar;

/*!
 @brief This method exists for performance reasons.
 <p>
 Except for '\u0000', if a char is less than or equal to the value
 returned by this method then it in the encoding.
 <p>
 The characters in an encoding are not contiguous, however
 there is a lowest group of chars starting at '\u0001' upto and
 including the char returned by this method that are all in the encoding.
 So the char returned by this method essentially defines the lowest
 contiguous group.
 <p>
 chars above the value returned might be in the encoding, but 
 chars at or below the value returned are definately in the encoding.
 <p>
 In any case however, the isInEncoding(char) method can be used
 regardless of the value of the char returned by this method.
 <p>
 If the value returned is '\u0000' it means that every character must be tested
 with an isInEncoding method <code>isInEncoding(char)</code> or <code>isInEncoding(char,char)</code> 
 for surrogate pairs.
 <p>
 This method is not a public API.
  internal
 */
- (jchar)getHighChar;

/*!
 @brief This is not a public API.
 It returns true if the
 char in question is in the encoding.
 @param ch the char in question.
 <p>
 This method is not a public API.
  internal
 */
- (jboolean)isInEncodingWithChar:(jchar)ch;

/*!
 @brief This is not a public API.
 It returns true if the
 character formed by the high/low pair is in the encoding.
 @param high a char that the a high char of a high/low surrogate pair.
 @param low a char that is the low char of a high/low surrogate pair.
 <p>
 This method is not a public API.
  internal
 */
- (jboolean)isInEncodingWithChar:(jchar)high
                        withChar:(jchar)low;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlSerializerEncodingInfo)

J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerEncodingInfo, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerEncodingInfo, javaName_, NSString *)

FOUNDATION_EXPORT void OrgApacheXmlSerializerEncodingInfo_initWithNSString_withNSString_withChar_(OrgApacheXmlSerializerEncodingInfo *self, NSString *name, NSString *javaName, jchar highChar);

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodingInfo *new_OrgApacheXmlSerializerEncodingInfo_initWithNSString_withNSString_withChar_(NSString *name, NSString *javaName, jchar highChar) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodingInfo *create_OrgApacheXmlSerializerEncodingInfo_initWithNSString_withNSString_withChar_(NSString *name, NSString *javaName, jchar highChar);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerEncodingInfo)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodingInfo")
