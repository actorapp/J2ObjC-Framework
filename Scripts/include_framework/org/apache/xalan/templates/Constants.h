//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/templates/Constants.java
//

#include "../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanTemplatesConstants")
#ifdef RESTRICT_OrgApacheXalanTemplatesConstants
#define INCLUDE_ALL_OrgApacheXalanTemplatesConstants 0
#else
#define INCLUDE_ALL_OrgApacheXalanTemplatesConstants 1
#endif
#undef RESTRICT_OrgApacheXalanTemplatesConstants

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (OrgApacheXalanTemplatesConstants_) && (INCLUDE_ALL_OrgApacheXalanTemplatesConstants || defined(INCLUDE_OrgApacheXalanTemplatesConstants))
#define OrgApacheXalanTemplatesConstants_

#define RESTRICT_OrgApacheXmlUtilsConstants 1
#define INCLUDE_OrgApacheXmlUtilsConstants 1
#include "../../../../org/apache/xml/utils/Constants.h"

/*!
 @brief Primary constants used in the TransformerImpl classes.
  advanced
 */
@interface OrgApacheXalanTemplatesConstants : OrgApacheXmlUtilsConstants

+ (jint)ELEMNAME_UNDEFINED;

+ (jint)ELEMNAME_WITHPARAM;

+ (jint)ELEMNAME_ADDATTRIBUTE;

+ (jint)ELEMNAME_ANCHOR;

+ (jint)ELEMNAME_APPLY_TEMPLATES;

+ (jint)ELEMNAME_USE;

+ (jint)ELEMNAME_CHILDREN;

+ (jint)ELEMNAME_CHOOSE;

+ (jint)ELEMNAME_COMMENT;

+ (jint)ELEMNAME_CONSTRUCT;

+ (jint)ELEMNAME_CONTENTS;

+ (jint)ELEMNAME_COPY;

+ (jint)ELEMNAME_COPY_OF;

+ (jint)ELEMNAME_DECIMALFORMAT;

+ (jint)ELEMNAME_DEFINEATTRIBUTESET;

+ (jint)ELEMNAME_DEFINESCRIPT;

+ (jint)ELEMNAME_DISPLAYIF;

+ (jint)ELEMNAME_EMPTY;

+ (jint)ELEMNAME_EVAL;

+ (jint)ELEMNAME_EXPECTEDCHILDREN;

+ (jint)ELEMNAME_EXTENSION;

+ (jint)ELEMNAME_EXTENSIONHANDLER;

+ (jint)ELEMNAME_FOREACH;

+ (jint)ELEMNAME_KEY;

+ (jint)ELEMNAME_IF;

+ (jint)ELEMNAME_IMPORT;

+ (jint)ELEMNAME_INCLUDE;

+ (jint)ELEMNAME_CALLTEMPLATE;

+ (jint)ELEMNAME_PARAMVARIABLE;

+ (jint)ELEMNAME_NUMBER;

+ (jint)ELEMNAME_NSALIAS;

+ (jint)ELEMNAME_OTHERWISE;

+ (jint)ELEMNAME_PI;

+ (jint)ELEMNAME_PRESERVESPACE;

+ (jint)ELEMNAME_REMOVEATTRIBUTE;

+ (jint)ELEMNAME_TEMPLATE;

+ (jint)ELEMNAME_SORT;

+ (jint)ELEMNAME_STRIPSPACE;

+ (jint)ELEMNAME_STYLESHEET;

+ (jint)ELEMNAME_TEXT;

+ (jint)ELEMNAME_VALUEOF;

+ (jint)ELEMNAME_WHEN;

+ (jint)ELEMNAME_ROOT;

+ (jint)ELEMNAME_ANY;

+ (jint)ELEMNAME_ELEMENT;

+ (jint)ELEMNAME_TARGETELEMENT;

+ (jint)ELEMNAME_ATTRIBUTE;

+ (jint)ELEMNAME_TARGETATTRIBUTE;

+ (jint)ELEMNAME_URL;

+ (jint)ELEMNAME_CALL;

+ (jint)ELEMNAME_FALLBACK;

+ (jint)ELEMNAME_TARGETPI;

+ (jint)ELEMNAME_TARGETCOMMENT;

+ (jint)ELEMNAME_TARGETTEXT;

+ (jint)ELEMNAME_CSSSTYLECONVERSION;

+ (jint)ELEMNAME_COUNTER;

+ (jint)ELEMNAME_COUNTERS;

+ (jint)ELEMNAME_COUNTERINCREMENT;

+ (jint)ELEMNAME_COUNTERRESET;

+ (jint)ELEMNAME_COUNTERSCOPE;

+ (jint)ELEMNAME_APPLY_IMPORTS;

+ (jint)ELEMNAME_VARIABLE;

+ (jint)ELEMNAME_MESSAGE;

+ (jint)ELEMNAME_LOCALE;

+ (jint)ELEMNAME_LITERALRESULT;

+ (jint)ELEMNAME_TEXTLITERALRESULT;

+ (jint)ELEMNAME_EXTENSIONCALL;

+ (jint)ELEMNAME_EXTENSIONDECL;

+ (jint)ELEMNAME_EXTENSIONSCRIPT;

+ (jint)ELEMNAME_OUTPUT;

+ (jint)ELEMNAME_COMPONENT;

+ (jint)ELEMNAME_SCRIPT;

+ (NSString *)ELEMNAME_ANCHOR_STRING;

+ (NSString *)ELEMNAME_ANY_STRING;

+ (NSString *)ELEMNAME_APPLY_IMPORTS_STRING;

+ (NSString *)ELEMNAME_APPLY_TEMPLATES_STRING;

+ (NSString *)ELEMNAME_ARG_STRING;

+ (NSString *)ELEMNAME_ATTRIBUTESET_STRING;

+ (NSString *)ELEMNAME_ATTRIBUTE_STRING;

+ (NSString *)ELEMNAME_CALLTEMPLATEARG_STRING;

+ (NSString *)ELEMNAME_CALLTEMPLATE_STRING;

+ (NSString *)ELEMNAME_CALL_STRING;

+ (NSString *)ELEMNAME_CHILDREN_STRING;

+ (NSString *)ELEMNAME_CHOOSE_STRING;

+ (NSString *)ELEMNAME_COMMENT_STRING;

+ (NSString *)ELEMNAME_COMPONENT_STRING;

+ (NSString *)ELEMNAME_CONSTRUCT_STRING;

+ (NSString *)ELEMNAME_CONTENTS_STRING;

+ (NSString *)ELEMNAME_COPY_OF_STRING;

+ (NSString *)ELEMNAME_COPY_STRING;

+ (NSString *)ELEMNAME_COUNTERINCREMENT_STRING;

+ (NSString *)ELEMNAME_COUNTERRESET_STRING;

+ (NSString *)ELEMNAME_COUNTERSCOPE_STRING;

+ (NSString *)ELEMNAME_COUNTERS_STRING;

+ (NSString *)ELEMNAME_COUNTER_STRING;

+ (NSString *)ELEMNAME_CSSSTYLECONVERSION_STRING;

+ (NSString *)ELEMNAME_DECIMALFORMAT_STRING;

+ (NSString *)ELEMNAME_DISPLAYIF_STRING;

+ (NSString *)ELEMNAME_ELEMENT_STRING;

+ (NSString *)ELEMNAME_EMPTY_STRING;

+ (NSString *)ELEMNAME_EVAL_STRING;

+ (NSString *)ELEMNAME_EXPECTEDCHILDREN_STRING;

+ (NSString *)ELEMNAME_EXTENSIONHANDLER_STRING;

+ (NSString *)ELEMNAME_EXTENSION_STRING;

+ (NSString *)ELEMNAME_FALLBACK_STRING;

+ (NSString *)ELEMNAME_FOREACH_STRING;

+ (NSString *)ELEMNAME_IF_STRING;

+ (NSString *)ELEMNAME_IMPORT_STRING;

+ (NSString *)ELEMNAME_INCLUDE_STRING;

+ (NSString *)ELEMNAME_KEY_STRING;

+ (NSString *)ELEMNAME_LOCALE_STRING;

+ (NSString *)ELEMNAME_MESSAGE_STRING;

+ (NSString *)ELEMNAME_NSALIAS_STRING;

+ (NSString *)ELEMNAME_NUMBER_STRING;

+ (NSString *)ELEMNAME_OTHERWISE_STRING;

+ (NSString *)ELEMNAME_OUTPUT_STRING;

+ (NSString *)ELEMNAME_PARAMVARIABLE_STRING;

+ (NSString *)ELEMNAME_PI_OLD_STRING;

+ (NSString *)ELEMNAME_PI_STRING;

+ (NSString *)ELEMNAME_PRESERVESPACE_STRING;

+ (NSString *)ELEMNAME_ROOT_STRING;

+ (NSString *)ELEMNAME_SCRIPT_STRING;

+ (NSString *)ELEMNAME_SORT_STRING;

+ (NSString *)ELEMNAME_STRIPSPACE_STRING;

+ (NSString *)ELEMNAME_STYLESHEET_STRING;

+ (NSString *)ELEMNAME_TARGETATTRIBUTE_STRING;

+ (NSString *)ELEMNAME_TARGETCOMMENT_STRING;

+ (NSString *)ELEMNAME_TARGETELEMENT_STRING;

+ (NSString *)ELEMNAME_TARGETPI_STRING;

+ (NSString *)ELEMNAME_TARGETTEXT_STRING;

+ (NSString *)ELEMNAME_TEMPLATE_STRING;

+ (NSString *)ELEMNAME_TEXT_STRING;

+ (NSString *)ELEMNAME_TRANSFORM_STRING;

+ (NSString *)ELEMNAME_URL_STRING;

+ (NSString *)ELEMNAME_USE_STRING;

+ (NSString *)ELEMNAME_VALUEOF_STRING;

+ (NSString *)ELEMNAME_VARIABLE_STRING;

+ (NSString *)ELEMNAME_WHEN_STRING;

+ (NSString *)ELEMNAME_WITHPARAM_STRING;

+ (NSString *)EXSLT_ELEMNAME_FUNCTION_STRING;

+ (NSString *)EXSLT_ELEMNAME_FUNCRESULT_STRING;

+ (jint)EXSLT_ELEMNAME_FUNCTION;

+ (jint)EXSLT_ELEMNAME_FUNCRESULT;

+ (NSString *)ATTRNAME_AMOUNT;

+ (NSString *)ATTRNAME_ANCESTOR;

+ (NSString *)ATTRNAME_ARCHIVE;

+ (NSString *)ATTRNAME_ATTRIBUTE;

+ (NSString *)ATTRNAME_ATTRIBUTE_SET;

+ (NSString *)ATTRNAME_CASEORDER;

+ (NSString *)ATTRNAME_CLASS;

+ (NSString *)ATTRNAME_CLASSID;

+ (NSString *)ATTRNAME_CODEBASE;

+ (NSString *)ATTRNAME_CODETYPE;

+ (NSString *)ATTRNAME_CONDITION;

+ (NSString *)ATTRNAME_COPYTYPE;

+ (NSString *)ATTRNAME_COUNT;

+ (NSString *)ATTRNAME_DATATYPE;

+ (NSString *)ATTRNAME_DECIMALSEPARATOR;

+ (NSString *)ATTRNAME_DEFAULT;

+ (NSString *)ATTRNAME_DEFAULTSPACE;

+ (NSString *)ATTRNAME_DEPTH;

+ (NSString *)ATTRNAME_DIGIT;

+ (NSString *)ATTRNAME_DIGITGROUPSEP;

+ (NSString *)ATTRNAME_DISABLE_OUTPUT_ESCAPING;

+ (NSString *)ATTRNAME_ELEMENT;

+ (NSString *)ATTRNAME_ELEMENTS;

+ (NSString *)ATTRNAME_EXCLUDE_RESULT_PREFIXES;

+ (NSString *)ATTRNAME_EXPR;

+ (NSString *)ATTRNAME_EXTENSIONELEMENTPREFIXES;

+ (NSString *)ATTRNAME_FORMAT;

+ (NSString *)ATTRNAME_FROM;

+ (NSString *)ATTRNAME_GROUPINGSEPARATOR;

+ (NSString *)ATTRNAME_GROUPINGSIZE;

+ (NSString *)ATTRNAME_HREF;

+ (NSString *)ATTRNAME_ID;

+ (NSString *)ATTRNAME_IMPORTANCE;

+ (NSString *)ATTRNAME_INDENTRESULT;

+ (NSString *)ATTRNAME_INFINITY;

+ (NSString *)ATTRNAME_LANG;

+ (NSString *)ATTRNAME_LETTERVALUE;

+ (NSString *)ATTRNAME_LEVEL;

+ (NSString *)ATTRNAME_MATCH;

+ (NSString *)ATTRNAME_METHOD;

+ (NSString *)ATTRNAME_MINUSSIGN;

+ (NSString *)ATTRNAME_MODE;

+ (NSString *)ATTRNAME_NAME;

+ (NSString *)ATTRNAME_NAMESPACE;

+ (NSString *)ATTRNAME_NAN;

+ (NSString *)ATTRNAME_NDIGITSPERGROUP;

+ (NSString *)ATTRNAME_NS;

+ (NSString *)ATTRNAME_ONLY;

+ (NSString *)ATTRNAME_ORDER;

+ (NSString *)ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS;

+ (NSString *)ATTRNAME_OUTPUT_DOCTYPE_PUBLIC;

+ (NSString *)ATTRNAME_OUTPUT_DOCTYPE_SYSTEM;

+ (NSString *)ATTRNAME_OUTPUT_ENCODING;

+ (NSString *)ATTRNAME_OUTPUT_INDENT;

+ (NSString *)ATTRNAME_OUTPUT_MEDIATYPE;

+ (NSString *)ATTRNAME_OUTPUT_METHOD;

+ (NSString *)ATTRNAME_OUTPUT_OMITXMLDECL;

+ (NSString *)ATTRNAME_OUTPUT_STANDALONE;

+ (NSString *)ATTRNAME_OUTPUT_VERSION;

+ (NSString *)ATTRNAME_PATTERNSEPARATOR;

+ (NSString *)ATTRNAME_PERCENT;

+ (NSString *)ATTRNAME_PERMILLE;

+ (NSString *)ATTRNAME_PRIORITY;

+ (NSString *)ATTRNAME_REFID;

+ (NSString *)ATTRNAME_RESULTNS;

+ (NSString *)ATTRNAME_RESULT_PREFIX;

+ (NSString *)ATTRNAME_SELECT;

+ (NSString *)ATTRNAME_SEQUENCESRC;

+ (NSString *)ATTRNAME_STYLE;

+ (NSString *)ATTRNAME_STYLESHEET_PREFIX;

+ (NSString *)ATTRNAME_TERMINATE;

+ (NSString *)ATTRNAME_TEST;

+ (NSString *)ATTRNAME_TOSTRING;

+ (NSString *)ATTRNAME_TYPE;

+ (NSString *)ATTRNAME_USE;

+ (NSString *)ATTRNAME_USEATTRIBUTESETS;

+ (NSString *)ATTRNAME_VALUE;

+ (NSString *)ATTRNAME_VERSION;

+ (NSString *)ATTRNAME_XMLNS;

+ (NSString *)ATTRNAME_XMLNSDEF;

+ (NSString *)ATTRNAME_XMLSPACE;

+ (NSString *)ATTRNAME_ZERODIGIT;

+ (jint)TATTRNAME_OUTPUT_METHOD;

+ (jint)TATTRNAME_AMOUNT;

+ (jint)TATTRNAME_ANCESTOR;

+ (jint)TATTRNAME_ARCHIVE;

+ (jint)TATTRNAME_ATTRIBUTE;

+ (jint)TATTRNAME_ATTRIBUTE_SET;

+ (jint)TATTRNAME_CASEORDER;

+ (jint)TATTRNAME_CLASS;

+ (jint)TATTRNAME_CLASSID;

+ (jint)TATTRNAME_CODEBASE;

+ (jint)TATTRNAME_CODETYPE;

+ (jint)TATTRNAME_CONDITION;

+ (jint)TATTRNAME_COPYTYPE;

+ (jint)TATTRNAME_COUNT;

+ (jint)TATTRNAME_DATATYPE;

+ (jint)TATTRNAME_DEFAULT;

+ (jint)TATTRNAME_DEFAULTSPACE;

+ (jint)TATTRNAME_DEPTH;

+ (jint)TATTRNAME_DIGITGROUPSEP;

+ (jint)TATTRNAME_DISABLE_OUTPUT_ESCAPING;

+ (jint)TATTRNAME_ELEMENT;

+ (jint)TATTRNAME_ELEMENTS;

+ (jint)TATTRNAME_EXPR;

+ (jint)TATTRNAME_EXTENSIONELEMENTPREFIXES;

+ (jint)TATTRNAME_FORMAT;

+ (jint)TATTRNAME_FROM;

+ (jint)TATTRNAME_GROUPINGSEPARATOR;

+ (jint)TATTRNAME_GROUPINGSIZE;

+ (jint)TATTRNAME_HREF;

+ (jint)TATTRNAME_ID;

+ (jint)TATTRNAME_IMPORTANCE;

+ (jint)TATTRNAME_INDENTRESULT;

+ (jint)TATTRNAME_LANG;

+ (jint)TATTRNAME_LETTERVALUE;

+ (jint)TATTRNAME_LEVEL;

+ (jint)TATTRNAME_MATCH;

+ (jint)TATTRNAME_METHOD;

+ (jint)TATTRNAME_MODE;

+ (jint)TATTRNAME_NAME;

+ (jint)TATTRNAME_NAMESPACE;

+ (jint)TATTRNAME_NDIGITSPERGROUP;

+ (jint)TATTRNAME_NS;

+ (jint)TATTRNAME_ONLY;

+ (jint)TATTRNAME_ORDER;

+ (jint)TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS;

+ (jint)TATTRNAME_OUTPUT_DOCTYPE_PUBLIC;

+ (jint)TATTRNAME_OUTPUT_DOCTYPE_SYSTEM;

+ (jint)TATTRNAME_OUTPUT_ENCODING;

+ (jint)TATTRNAME_OUTPUT_INDENT;

+ (jint)TATTRNAME_OUTPUT_MEDIATYPE;

+ (jint)TATTRNAME_OUTPUT_STANDALONE;

+ (jint)TATTRNAME_OUTPUT_VERSION;

+ (jint)TATTRNAME_OUTPUT_OMITXMLDECL;

+ (jint)TATTRNAME_PRIORITY;

+ (jint)TATTRNAME_REFID;

+ (jint)TATTRNAME_RESULTNS;

+ (jint)TATTRNAME_SELECT;

+ (jint)TATTRNAME_SEQUENCESRC;

+ (jint)TATTRNAME_STYLE;

+ (jint)TATTRNAME_TEST;

+ (jint)TATTRNAME_TOSTRING;

+ (jint)TATTRNAME_TYPE;

+ (jint)TATTRNAME_USE;

+ (jint)TATTRNAME_USEATTRIBUTESETS;

+ (jint)TATTRNAME_VALUE;

+ (jint)TATTRNAME_XMLNSDEF;

+ (jint)TATTRNAME_XMLNS;

+ (jint)TATTRNAME_XMLSPACE;

+ (jint)TATTRNAME_EXCLUDE_RESULT_PREFIXES;

+ (NSString *)ATTRVAL_OUTPUT_METHOD_HTML;

+ (NSString *)ATTRVAL_OUTPUT_METHOD_XML;

+ (NSString *)ATTRVAL_OUTPUT_METHOD_TEXT;

+ (jint)ATTRVAL_PRESERVE;

+ (jint)ATTRVAL_STRIP;

+ (jboolean)ATTRVAL_YES;

+ (jboolean)ATTRVAL_NO;

+ (NSString *)ATTRVAL_ALPHABETIC;

+ (NSString *)ATTRVAL_OTHER;

+ (NSString *)ATTRVAL_TRADITIONAL;

+ (NSString *)ATTRVAL_SINGLE;

+ (NSString *)ATTRVAL_MULTI;

+ (NSString *)ATTRVAL_ANY;

+ (NSString *)ATTRVAL_DEFAULT_PREFIX;

+ (jint)NUMBERLETTER_ALPHABETIC;

+ (jint)NUMBERLETTER_TRADITIONAL;

+ (jint)NUMBERLEVEL_SINGLE;

+ (jint)NUMBERLEVEL_MULTI;

+ (jint)NUMBERLEVEL_ANY;

+ (jint)MAX_MULTI_COUNTING_DEPTH;

+ (NSString *)ATTRVAL_THIS;

+ (NSString *)ATTRVAL_PARENT;

+ (NSString *)ATTRVAL_ANCESTOR;

+ (NSString *)ATTRVAL_ID;

+ (NSString *)ATTRVAL_DATATYPE_TEXT;

+ (NSString *)ATTRVAL_DATATYPE_NUMBER;

+ (NSString *)ATTRVAL_ORDER_ASCENDING;

+ (NSString *)ATTRVAL_ORDER_DESCENDING;

+ (NSString *)ATTRVAL_CASEORDER_UPPER;

+ (NSString *)ATTRVAL_CASEORDER_LOWER;

+ (jint)SORTDATATYPE_TEXT;

+ (jint)SORTDATATYPE_NUMBER;

+ (jint)SORTORDER_ASCENDING;

+ (jint)SORTORDER_DESCENDING;

+ (jint)SORTCASEORDER_UPPERFIRST;

+ (jint)SORTCASEORDER_LOWERFIRST;

+ (NSString *)ATTRVAL_INFINITY;

+ (NSString *)ATTRVAL_NAN;

+ (NSString *)DEFAULT_DECIMAL_FORMAT;

+ (NSString *)ATTRNAME_XXXX;

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanTemplatesConstants)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_UNDEFINED();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_UNDEFINED, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_WITHPARAM();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_WITHPARAM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_WITHPARAM, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ADDATTRIBUTE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ADDATTRIBUTE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ADDATTRIBUTE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ANCHOR();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ANCHOR 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ANCHOR, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_APPLY_TEMPLATES();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_APPLY_TEMPLATES 50
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_APPLY_TEMPLATES, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_USE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_USE 34
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_USE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CHILDREN();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CHILDREN 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CHILDREN, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CHOOSE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CHOOSE 37
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CHOOSE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COMMENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COMMENT 59
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COMMENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CONSTRUCT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CONSTRUCT 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CONSTRUCT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CONTENTS();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CONTENTS 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CONTENTS, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COPY();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COPY 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COPY, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COPY_OF();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COPY_OF 74
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COPY_OF, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_DECIMALFORMAT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_DECIMALFORMAT 83
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_DECIMALFORMAT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_DEFINEATTRIBUTESET();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_DEFINEATTRIBUTESET 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_DEFINEATTRIBUTESET, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_DEFINESCRIPT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_DEFINESCRIPT 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_DEFINESCRIPT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_DISPLAYIF();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_DISPLAYIF 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_DISPLAYIF, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EMPTY();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EMPTY 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EMPTY, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EVAL();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EVAL 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EVAL, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXPECTEDCHILDREN();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXPECTEDCHILDREN 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXPECTEDCHILDREN, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSION();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSION 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSION, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSIONHANDLER();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSIONHANDLER 63
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSIONHANDLER, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_FOREACH();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_FOREACH 28
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_FOREACH, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_KEY();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_KEY 31
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_KEY, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_IF();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_IF 36
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_IF, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_IMPORT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_IMPORT 26
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_IMPORT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_INCLUDE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_INCLUDE 27
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_INCLUDE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CALLTEMPLATE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CALLTEMPLATE 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CALLTEMPLATE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_PARAMVARIABLE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_PARAMVARIABLE 41
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_PARAMVARIABLE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_NUMBER();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_NUMBER 35
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_NUMBER, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_NSALIAS();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_NSALIAS 84
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_NSALIAS, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_OTHERWISE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_OTHERWISE 39
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_OTHERWISE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_PI();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_PI 58
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_PI, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_PRESERVESPACE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_PRESERVESPACE 33
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_PRESERVESPACE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_REMOVEATTRIBUTE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_REMOVEATTRIBUTE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_REMOVEATTRIBUTE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TEMPLATE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TEMPLATE 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TEMPLATE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_SORT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_SORT 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_SORT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_STRIPSPACE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_STRIPSPACE 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_STRIPSPACE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_STYLESHEET();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_STYLESHEET 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_STYLESHEET, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TEXT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TEXT 42
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TEXT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_VALUEOF();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_VALUEOF 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_VALUEOF, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_WHEN();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_WHEN 38
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_WHEN, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ROOT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ROOT 44
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ROOT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ANY();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ANY 45
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ANY, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ELEMENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ELEMENT 46
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ELEMENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETELEMENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETELEMENT 47
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETELEMENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_ATTRIBUTE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_ATTRIBUTE 48
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_ATTRIBUTE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETATTRIBUTE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETATTRIBUTE 49
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETATTRIBUTE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_URL();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_URL 52
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_URL, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CALL();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CALL 55
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CALL, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_FALLBACK();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_FALLBACK 57
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_FALLBACK, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETPI();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETPI 60
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETPI, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETCOMMENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETCOMMENT 61
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETCOMMENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETTEXT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETTEXT 62
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETTEXT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_CSSSTYLECONVERSION();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_CSSSTYLECONVERSION 65
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_CSSSTYLECONVERSION, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTER();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTER 66
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTER, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERS();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERS 67
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERS, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERINCREMENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERINCREMENT 68
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERINCREMENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERRESET();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERRESET 69
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERRESET, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERSCOPE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERSCOPE 71
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERSCOPE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_APPLY_IMPORTS();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_APPLY_IMPORTS 72
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_APPLY_IMPORTS, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_VARIABLE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_VARIABLE 73
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_VARIABLE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_MESSAGE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_MESSAGE 75
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_MESSAGE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_LOCALE();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_LOCALE 76
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_LOCALE, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_LITERALRESULT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_LITERALRESULT 77
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_LITERALRESULT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_TEXTLITERALRESULT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_TEXTLITERALRESULT 78
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_TEXTLITERALRESULT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSIONCALL();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSIONCALL 79
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSIONCALL, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSIONDECL();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSIONDECL 85
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSIONDECL, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSIONSCRIPT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSIONSCRIPT 86
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSIONSCRIPT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_OUTPUT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_OUTPUT 80
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_OUTPUT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_COMPONENT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_COMPONENT 81
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_COMPONENT, jint)

/*!
 @brief IDs for XSL element types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 (It's a pity Java doesn't have a real Enumerated Mnemonic
 datatype... or a C-like preprocessor in lieu thereof which
 could be used to generate and maintain synch between these lists.)
 */
inline jint OrgApacheXalanTemplatesConstants_get_ELEMNAME_SCRIPT();
#define OrgApacheXalanTemplatesConstants_ELEMNAME_SCRIPT 82
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ELEMNAME_SCRIPT, jint)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ANCHOR_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ANCHOR_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ANCHOR_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ANY_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ANY_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ANY_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_APPLY_IMPORTS_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_APPLY_IMPORTS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_APPLY_IMPORTS_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_APPLY_TEMPLATES_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_APPLY_TEMPLATES_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_APPLY_TEMPLATES_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ARG_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ARG_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ARG_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ATTRIBUTESET_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ATTRIBUTESET_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ATTRIBUTESET_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ATTRIBUTE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ATTRIBUTE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ATTRIBUTE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CALLTEMPLATEARG_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CALLTEMPLATEARG_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CALLTEMPLATEARG_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CALLTEMPLATE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CALLTEMPLATE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CALLTEMPLATE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CALL_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CALL_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CALL_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CHILDREN_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CHILDREN_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CHILDREN_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CHOOSE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CHOOSE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CHOOSE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COMMENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COMMENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COMMENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COMPONENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COMPONENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COMPONENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CONSTRUCT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CONSTRUCT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CONSTRUCT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CONTENTS_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CONTENTS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CONTENTS_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COPY_OF_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COPY_OF_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COPY_OF_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COPY_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COPY_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COPY_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERINCREMENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERINCREMENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERINCREMENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERRESET_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERRESET_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERRESET_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERSCOPE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERSCOPE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERSCOPE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTERS_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTERS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTERS_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_COUNTER_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_COUNTER_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_COUNTER_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_CSSSTYLECONVERSION_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_CSSSTYLECONVERSION_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_CSSSTYLECONVERSION_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_DECIMALFORMAT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_DECIMALFORMAT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_DECIMALFORMAT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_DISPLAYIF_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_DISPLAYIF_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_DISPLAYIF_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ELEMENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ELEMENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ELEMENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_EMPTY_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_EMPTY_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_EMPTY_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_EVAL_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_EVAL_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_EVAL_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXPECTEDCHILDREN_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_EXPECTEDCHILDREN_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_EXPECTEDCHILDREN_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSIONHANDLER_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSIONHANDLER_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSIONHANDLER_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_EXTENSION_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_EXTENSION_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_EXTENSION_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_FALLBACK_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_FALLBACK_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_FALLBACK_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_FOREACH_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_FOREACH_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_FOREACH_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_IF_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_IF_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_IF_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_IMPORT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_IMPORT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_IMPORT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_INCLUDE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_INCLUDE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_INCLUDE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_KEY_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_KEY_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_KEY_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_LOCALE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_LOCALE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_LOCALE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_MESSAGE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_MESSAGE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_MESSAGE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_NSALIAS_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_NSALIAS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_NSALIAS_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_NUMBER_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_NUMBER_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_NUMBER_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_OTHERWISE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_OTHERWISE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_OTHERWISE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_OUTPUT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_OUTPUT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_OUTPUT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_PARAMVARIABLE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_PARAMVARIABLE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_PARAMVARIABLE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_PI_OLD_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_PI_OLD_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_PI_OLD_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_PI_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_PI_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_PI_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_PRESERVESPACE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_PRESERVESPACE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_PRESERVESPACE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_ROOT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_ROOT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_ROOT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_SCRIPT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_SCRIPT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_SCRIPT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_SORT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_SORT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_SORT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_STRIPSPACE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_STRIPSPACE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_STRIPSPACE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_STYLESHEET_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_STYLESHEET_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_STYLESHEET_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETATTRIBUTE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETATTRIBUTE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETATTRIBUTE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETCOMMENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETCOMMENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETCOMMENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETELEMENT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETELEMENT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETELEMENT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETPI_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETPI_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETPI_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TARGETTEXT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TARGETTEXT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TARGETTEXT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TEMPLATE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TEMPLATE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TEMPLATE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TEXT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TEXT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TEXT_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_TRANSFORM_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_TRANSFORM_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_TRANSFORM_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_URL_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_URL_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_URL_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_USE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_USE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_USE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_VALUEOF_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_VALUEOF_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_VALUEOF_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_VARIABLE_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_VARIABLE_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_VARIABLE_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_WHEN_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_WHEN_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_WHEN_STRING, NSString *)

/*!
 @brief Literals for XSL element names.
 Note that there are more
 names than IDs, because some names map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ELEMNAME_WITHPARAM_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ELEMNAME_WITHPARAM_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ELEMNAME_WITHPARAM_STRING, NSString *)

/*!
 @brief Literals for EXSLT function elements.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_EXSLT_ELEMNAME_FUNCTION_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_EXSLT_ELEMNAME_FUNCTION_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, EXSLT_ELEMNAME_FUNCTION_STRING, NSString *)

/*!
 @brief Literals for EXSLT function elements.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_EXSLT_ELEMNAME_FUNCRESULT_STRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_EXSLT_ELEMNAME_FUNCRESULT_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, EXSLT_ELEMNAME_FUNCRESULT_STRING, NSString *)

inline jint OrgApacheXalanTemplatesConstants_get_EXSLT_ELEMNAME_FUNCTION();
#define OrgApacheXalanTemplatesConstants_EXSLT_ELEMNAME_FUNCTION 88
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, EXSLT_ELEMNAME_FUNCTION, jint)

inline jint OrgApacheXalanTemplatesConstants_get_EXSLT_ELEMNAME_FUNCRESULT();
#define OrgApacheXalanTemplatesConstants_EXSLT_ELEMNAME_FUNCRESULT 89
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, EXSLT_ELEMNAME_FUNCRESULT, jint)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_AMOUNT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_AMOUNT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_AMOUNT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ANCESTOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ANCESTOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ANCESTOR, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ARCHIVE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ARCHIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ARCHIVE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ATTRIBUTE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ATTRIBUTE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ATTRIBUTE_SET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ATTRIBUTE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ATTRIBUTE_SET, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CASEORDER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CASEORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CASEORDER, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CLASS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CLASS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CLASSID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CLASSID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CLASSID, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CODEBASE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CODEBASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CODEBASE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CODETYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CODETYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CODETYPE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_CONDITION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_CONDITION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_CONDITION, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_COPYTYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_COPYTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_COPYTYPE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_COUNT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_COUNT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_COUNT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DATATYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DATATYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DATATYPE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DECIMALSEPARATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DECIMALSEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DECIMALSEPARATOR, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DEFAULT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DEFAULT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DEFAULTSPACE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DEFAULTSPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DEFAULTSPACE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DEPTH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DEPTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DEPTH, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DIGIT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DIGIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DIGIT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DIGITGROUPSEP();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DIGITGROUPSEP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DIGITGROUPSEP, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_DISABLE_OUTPUT_ESCAPING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_DISABLE_OUTPUT_ESCAPING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_DISABLE_OUTPUT_ESCAPING, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ELEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ELEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ELEMENT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ELEMENTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ELEMENTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ELEMENTS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_EXCLUDE_RESULT_PREFIXES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_EXCLUDE_RESULT_PREFIXES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_EXCLUDE_RESULT_PREFIXES, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_EXPR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_EXPR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_EXPR, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_EXTENSIONELEMENTPREFIXES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_EXTENSIONELEMENTPREFIXES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_EXTENSIONELEMENTPREFIXES, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_FORMAT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_FORMAT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_FROM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_FROM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_FROM, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_GROUPINGSEPARATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_GROUPINGSEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_GROUPINGSEPARATOR, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_GROUPINGSIZE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_GROUPINGSIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_GROUPINGSIZE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_HREF();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_HREF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_HREF, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ID, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_IMPORTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_IMPORTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_IMPORTANCE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_INDENTRESULT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_INDENTRESULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_INDENTRESULT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_INFINITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_INFINITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_INFINITY, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_LANG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_LANG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_LANG, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_LETTERVALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_LETTERVALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_LETTERVALUE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_LEVEL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_LEVEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_LEVEL, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_MATCH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_MATCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_MATCH, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_METHOD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_METHOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_METHOD, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_MINUSSIGN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_MINUSSIGN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_MINUSSIGN, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_MODE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_MODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_MODE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_NAME, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_NAMESPACE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_NAMESPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_NAMESPACE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_NAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_NAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_NAN, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_NDIGITSPERGROUP();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_NDIGITSPERGROUP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_NDIGITSPERGROUP, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_NS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_NS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_NS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ONLY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ONLY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ONLY, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ORDER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ORDER, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_DOCTYPE_PUBLIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_DOCTYPE_PUBLIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_DOCTYPE_PUBLIC, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_DOCTYPE_SYSTEM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_DOCTYPE_SYSTEM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_DOCTYPE_SYSTEM, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_ENCODING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_ENCODING, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_INDENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_INDENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_INDENT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_MEDIATYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_MEDIATYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_MEDIATYPE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_METHOD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_METHOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_METHOD, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_OMITXMLDECL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_OMITXMLDECL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_OMITXMLDECL, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_STANDALONE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_STANDALONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_STANDALONE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_OUTPUT_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_OUTPUT_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_OUTPUT_VERSION, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_PATTERNSEPARATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_PATTERNSEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_PATTERNSEPARATOR, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_PERCENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_PERCENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_PERCENT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_PERMILLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_PERMILLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_PERMILLE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_PRIORITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_PRIORITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_PRIORITY, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_REFID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_REFID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_REFID, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_RESULTNS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_RESULTNS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_RESULTNS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_RESULT_PREFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_RESULT_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_RESULT_PREFIX, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_SELECT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_SELECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_SELECT, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_SEQUENCESRC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_SEQUENCESRC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_SEQUENCESRC, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_STYLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_STYLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_STYLE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_STYLESHEET_PREFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_STYLESHEET_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_STYLESHEET_PREFIX, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_TERMINATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_TERMINATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_TERMINATE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_TEST();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_TEST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_TEST, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_TOSTRING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_TOSTRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_TOSTRING, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_TYPE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_USE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_USE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_USE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_USEATTRIBUTESETS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_USEATTRIBUTESETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_USEATTRIBUTESETS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_VALUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_VALUE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_VERSION, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_XMLNS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_XMLNS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_XMLNS, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_XMLNSDEF();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_XMLNSDEF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_XMLNSDEF, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_XMLSPACE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_XMLSPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_XMLSPACE, NSString *)

/*!
 @brief Literals for XSL attribute names.
 Note that there may be more
 names than IDs, because some names may map to the same ID.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_ZERODIGIT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_ZERODIGIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_ZERODIGIT, NSString *)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_METHOD();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_METHOD 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_METHOD, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_AMOUNT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_AMOUNT 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_AMOUNT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ANCESTOR();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ANCESTOR 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ANCESTOR, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ARCHIVE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ARCHIVE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ARCHIVE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ATTRIBUTE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ATTRIBUTE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ATTRIBUTE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ATTRIBUTE_SET();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ATTRIBUTE_SET 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ATTRIBUTE_SET, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CASEORDER();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CASEORDER 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CASEORDER, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CLASS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CLASS 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CLASS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CLASSID();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CLASSID 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CLASSID, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CODEBASE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CODEBASE 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CODEBASE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CODETYPE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CODETYPE 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CODETYPE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_CONDITION();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_CONDITION 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_CONDITION, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_COPYTYPE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_COPYTYPE 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_COPYTYPE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_COUNT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_COUNT 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_COUNT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DATATYPE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DATATYPE 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DATATYPE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DEFAULT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DEFAULT 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DEFAULT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DEFAULTSPACE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DEFAULTSPACE 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DEFAULTSPACE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DEPTH();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DEPTH 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DEPTH, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DIGITGROUPSEP();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DIGITGROUPSEP 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DIGITGROUPSEP, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_DISABLE_OUTPUT_ESCAPING();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_DISABLE_OUTPUT_ESCAPING 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_DISABLE_OUTPUT_ESCAPING, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ELEMENT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ELEMENT 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ELEMENT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ELEMENTS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ELEMENTS 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ELEMENTS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_EXPR();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_EXPR 23
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_EXPR, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_EXTENSIONELEMENTPREFIXES();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_EXTENSIONELEMENTPREFIXES 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_EXTENSIONELEMENTPREFIXES, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_FORMAT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_FORMAT 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_FORMAT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_FROM();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_FROM 26
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_FROM, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_GROUPINGSEPARATOR();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_GROUPINGSEPARATOR 27
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_GROUPINGSEPARATOR, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_GROUPINGSIZE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_GROUPINGSIZE 28
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_GROUPINGSIZE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_HREF();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_HREF 29
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_HREF, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ID();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ID 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ID, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_IMPORTANCE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_IMPORTANCE 31
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_IMPORTANCE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_INDENTRESULT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_INDENTRESULT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_INDENTRESULT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_LANG();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_LANG 33
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_LANG, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_LETTERVALUE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_LETTERVALUE 34
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_LETTERVALUE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_LEVEL();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_LEVEL 35
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_LEVEL, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_MATCH();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_MATCH 36
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_MATCH, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_METHOD();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_METHOD 37
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_METHOD, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_MODE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_MODE 38
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_MODE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_NAME();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_NAME 39
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_NAME, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_NAMESPACE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_NAMESPACE 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_NAMESPACE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_NDIGITSPERGROUP();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_NDIGITSPERGROUP 41
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_NDIGITSPERGROUP, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_NS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_NS 42
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_NS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ONLY();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ONLY 43
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ONLY, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_ORDER();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_ORDER 44
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_ORDER, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS 45
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_DOCTYPE_PUBLIC();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_DOCTYPE_PUBLIC 46
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_DOCTYPE_PUBLIC, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_DOCTYPE_SYSTEM();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_DOCTYPE_SYSTEM 47
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_DOCTYPE_SYSTEM, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_ENCODING();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_ENCODING 48
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_ENCODING, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_INDENT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_INDENT 49
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_INDENT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_MEDIATYPE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_MEDIATYPE 50
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_MEDIATYPE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_STANDALONE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_STANDALONE 51
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_STANDALONE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_VERSION();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_VERSION 52
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_VERSION, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_OUTPUT_OMITXMLDECL();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_OUTPUT_OMITXMLDECL 53
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_OUTPUT_OMITXMLDECL, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_PRIORITY();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_PRIORITY 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_PRIORITY, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_REFID();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_REFID 55
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_REFID, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_RESULTNS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_RESULTNS 56
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_RESULTNS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_SELECT();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_SELECT 57
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_SELECT, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_SEQUENCESRC();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_SEQUENCESRC 58
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_SEQUENCESRC, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_STYLE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_STYLE 59
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_STYLE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_TEST();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_TEST 60
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_TEST, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_TOSTRING();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_TOSTRING 61
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_TOSTRING, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_TYPE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_TYPE 62
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_TYPE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_USE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_USE 63
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_USE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_USEATTRIBUTESETS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_USEATTRIBUTESETS 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_USEATTRIBUTESETS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_VALUE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_VALUE 65
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_VALUE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_XMLNSDEF();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_XMLNSDEF 66
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_XMLNSDEF, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_XMLNS();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_XMLNS 67
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_XMLNS, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_XMLSPACE();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_XMLSPACE 68
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_XMLSPACE, jint)

/*!
 @brief IDs for XSL attribute types.
 These are associated
 with the string literals in the TransformerImpl class.
 Don't change the numbers. NOTE THAT THESE ARE NOT IN
 ALPHABETICAL ORDER!
 */
inline jint OrgApacheXalanTemplatesConstants_get_TATTRNAME_EXCLUDE_RESULT_PREFIXES();
#define OrgApacheXalanTemplatesConstants_TATTRNAME_EXCLUDE_RESULT_PREFIXES 69
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, TATTRNAME_EXCLUDE_RESULT_PREFIXES, jint)

/*!
 @brief Mnemonics for the possible values of the xsl:output element's
 method= attribute:
 <ul>
 <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
 produce the output document (basic XSLT operation).
 </li>
 <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
 produce the output document. When generating HTML documents,
 this may yield better results; it does things like escaping
 characters in href attributes.</li>
 </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
 produce the output document. Generally the right choice if your
 stylesheet wants to take over _all_ the details of formatting,
 most often when producing something that isn't an XML or HTML
 document.</li>
 </ul> 
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_OUTPUT_METHOD_HTML();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_OUTPUT_METHOD_HTML;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_OUTPUT_METHOD_HTML, NSString *)

/*!
 @brief Mnemonics for the possible values of the xsl:output element's
 method= attribute:
 <ul>
 <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
 produce the output document (basic XSLT operation).
 </li>
 <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
 produce the output document. When generating HTML documents,
 this may yield better results; it does things like escaping
 characters in href attributes.</li>
 </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
 produce the output document. Generally the right choice if your
 stylesheet wants to take over _all_ the details of formatting,
 most often when producing something that isn't an XML or HTML
 document.</li>
 </ul> 
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_OUTPUT_METHOD_XML();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_OUTPUT_METHOD_XML;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_OUTPUT_METHOD_XML, NSString *)

/*!
 @brief Mnemonics for the possible values of the xsl:output element's
 method= attribute:
 <ul>
 <li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
 produce the output document (basic XSLT operation).
 </li>
 <li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
 produce the output document. When generating HTML documents,
 this may yield better results; it does things like escaping
 characters in href attributes.</li>
 </li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
 produce the output document. Generally the right choice if your
 stylesheet wants to take over _all_ the details of formatting,
 most often when producing something that isn't an XML or HTML
 document.</li>
 </ul> 
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_OUTPUT_METHOD_TEXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_OUTPUT_METHOD_TEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_OUTPUT_METHOD_TEXT, NSString *)

inline jint OrgApacheXalanTemplatesConstants_get_ATTRVAL_PRESERVE();
#define OrgApacheXalanTemplatesConstants_ATTRVAL_PRESERVE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ATTRVAL_PRESERVE, jint)

inline jint OrgApacheXalanTemplatesConstants_get_ATTRVAL_STRIP();
#define OrgApacheXalanTemplatesConstants_ATTRVAL_STRIP 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ATTRVAL_STRIP, jint)

/*!
 @brief For indent-result
 */
inline jboolean OrgApacheXalanTemplatesConstants_get_ATTRVAL_YES();
#define OrgApacheXalanTemplatesConstants_ATTRVAL_YES true
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ATTRVAL_YES, jboolean)

/*!
 @brief For indent-result
 */
inline jboolean OrgApacheXalanTemplatesConstants_get_ATTRVAL_NO();
#define OrgApacheXalanTemplatesConstants_ATTRVAL_NO false
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, ATTRVAL_NO, jboolean)

/*!
 @brief For letter-value attribute (part of conversion attributes).
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ALPHABETIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ALPHABETIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ALPHABETIC, NSString *)

/*!
 @brief For letter-value attribute (part of conversion attributes).
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_OTHER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_OTHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_OTHER, NSString *)

/*!
 @brief For letter-value attribute (part of conversion attributes).
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_TRADITIONAL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_TRADITIONAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_TRADITIONAL, NSString *)

/*!
 @brief For level attribute in xsl:number.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_SINGLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_SINGLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_SINGLE, NSString *)

/*!
 @brief For level attribute in xsl:number.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_MULTI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_MULTI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_MULTI, NSString *)

/*!
 @brief For level attribute in xsl:number.
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ANY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ANY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ANY, NSString *)

/*!
 @brief For Stylesheet-prefix and result-prefix in xsl:namespace-alias
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_DEFAULT_PREFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_DEFAULT_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_DEFAULT_PREFIX, NSString *)

/*!
 @brief Integer equivalents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_NUMBERLETTER_ALPHABETIC();
#define OrgApacheXalanTemplatesConstants_NUMBERLETTER_ALPHABETIC 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, NUMBERLETTER_ALPHABETIC, jint)

/*!
 @brief Integer equivalents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_NUMBERLETTER_TRADITIONAL();
#define OrgApacheXalanTemplatesConstants_NUMBERLETTER_TRADITIONAL 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, NUMBERLETTER_TRADITIONAL, jint)

/*!
 @brief Integer equivelents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_NUMBERLEVEL_SINGLE();
#define OrgApacheXalanTemplatesConstants_NUMBERLEVEL_SINGLE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, NUMBERLEVEL_SINGLE, jint)

/*!
 @brief Integer equivelents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_NUMBERLEVEL_MULTI();
#define OrgApacheXalanTemplatesConstants_NUMBERLEVEL_MULTI 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, NUMBERLEVEL_MULTI, jint)

/*!
 @brief Integer equivelents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_NUMBERLEVEL_ANY();
#define OrgApacheXalanTemplatesConstants_NUMBERLEVEL_ANY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, NUMBERLEVEL_ANY, jint)

/*!
 @brief Integer equivelents for above
 */
inline jint OrgApacheXalanTemplatesConstants_get_MAX_MULTI_COUNTING_DEPTH();
#define OrgApacheXalanTemplatesConstants_MAX_MULTI_COUNTING_DEPTH 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, MAX_MULTI_COUNTING_DEPTH, jint)

/*!
 @brief some stuff for my patterns-by-example
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_THIS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_THIS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_THIS, NSString *)

/*!
 @brief some stuff for my patterns-by-example
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_PARENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_PARENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_PARENT, NSString *)

/*!
 @brief some stuff for my patterns-by-example
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ANCESTOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ANCESTOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ANCESTOR, NSString *)

/*!
 @brief some stuff for my patterns-by-example
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ID, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_DATATYPE_TEXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_DATATYPE_TEXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_DATATYPE_TEXT, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_DATATYPE_NUMBER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_DATATYPE_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_DATATYPE_NUMBER, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ORDER_ASCENDING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ORDER_ASCENDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ORDER_ASCENDING, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_ORDER_DESCENDING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_ORDER_DESCENDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_ORDER_DESCENDING, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_CASEORDER_UPPER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_CASEORDER_UPPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_CASEORDER_UPPER, NSString *)

/*!
 @brief Stuff for sorting
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_CASEORDER_LOWER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_CASEORDER_LOWER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_CASEORDER_LOWER, NSString *)

/*!
 @brief Integer equivelents for DATATYPE attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTDATATYPE_TEXT();
#define OrgApacheXalanTemplatesConstants_SORTDATATYPE_TEXT 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTDATATYPE_TEXT, jint)

/*!
 @brief Integer equivelents for DATATYPE attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTDATATYPE_NUMBER();
#define OrgApacheXalanTemplatesConstants_SORTDATATYPE_NUMBER 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTDATATYPE_NUMBER, jint)

/*!
 @brief Integer equivelents for ORDER attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTORDER_ASCENDING();
#define OrgApacheXalanTemplatesConstants_SORTORDER_ASCENDING 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTORDER_ASCENDING, jint)

/*!
 @brief Integer equivelents for ORDER attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTORDER_DESCENDING();
#define OrgApacheXalanTemplatesConstants_SORTORDER_DESCENDING 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTORDER_DESCENDING, jint)

/*!
 @brief Integer equivelents for CASE-ORDER attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTCASEORDER_UPPERFIRST();
#define OrgApacheXalanTemplatesConstants_SORTCASEORDER_UPPERFIRST 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTCASEORDER_UPPERFIRST, jint)

/*!
 @brief Integer equivelents for CASE-ORDER attribute
 */
inline jint OrgApacheXalanTemplatesConstants_get_SORTCASEORDER_LOWERFIRST();
#define OrgApacheXalanTemplatesConstants_SORTCASEORDER_LOWERFIRST 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesConstants, SORTCASEORDER_LOWERFIRST, jint)

/*!
 @brief some stuff for Decimal-format
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_INFINITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_INFINITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_INFINITY, NSString *)

/*!
 @brief some stuff for Decimal-format
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRVAL_NAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRVAL_NAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRVAL_NAN, NSString *)

/*!
 @brief some stuff for Decimal-format
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_DEFAULT_DECIMAL_FORMAT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_DEFAULT_DECIMAL_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, DEFAULT_DECIMAL_FORMAT, NSString *)

/*!
 @brief temp dummy
 */
inline NSString *OrgApacheXalanTemplatesConstants_get_ATTRNAME_XXXX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanTemplatesConstants_ATTRNAME_XXXX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanTemplatesConstants, ATTRNAME_XXXX, NSString *)

FOUNDATION_EXPORT void OrgApacheXalanTemplatesConstants_init(OrgApacheXalanTemplatesConstants *self);

FOUNDATION_EXPORT OrgApacheXalanTemplatesConstants *new_OrgApacheXalanTemplatesConstants_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanTemplatesConstants *create_OrgApacheXalanTemplatesConstants_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanTemplatesConstants)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanTemplatesConstants")
