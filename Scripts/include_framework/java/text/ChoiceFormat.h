//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/text/ChoiceFormat.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextChoiceFormat")
#ifdef RESTRICT_JavaTextChoiceFormat
#define INCLUDE_ALL_JavaTextChoiceFormat 0
#else
#define INCLUDE_ALL_JavaTextChoiceFormat 1
#endif
#undef RESTRICT_JavaTextChoiceFormat

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaTextChoiceFormat_) && (INCLUDE_ALL_JavaTextChoiceFormat || defined(INCLUDE_JavaTextChoiceFormat))
#define JavaTextChoiceFormat_

#define RESTRICT_JavaTextNumberFormat 1
#define INCLUDE_JavaTextNumberFormat 1
#include "../../java/text/NumberFormat.h"

@class IOSDoubleArray;
@class IOSObjectArray;
@class JavaLangStringBuffer;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;

/*!
 @brief Returns a fixed string based on a numeric value.
 The class can be used in
 conjunction with the <code>MessageFormat</code> class to handle plurals in
 messages. <code>ChoiceFormat</code> enables users to attach a format to a range of
 numbers. The choice is specified with an ascending list of doubles, where
 each item specifies a half-open interval up to the next item as in the
 following: X matches j if and only if <code>limit[j] <= X < limit[j+1]</code>.
 <p>
 If there is no match, then either the first or last index is used. The first
 or last index is used depending on whether the number is too low or too high.
 The length of the format array must be the same as the length of the limits
 array.
 <h5>Examples:</h5>
 <blockquote>
 @code

  double[] limits = {1, 2, 3, 4, 5, 6, 7};
  String[] fmts = {"Sun", "Mon", "Tue", "Wed", "Thur", "Fri", "Sat"};
  double[] limits2 = {0, 1, ChoiceFormat.nextDouble(1)};
  String[] fmts2 = {"no files", "one file", "many files"};
  
@endcode
 </blockquote>
 <p>
 ChoiceFormat.nextDouble(double) allows to get the double following the one
 passed to the method. This is used to create half open intervals.
 <p>
 <code>ChoiceFormat</code> objects also may be converted to and from patterns.
 The conversion can be done programmatically, as in the example above, or
 by using a pattern like the following:
 <blockquote>
 @code

  "1#Sun|2#Mon|3#Tue|4#Wed|5#Thur|6#Fri|7#Sat"
  "0#are no files|1#is one file|1&lt;are many files"
  
@endcode
 </blockquote>
 <p>
 where:
 <ul>
 <li><number>"#"</number> specifies an inclusive limit value;</li>
 <li><number>"<"</number> specifies an exclusive limit value.</li>
 </ul>
 */
@interface JavaTextChoiceFormat : JavaTextNumberFormat

#pragma mark Public

/*!
 @brief Constructs a new <code>ChoiceFormat</code> with the specified double values
 and associated strings.
 When calling
 <code>format</code> with a double
 value <code>d</code>, then the element <code>i</code> in <code>formats</code> is
 selected where <code>i</code> fulfills <code>limits[i] <= d < limits[i+1]</code>.
 <p>
 The length of the <code>limits</code> and <code>formats</code> arrays must be the
 same.
 @param limits
 an array of doubles in ascending order. The lowest and highest
 possible values are negative and positive infinity.
 @param formats
 the strings associated with the ranges defined through <code>limits</code>
 . The lower bound of the associated range is at the
 same index as the string.
 */
- (instancetype)initWithDoubleArray:(IOSDoubleArray *)limits
                  withNSStringArray:(IOSObjectArray *)formats;

/*!
 @brief Constructs a new <code>ChoiceFormat</code> with the strings and limits parsed
 from the specified pattern.
 @param template_
 the pattern of strings and ranges.
 @throws IllegalArgumentException
 if an error occurs while parsing the pattern.
 */
- (instancetype)initWithNSString:(NSString *)template_;

/*!
 @brief Parses the pattern to determine new strings and ranges for this
 <code>ChoiceFormat</code>.
 @param template_
 the pattern of strings and ranges.
 @throws IllegalArgumentException
 if an error occurs while parsing the pattern.
 */
- (void)applyPatternWithNSString:(NSString *)template_;

/*!
 @brief Returns a new instance of <code>ChoiceFormat</code> with the same ranges and
 strings as this <code>ChoiceFormat</code>.
 @return a shallow copy of this <code>ChoiceFormat</code>.
 - seealso: java.lang.Cloneable
 */
- (id)clone;

/*!
 @brief Compares the specified object with this <code>ChoiceFormat</code>.
 The object
 must be an instance of <code>ChoiceFormat</code> and have the same limits and
 formats to be equal to this instance.
 @param object
 the object to compare with this instance.
 @return <code>true</code> if the specified object is equal to this instance;
 <code>false</code> otherwise.
 - seealso: #hashCode
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Appends the string associated with the range in which the specified
 double value fits to the specified string buffer.
 @param value
 the double to format.
 @param buffer
 the target string buffer to append the formatted value to.
 @param field
 a <code>FieldPosition</code> which is ignored.
 @return the string buffer.
 */
- (JavaLangStringBuffer *)formatWithDouble:(jdouble)value
                  withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                 withJavaTextFieldPosition:(JavaTextFieldPosition *)field;

/*!
 @brief Appends the string associated with the range in which the specified long
 value fits to the specified string buffer.
 @param value
 the long to format.
 @param buffer
 the target string buffer to append the formatted value to.
 @param field
 a <code>FieldPosition</code> which is ignored.
 @return the string buffer.
 */
- (JavaLangStringBuffer *)formatWithLong:(jlong)value
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
               withJavaTextFieldPosition:(JavaTextFieldPosition *)field;

/*!
 @brief Returns the strings associated with the ranges of this <code>ChoiceFormat</code>
 .
 @return an array of format strings.
 */
- (IOSObjectArray *)getFormats;

/*!
 @brief Returns the limits of this <code>ChoiceFormat</code>.
 @return the array of doubles which make up the limits of this <code>ChoiceFormat</code>
 .
 */
- (IOSDoubleArray *)getLimits;

/*!
 @brief Returns an integer hash code for the receiver.
 Objects which are equal
 return the same value for this method.
 @return the receiver's hash.
 - seealso: #equals
 */
- (NSUInteger)hash;

/*!
 @brief Returns the double value which is closest to the specified double but
 larger.
 @param value
 a double value.
 @return the next larger double value.
 */
+ (jdouble)nextDoubleWithDouble:(jdouble)value;

/*!
 @brief Returns the double value which is closest to the specified double but
 either larger or smaller as specified.
 @param value
 a double value.
 @param increment
 <code>true</code> to get the next larger value, <code>false</code> to
 get the previous smaller value.
 @return the next larger or smaller double value.
 */
+ (jdouble)nextDoubleWithDouble:(jdouble)value
                    withBoolean:(jboolean)increment;

/*!
 @brief Parses a double from the specified string starting at the index specified
 by <code>position</code>.
 The string is compared to the strings of this
 <code>ChoiceFormat</code> and if a match occurs then the lower bound of the
 corresponding range in the limits array is returned. If the string is
 successfully parsed then the index of the <code>ParsePosition</code> passed to
 this method is updated to the index following the parsed text.
 <p>
 If one of the format strings of this <code>ChoiceFormat</code> instance is
 found in <code>string</code> starting at <code>position.getIndex()</code> then
 <ul>
 <li>the index in <code>position</code> is set to the index following the
 parsed text;
 <li>the <code>Double</code> corresponding to the format
 string is returned.</li>
 </ul>
 <p>
 If none of the format strings is found in <code>string</code> then
 <ul>
 <li>the error index in <code>position</code> is set to the current index in
 <code>position</code>;</li>
 <li> <code>Double.NaN</code> is returned.
 </ul>
 @param string
 the source string to parse.
 @param position
 input/output parameter, specifies the start index in <code>string</code>
  from where to start parsing. See the <em>Returns</em>
 section for a description of the output values.
 @return a Double resulting from the parse, or Double.NaN if there is an
 error
 */
- (NSNumber *)parseWithNSString:(NSString *)string
      withJavaTextParsePosition:(JavaTextParsePosition *)position;

/*!
 @brief Returns the double value which is closest to the specified double but
 smaller.
 @param value
 a double value.
 @return the next smaller double value.
 */
+ (jdouble)previousDoubleWithDouble:(jdouble)value;

/*!
 @brief Sets the double values and associated strings of this ChoiceFormat.
 When
 calling <code>format</code> with
 a double value <code>d</code>, then the element <code>i</code> in <code>formats</code>
 is selected where <code>i</code> fulfills
 <code>limits[i] <= d < limits[i+1]</code>.
 <p>
 The length of the <code>limits</code> and <code>formats</code> arrays must be the
 same.
 @param limits
 an array of doubles in ascending order. The lowest and highest
 possible values are negative and positive infinity.
 @param formats
 the strings associated with the ranges defined through <code>limits</code>
 . The lower bound of the associated range is at the
 same index as the string.
 */
- (void)setChoicesWithDoubleArray:(IOSDoubleArray *)limits
                withNSStringArray:(IOSObjectArray *)formats;

/*!
 @brief Returns the pattern of this <code>ChoiceFormat</code> which specifies the
 ranges and their associated strings.
 @return the pattern.
 */
- (NSString *)toPattern;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTextChoiceFormat)

FOUNDATION_EXPORT void JavaTextChoiceFormat_initWithDoubleArray_withNSStringArray_(JavaTextChoiceFormat *self, IOSDoubleArray *limits, IOSObjectArray *formats);

FOUNDATION_EXPORT JavaTextChoiceFormat *new_JavaTextChoiceFormat_initWithDoubleArray_withNSStringArray_(IOSDoubleArray *limits, IOSObjectArray *formats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextChoiceFormat *create_JavaTextChoiceFormat_initWithDoubleArray_withNSStringArray_(IOSDoubleArray *limits, IOSObjectArray *formats);

FOUNDATION_EXPORT void JavaTextChoiceFormat_initWithNSString_(JavaTextChoiceFormat *self, NSString *template_);

FOUNDATION_EXPORT JavaTextChoiceFormat *new_JavaTextChoiceFormat_initWithNSString_(NSString *template_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextChoiceFormat *create_JavaTextChoiceFormat_initWithNSString_(NSString *template_);

FOUNDATION_EXPORT jdouble JavaTextChoiceFormat_nextDoubleWithDouble_(jdouble value);

FOUNDATION_EXPORT jdouble JavaTextChoiceFormat_nextDoubleWithDouble_withBoolean_(jdouble value, jboolean increment);

FOUNDATION_EXPORT jdouble JavaTextChoiceFormat_previousDoubleWithDouble_(jdouble value);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextChoiceFormat)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTextChoiceFormat")
