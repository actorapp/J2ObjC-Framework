//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/URLStreamHandler.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetURLStreamHandler")
#ifdef RESTRICT_JavaNetURLStreamHandler
#define INCLUDE_ALL_JavaNetURLStreamHandler 0
#else
#define INCLUDE_ALL_JavaNetURLStreamHandler 1
#endif
#undef RESTRICT_JavaNetURLStreamHandler

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNetURLStreamHandler_) && (INCLUDE_ALL_JavaNetURLStreamHandler || defined(INCLUDE_JavaNetURLStreamHandler))
#define JavaNetURLStreamHandler_

@class JavaNetInetAddress;
@class JavaNetProxy;
@class JavaNetURL;
@class JavaNetURLConnection;

/*!
 @brief The abstract class <code>URLStreamHandler</code> is the base for all classes which
 can handle the communication with a URL object over a particular protocol
 type.
 */
@interface JavaNetURLStreamHandler : NSObject

#pragma mark Public

- (instancetype)init;

#pragma mark Protected

/*!
 @brief Returns true if <code>a</code> and <code>b</code> have the same protocol, host,
 port, file, and reference.
 */
- (jboolean)equalsWithJavaNetURL:(JavaNetURL *)a
                  withJavaNetURL:(JavaNetURL *)b;

/*!
 @brief Returns the default port of the protocol used by the handled URL.
 The
 default implementation always returns <code>-1</code>.
 */
- (jint)getDefaultPort;

/*!
 @brief Returns the host address of <code>url</code>.
 */
- (JavaNetInetAddress *)getHostAddressWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Returns the hash code of <code>url</code>.
 */
- (jint)hashCodeWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Returns true if the hosts of <code>a</code> and <code>b</code> are equal.
 */
- (jboolean)hostsEqualWithJavaNetURL:(JavaNetURL *)a
                      withJavaNetURL:(JavaNetURL *)b;

/*!
 @brief Establishes a new connection to the resource specified by the URL <code>u</code>
 .
 Since different protocols also have unique ways of connecting, it
 must be overwritten by the subclass.
 @param u
 the URL to the resource where a connection has to be opened.
 @return the opened URLConnection to the specified resource.
 @throws IOException
 if an I/O error occurs during opening the connection.
 */
- (JavaNetURLConnection *)openConnectionWithJavaNetURL:(JavaNetURL *)u;

/*!
 @brief Establishes a new connection to the resource specified by the URL <code>u</code>
  using the given <code>proxy</code>.
 Since different protocols also have
 unique ways of connecting, it must be overwritten by the subclass.
 @param u
 the URL to the resource where a connection has to be opened.
 @param proxy
 the proxy that is used to make the connection.
 @return the opened URLConnection to the specified resource.
 @throws IOException
 if an I/O error occurs during opening the connection.
 @throws IllegalArgumentException
 if any argument is <code>null</code> or the type of proxy is
 wrong.
 @throws UnsupportedOperationException
 if the protocol handler doesn't support this method.
 */
- (JavaNetURLConnection *)openConnectionWithJavaNetURL:(JavaNetURL *)u
                                      withJavaNetProxy:(JavaNetProxy *)proxy;

/*!
 @brief Parses the clear text URL in <code>str</code> into a URL object.
 URL strings
 generally have the following format:
 <p>
 http://www.company.com/java/file1.java#reference
 <p>
 The string is parsed in HTTP format. If the protocol has a different URL
 format this method must be overridden.
 @param url
 the URL to fill in the parsed clear text URL parts.
 @param spec
 the URL string that is to be parsed.
 @param start
 the string position from where to begin parsing.
 @param end
 the string position to stop parsing.
 - seealso: #toExternalForm
 - seealso: URL
 */
- (void)parseURLWithJavaNetURL:(JavaNetURL *)url
                  withNSString:(NSString *)spec
                       withInt:(jint)start
                       withInt:(jint)end;

/*!
 @brief Returns true if <code>a</code> and <code>b</code> have the same protocol, host,
 port and file.
 */
- (jboolean)sameFileWithJavaNetURL:(JavaNetURL *)a
                    withJavaNetURL:(JavaNetURL *)b;

/*!
 @brief Sets the fields of the URL <code>u</code> to the values of the supplied
 arguments.
 @param u
 the non-null URL object to be set.
 @param protocol
 the protocol.
 @param host
 the host name.
 @param port
 the port number.
 @param file
 the file component.
 @param ref
 the reference.
 */
- (void)setURLWithJavaNetURL:(JavaNetURL *)u
                withNSString:(NSString *)protocol
                withNSString:(NSString *)host
                     withInt:(jint)port
                withNSString:(NSString *)file
                withNSString:(NSString *)ref __attribute__((deprecated));

/*!
 @brief Sets the fields of the URL <code>u</code> to the values of the supplied
 arguments.
 */
- (void)setURLWithJavaNetURL:(JavaNetURL *)u
                withNSString:(NSString *)protocol
                withNSString:(NSString *)host
                     withInt:(jint)port
                withNSString:(NSString *)authority
                withNSString:(NSString *)userInfo
                withNSString:(NSString *)path
                withNSString:(NSString *)query
                withNSString:(NSString *)ref;

/*!
 @brief Returns the clear text representation of a given URL using HTTP format.
 @param url
 the URL object to be converted.
 @return the clear text representation of the specified URL.
 - seealso: #parseURL
 - seealso: URL#toExternalForm()
 */
- (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url;

#pragma mark Package-Private

- (NSString *)toExternalFormWithJavaNetURL:(JavaNetURL *)url
                               withBoolean:(jboolean)escapeIllegalCharacters;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetURLStreamHandler)

FOUNDATION_EXPORT void JavaNetURLStreamHandler_init(JavaNetURLStreamHandler *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetURLStreamHandler)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetURLStreamHandler")
