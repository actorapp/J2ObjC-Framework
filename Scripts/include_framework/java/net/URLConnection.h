//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/net/URLConnection.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetURLConnection")
#ifdef RESTRICT_JavaNetURLConnection
#define INCLUDE_ALL_JavaNetURLConnection 0
#else
#define INCLUDE_ALL_JavaNetURLConnection 1
#endif
#undef RESTRICT_JavaNetURLConnection

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNetURLConnection_) && (INCLUDE_ALL_JavaNetURLConnection || defined(INCLUDE_JavaNetURLConnection))
#define JavaNetURLConnection_

@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaNetContentHandler;
@class JavaNetURL;
@class JavaSecurityPermission;
@class JavaUtilHashtable;
@protocol JavaNetContentHandlerFactory;
@protocol JavaNetFileNameMap;
@protocol JavaUtilMap;

/*!
 @brief A connection to a URL for reading or writing.
 For HTTP connections, see
 <code>HttpURLConnection</code> for documentation of HTTP-specific features.
 <p>For example, to retrieve <code>ftp://mirror.csclub.uwaterloo.ca/index.html</code>
 : 
@code
     URL url = new URL("ftp://mirror.csclub.uwaterloo.ca/index.html");
   URLConnection urlConnection = url.openConnection();
   InputStream in = new BufferedInputStream(urlConnection.getInputStream());
   try 
     readStream(in);
   } finally {
     in.close();
   }
  
@endcode
 <p><code>URLConnection</code> must be configured before it has connected to the
 remote resource. Instances of <code>URLConnection</code> are not reusable: you
 must use a different instance for each connection to a resource.
 <h3>Timeouts</h3>
 <code>URLConnection</code> supports two timeouts: a <code>connect timeout</code>
  and a <code>read timeout</code>. By default,
 operations never time out.
 <h3>Built-in Protocols</h3>
 <ul>
 <li><strong>File</strong><br>
 Resources from the local file system can be loaded using <code>file:</code>
 URIs. File connections can only be used for input.
 <li><strong>FTP</strong><br>
 File Transfer Protocol (<a href="http://www.ietf.org/rfc/rfc959.txt">RFC 959</a>)
 is supported, but with no public subclass. FTP connections can
 be used for input or output but not both.
 <p>By default, FTP connections will be made using <code>anonymous</code> as
 the username and the empty string as the password. Specify alternate
 usernames and passwords in the URL: <code>ftp://username:password@@host/path</code>
 .
 <li><strong>HTTP and HTTPS</strong><br>
 Refer to the <code>HttpURLConnection</code> and <code>HttpsURLConnection</code>
  subclasses.
 </ul>
 <h3>Registering Additional Protocols</h3>
 Use <code>URL.setURLStreamHandlerFactory</code> to register handlers for other
 protocol types.
 */
@interface JavaNetURLConnection : NSObject {
 @public
  /*!
   @brief The URL which represents the remote target of this <code>URLConnection</code>.
   */
  JavaNetURL *url_;
  JavaNetContentHandler *defaultHandler_;
  /*!
   @brief The data must be modified more recently than this time in milliseconds
 since January 1, 1970, GMT to be transmitted.
   */
  jlong ifModifiedSince_;
  /*!
   @brief Specifies whether the using of caches is enabled or the data has to be
 recent for every request.
   */
  jboolean useCaches_;
  /*!
   @brief Specifies whether this <code>URLConnection</code> is already connected to the
 remote resource.
   If this field is set to <code>true</code> the flags for
 setting up the connection are not changeable anymore.
   */
  jboolean connected_;
  /*!
   @brief Specifies whether this <code>URLConnection</code> allows sending data.
   */
  jboolean doOutput_;
  /*!
   @brief Specifies whether this <code>URLConnection</code> allows receiving data.
   */
  jboolean doInput_;
  /*!
   @brief Unused by Android.
   This field can be accessed via <code>getAllowUserInteraction</code>
 and <code>setAllowUserInteraction</code>.
   */
  jboolean allowUserInteraction_;
}

+ (JavaUtilHashtable *)contentHandlers;

+ (void)setContentHandlers:(JavaUtilHashtable *)value;

#pragma mark Public

/*!
 @brief Adds the given property to the request header.
 Existing properties with
 the same name will not be overwritten by this method.
 @param field
 the request property field name to add.
 @param newValue
 the value of the property which is to add.
 @throws IllegalStateException
 if the connection has been already established.
 @throws NullPointerException
 if the property name is <code>null</code>.
 @since 1.4
 */
- (void)addRequestPropertyWithNSString:(NSString *)field
                          withNSString:(NSString *)newValue;

/*!
 @brief Opens a connection to the resource.
 This method will <strong>not</strong>
 reconnect to a resource after the initial connection has been closed.
 @throws IOException
 if an error occurs while connecting to the resource.
 */
- (void)connect;

/*!
 @brief Returns <code>allowUserInteraction</code>.
 Unused by Android.
 */
- (jboolean)getAllowUserInteraction;

/*!
 @brief Returns the connect timeout in milliseconds.
 (See {#setConnectTimeout}.)
 */
- (jint)getConnectTimeout;

/*!
 @brief Returns an object representing the content of the resource this <code>URLConnection</code>
  is connected to.
 First, it attempts to get the content
 type from the method <code>getContentType()</code> which looks at the response
 header field "Content-Type". If none is found it will guess the content
 type from the filename extension. If that fails the stream itself will be
 used to guess the content type.
 @return the content representing object.
 @throws IOException
 if an error occurs obtaining the content.
 */
- (id)getContent;

/*!
 @brief Returns an object representing the content of the resource this <code>URLConnection</code>
  is connected to.
 First, it attempts to get the content
 type from the method <code>getContentType()</code> which looks at the response
 header field "Content-Type". If none is found it will guess the content
 type from the filename extension. If that fails the stream itself will be
 used to guess the content type. The content type must match with one of
 the list <code>types</code>.
 @param types
 the list of acceptable content types.
 @return the content representing object or <code>null</code> if the content
 type does not match with one of the specified types.
 @throws IOException
 if an error occurs obtaining the content.
 */
- (id)getContentWithIOSClassArray:(IOSObjectArray *)types;

/*!
 @brief Returns the content encoding type specified by the response header field
 <code>content-encoding</code> or <code>null</code> if this field is not set.
 @return the value of the response header field <code>content-encoding</code>.
 */
- (NSString *)getContentEncoding;

/*!
 @brief Returns the content length in bytes specified by the response header field
 <code>content-length</code> or <code>-1</code> if this field is not set or cannot be represented as an
 <code>int</code>.
 */
- (jint)getContentLength;

/*!
 @brief Returns the content length in bytes specified by the response header field
 <code>content-length</code> or <code>-1</code> if this field is not set.
 @since 1.7
  Until ready for a public API change
 */
- (jlong)getContentLengthLong;

/*!
 @brief Returns the MIME-type of the content specified by the response header field
 <code>content-type</code> or <code>null</code> if type is unknown.
 @return the value of the response header field <code>content-type</code>.
 */
- (NSString *)getContentType;

/*!
 @brief Returns the timestamp when this response has been sent as a date in
 milliseconds since January 1, 1970 GMT or <code>0</code> if this timestamp is
 unknown.
 @return the sending timestamp of the current response.
 */
- (jlong)getDate;

/*!
 @brief Returns the default value of <code>allowUserInteraction</code>.
 Unused by Android.
 */
+ (jboolean)getDefaultAllowUserInteraction;

/*!
 @brief Returns null.
 */
+ (NSString *)getDefaultRequestPropertyWithNSString:(NSString *)field __attribute__((deprecated));

/*!
 @brief Returns the default setting whether this connection allows using caches.
 @return the value of the default setting <code>defaultUseCaches</code>.
 - seealso: #useCaches
 */
- (jboolean)getDefaultUseCaches;

/*!
 @brief Returns the value of the option <code>doInput</code> which specifies whether this
 connection allows to receive data.
 @return <code>true</code> if this connection allows input, <code>false</code>
 otherwise.
 - seealso: #doInput
 */
- (jboolean)getDoInput;

/*!
 @brief Returns the value of the option <code>doOutput</code> which specifies whether
 this connection allows to send data.
 @return <code>true</code> if this connection allows output, <code>false</code>
 otherwise.
 - seealso: #doOutput
 */
- (jboolean)getDoOutput;

/*!
 @brief Returns the timestamp when this response will be expired in milliseconds
 since January 1, 1970 GMT or <code>0</code> if this timestamp is unknown.
 @return the value of the response header field <code>expires</code>.
 */
- (jlong)getExpiration;

/*!
 @brief Returns the table which is used by all <code>URLConnection</code> instances to
 determine the MIME-type according to a file extension.
 @return the file name map to determine the MIME-type.
 */
+ (id<JavaNetFileNameMap>)getFileNameMap;

/*!
 @brief Returns the header value at the field position <code>pos</code> or <code>null</code>
 if the header has fewer than <code>pos</code> fields.
 The base
 implementation of this method returns always <code>null</code>.
 <p>Some implementations (notably <code>HttpURLConnection</code>) include a mapping
 for the null key; in HTTP's case, this maps to the HTTP status line and is
 treated as being at position 0 when indexing into the header fields.
 @param pos
 the field position of the response header.
 @return the value of the field at position <code>pos</code>.
 */
- (NSString *)getHeaderFieldWithInt:(jint)pos;

/*!
 @brief Returns the value of the header field specified by <code>key</code> or <code>null</code>
  if there is no field with this name.
 The base implementation of
 this method returns always <code>null</code>.
 <p>Some implementations (notably <code>HttpURLConnection</code>) include a mapping
 for the null key; in HTTP's case, this maps to the HTTP status line and is
 treated as being at position 0 when indexing into the header fields.
 @param key
 the name of the header field.
 @return the value of the header field.
 */
- (NSString *)getHeaderFieldWithNSString:(NSString *)key;

/*!
 @brief Returns the specified header value as a date in milliseconds since January
 1, 1970 GMT.
 Returns the <code>defaultValue</code> if no such header field
 could be found.
 @param field
 the header field name whose value is needed.
 @param defaultValue
 the default value if no field has been found.
 @return the value of the specified header field as a date in
 milliseconds.
 */
- (jlong)getHeaderFieldDateWithNSString:(NSString *)field
                               withLong:(jlong)defaultValue;

/*!
 @brief Returns the specified header value as a number.
 Returns the <code>defaultValue</code>
  if no such header field could be found or the value could
 not be parsed as an <code>int</code>.
 @param field
 the header field name whose value is needed.
 @param defaultValue
 the default value if no field has been found.
 @return the value of the specified header field as a number.
 */
- (jint)getHeaderFieldIntWithNSString:(NSString *)field
                              withInt:(jint)defaultValue;

/*!
 @brief Returns the name of the header field at the given position <code>posn</code> or
 <code>null</code> if there are fewer than <code>posn</code> fields.
 The base
 implementation of this method returns always <code>null</code>.
 <p>Some implementations (notably <code>HttpURLConnection</code>) include a mapping
 for the null key; in HTTP's case, this maps to the HTTP status line and is
 treated as being at position 0 when indexing into the header fields.
 @param posn
 the position of the header field which has to be returned.
 @return the header field name at the given position.
 */
- (NSString *)getHeaderFieldKeyWithInt:(jint)posn;

/*!
 @brief Returns the specified header value as a number.
 Returns the <code>defaultValue</code>
  if no such header field could be found or the value could
 not be parsed as a <code>long</code>.
 @param field
 the header field name whose value is needed.
 @param defaultValue
 the default value if no field has been found.
 @return the value of the specified header field as a number.
 @since 1.7
  Until ready for a public API change
 */
- (jlong)getHeaderFieldLongWithNSString:(NSString *)field
                               withLong:(jlong)defaultValue;

/*!
 @brief Returns an unmodifiable map of the response-header fields and values.
 The
 response-header field names are the key values of the map. The map values
 are lists of header field values associated with a particular key name.
 <p>Some implementations (notably <code>HttpURLConnection</code>) include a mapping
 for the null key; in HTTP's case, this maps to the HTTP status line and is
 treated as being at position 0 when indexing into the header fields.
 @return the response-header representing generic map.
 @since 1.4
 */
- (id<JavaUtilMap>)getHeaderFields;

/*!
 @brief Returns the point of time since when the data must be modified to be
 transmitted.
 Some protocols transmit data only if it has been modified
 more recently than a particular time.
 @return the time in milliseconds since January 1, 1970 GMT.
 - seealso: #ifModifiedSince
 */
- (jlong)getIfModifiedSince;

/*!
 @brief Returns an <code>InputStream</code> for reading data from the resource pointed by
 this <code>URLConnection</code>.
 It throws an UnknownServiceException by
 default. This method must be overridden by its subclasses.
 @return the InputStream to read data from.
 @throws IOException
 if no InputStream could be created.
 */
- (JavaIoInputStream *)getInputStream;

/*!
 @brief Returns the value of the response header field <code>last-modified</code> or
 <code>0</code> if this value is not set.
 @return the value of the <code>last-modified</code> header field.
 */
- (jlong)getLastModified;

/*!
 @brief Returns an <code>OutputStream</code> for writing data to this <code>URLConnection</code>
 .
 It throws an <code>UnknownServiceException</code> by default.
 This method must be overridden by its subclasses.
 @return the OutputStream to write data.
 @throws IOException
 if no OutputStream could be created.
 */
- (JavaIoOutputStream *)getOutputStream;

/*!
 @brief Returns a <code>Permission</code> object representing all needed permissions to
 open this connection.
 The returned permission object depends on the state
 of the connection and will be <code>null</code> if no permissions are
 necessary. By default, this method returns <code>AllPermission</code>.
 Subclasses should overwrite this method to return an appropriate
 permission object.
 @return the permission object representing the needed permissions to open
 this connection.
 @throws IOException
 if an I/O error occurs while creating the permission object.
 */
- (JavaSecurityPermission *)getPermission;

/*!
 @brief Returns the read timeout in milliseconds, or <code>0</code> if reads never
 timeout.
 */
- (jint)getReadTimeout;

/*!
 @brief Returns an unmodifiable map of general request properties used by this
 connection.
 The request property names are the key values of the map. The
 map values are lists of property values of the corresponding key name.
 @return the request-property representing generic map.
 @since 1.4
 */
- (id<JavaUtilMap>)getRequestProperties;

/*!
 @brief Returns the value of the request header property specified by {code field}
 or <code>null</code> if there is no field with this name.
 The base
 implementation of this method returns always <code>null</code>.
 @param field
 the name of the request header property.
 @return the value of the property.
 @throws IllegalStateException
 if the connection has been already established.
 */
- (NSString *)getRequestPropertyWithNSString:(NSString *)field;

/*!
 @brief Returns the URL represented by this <code>URLConnection</code>.
 @return the URL of this connection.
 */
- (JavaNetURL *)getURL;

/*!
 @brief Returns the value of the flag which specifies whether this <code>URLConnection</code>
  allows to use caches.
 @return <code>true</code> if using caches is allowed, <code>false</code> otherwise.
 */
- (jboolean)getUseCaches;

/*!
 @brief Determines the MIME-type of the given resource <code>url</code> by resolving
 the filename extension with the internal FileNameMap.
 Any fragment
 identifier is removed before processing.
 @param url
 the URL with the filename to get the MIME type.
 @return the guessed content type or <code>null</code> if the type could not be
 determined.
 */
+ (NSString *)guessContentTypeFromNameWithNSString:(NSString *)url;

/*!
 @brief Determines the MIME-type of the resource represented by the input stream
 <code>is</code> by reading its first few characters.
 @param is
 the resource representing input stream to determine the
 content type.
 @return the guessed content type or <code>null</code> if the type could not be
 determined.
 @throws IOException
 if an I/O error occurs while reading from the input stream.
 */
+ (NSString *)guessContentTypeFromStreamWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Sets <code>allowUserInteraction</code>.
 Unused by Android.
 */
- (void)setAllowUserInteractionWithBoolean:(jboolean)newValue;

/*!
 @brief Sets the maximum time in milliseconds to wait while connecting.
 Connecting to a server will fail with a <code>SocketTimeoutException</code> if
 the timeout elapses before a connection is established. The default value
 of <code>0</code> causes us to do a blocking connect. This does not mean we
 will never time out, but it probably means you'll get a TCP timeout
 after several minutes.
 <p><strong>Warning:</strong> if the hostname resolves to multiple IP
 addresses, this client will try each in <a
 href="http://www.ietf.org/rfc/rfc3484.txt">RFC 3484</a> order. If
 connecting to each of these addresses fails, multiple timeouts will
 elapse before the connect attempt throws an exception. Host names that
 support both IPv6 and IPv4 always have at least 2 IP addresses.
 @throws IllegalArgumentException if <code>timeoutMillis &lt; 0</code>.
 */
- (void)setConnectTimeoutWithInt:(jint)timeoutMillis;

/*!
 @brief Sets the internally used content handler factory.
 The content factory can
 only be set once during the lifetime of the application.
 @param contentFactory
 the content factory to be set.
 @throws Error
 if the factory has been already set.
 */
+ (void)setContentHandlerFactoryWithJavaNetContentHandlerFactory:(id<JavaNetContentHandlerFactory>)contentFactory;

/*!
 @brief Sets the default value for <code>allowUserInteraction</code>.
 Unused by Android.
 */
+ (void)setDefaultAllowUserInteractionWithBoolean:(jboolean)allows;

/*!
 @brief Does nothing.
 */
+ (void)setDefaultRequestPropertyWithNSString:(NSString *)field
                                 withNSString:(NSString *)value __attribute__((deprecated));

/*!
 @brief Sets the default value for the flag indicating whether this connection
 allows to use caches.
 Existing <code>URLConnection</code>s are unaffected.
 @param newValue
 the default value of the flag to be used for new connections.
 - seealso: #useCaches
 */
- (void)setDefaultUseCachesWithBoolean:(jboolean)newValue;

/*!
 @brief Sets the flag indicating whether this <code>URLConnection</code> allows input.
 It cannot be set after the connection is established.
 @param newValue
 the new value for the flag to be set.
 @throws IllegalAccessError
 if this method attempts to change the value after the
 connection has been already established.
 - seealso: #doInput
 */
- (void)setDoInputWithBoolean:(jboolean)newValue;

/*!
 @brief Sets the flag indicating whether this <code>URLConnection</code> allows
 output.
 It cannot be set after the connection is established.
 @param newValue
 the new value for the flag to be set.
 @throws IllegalAccessError
 if this method attempts to change the value after the
 connection has been already established.
 - seealso: #doOutput
 */
- (void)setDoOutputWithBoolean:(jboolean)newValue;

/*!
 @brief Sets the internal map which is used by all <code>URLConnection</code>
 instances to determine the MIME-type according to a filename extension.
 @param map
 the MIME table to be set.
 */
+ (void)setFileNameMapWithJavaNetFileNameMap:(id<JavaNetFileNameMap>)map;

/*!
 @brief Sets the point of time since when the data must be modified to be
 transmitted.
 Some protocols transmit data only if it has been modified
 more recently than a particular time. The data will be transmitted
 regardless of its timestamp if this option is set to <code>0</code>.
 @param newValue
 the time in milliseconds since January 1, 1970 GMT.
 @throws IllegalStateException
 if this <code>URLConnection</code> has already been connected.
 - seealso: #ifModifiedSince
 */
- (void)setIfModifiedSinceWithLong:(jlong)newValue;

/*!
 @brief Sets the maximum time to wait for an input stream read to complete before
 giving up.
 Reading will fail with a <code>SocketTimeoutException</code> if the
 timeout elapses before data becomes available. The default value of
 <code>0</code> disables read timeouts; read attempts will block indefinitely.
 @param timeoutMillis the read timeout in milliseconds. Non-negative.
 */
- (void)setReadTimeoutWithInt:(jint)timeoutMillis;

/*!
 @brief Sets the value of the specified request header field.
 The value will only
 be used by the current <code>URLConnection</code> instance. This method can
 only be called before the connection is established.
 @param field
 the request header field to be set.
 @param newValue
 the new value of the specified property.
 @throws IllegalStateException
 if the connection has been already established.
 @throws NullPointerException
 if the parameter <code>field</code> is <code>null</code>.
 */
- (void)setRequestPropertyWithNSString:(NSString *)field
                          withNSString:(NSString *)newValue;

/*!
 @brief Sets the flag indicating whether this connection allows to use caches or
 not.
 This method can only be called prior to the connection
 establishment.
 @param newValue
 the value of the flag to be set.
 @throws IllegalStateException
 if this method attempts to change the flag after the
 connection has been established.
 - seealso: #useCaches
 */
- (void)setUseCachesWithBoolean:(jboolean)newValue;

/*!
 @brief Returns the string representation containing the name of this class and
 the URL.
 @return the string representation of this <code>URLConnection</code> instance.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Creates a new <code>URLConnection</code> instance pointing to the resource
 specified by the given URL.
 @param url
 the URL which represents the resource this <code>URLConnection</code>
  will point to.
 */
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url;

@end

J2OBJC_STATIC_INIT(JavaNetURLConnection)

J2OBJC_FIELD_SETTER(JavaNetURLConnection, url_, JavaNetURL *)
J2OBJC_FIELD_SETTER(JavaNetURLConnection, defaultHandler_, JavaNetContentHandler *)

/*!
 @brief Cache for storing content handler
 */
inline JavaUtilHashtable *JavaNetURLConnection_get_contentHandlers();
inline JavaUtilHashtable *JavaNetURLConnection_set_contentHandlers(JavaUtilHashtable *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *JavaNetURLConnection_contentHandlers;
J2OBJC_STATIC_FIELD_OBJ(JavaNetURLConnection, contentHandlers, JavaUtilHashtable *)

FOUNDATION_EXPORT void JavaNetURLConnection_initWithJavaNetURL_(JavaNetURLConnection *self, JavaNetURL *url);

FOUNDATION_EXPORT jboolean JavaNetURLConnection_getDefaultAllowUserInteraction();

FOUNDATION_EXPORT NSString *JavaNetURLConnection_getDefaultRequestPropertyWithNSString_(NSString *field);

FOUNDATION_EXPORT id<JavaNetFileNameMap> JavaNetURLConnection_getFileNameMap();

FOUNDATION_EXPORT NSString *JavaNetURLConnection_guessContentTypeFromNameWithNSString_(NSString *url);

FOUNDATION_EXPORT NSString *JavaNetURLConnection_guessContentTypeFromStreamWithJavaIoInputStream_(JavaIoInputStream *is);

FOUNDATION_EXPORT void JavaNetURLConnection_setContentHandlerFactoryWithJavaNetContentHandlerFactory_(id<JavaNetContentHandlerFactory> contentFactory);

FOUNDATION_EXPORT void JavaNetURLConnection_setDefaultAllowUserInteractionWithBoolean_(jboolean allows);

FOUNDATION_EXPORT void JavaNetURLConnection_setDefaultRequestPropertyWithNSString_withNSString_(NSString *field, NSString *value);

FOUNDATION_EXPORT void JavaNetURLConnection_setFileNameMapWithJavaNetFileNameMap_(id<JavaNetFileNameMap> map);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetURLConnection)

#endif

#if !defined (JavaNetURLConnection_DefaultContentHandler_) && (INCLUDE_ALL_JavaNetURLConnection || defined(INCLUDE_JavaNetURLConnection_DefaultContentHandler))
#define JavaNetURLConnection_DefaultContentHandler_

#define RESTRICT_JavaNetContentHandler 1
#define INCLUDE_JavaNetContentHandler 1
#include "../../java/net/ContentHandler.h"

@class JavaNetURLConnection;

@interface JavaNetURLConnection_DefaultContentHandler : JavaNetContentHandler

#pragma mark Public

- (id)getContentWithJavaNetURLConnection:(JavaNetURLConnection *)u;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetURLConnection_DefaultContentHandler)

FOUNDATION_EXPORT void JavaNetURLConnection_DefaultContentHandler_init(JavaNetURLConnection_DefaultContentHandler *self);

FOUNDATION_EXPORT JavaNetURLConnection_DefaultContentHandler *new_JavaNetURLConnection_DefaultContentHandler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetURLConnection_DefaultContentHandler *create_JavaNetURLConnection_DefaultContentHandler_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaNetURLConnection_DefaultContentHandler)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetURLConnection")
