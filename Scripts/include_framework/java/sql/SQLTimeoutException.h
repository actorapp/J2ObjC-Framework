//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/SQLTimeoutException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLTimeoutException")
#ifdef RESTRICT_JavaSqlSQLTimeoutException
#define INCLUDE_ALL_JavaSqlSQLTimeoutException 0
#else
#define INCLUDE_ALL_JavaSqlSQLTimeoutException 1
#endif
#undef RESTRICT_JavaSqlSQLTimeoutException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSqlSQLTimeoutException_) && (INCLUDE_ALL_JavaSqlSQLTimeoutException || defined(INCLUDE_JavaSqlSQLTimeoutException))
#define JavaSqlSQLTimeoutException_

#define RESTRICT_JavaSqlSQLTransientException 1
#define INCLUDE_JavaSqlSQLTransientException 1
#include "../../java/sql/SQLTransientException.h"

/*!
 @brief <P>The subclass of <code>SQLException</code> thrown when the timeout specified by <code>Statement</code>
 has expired.
 <P> This exception does not correspond to a standard SQLState.
 @since 1.6
 */
@interface JavaSqlSQLTimeoutException : JavaSqlSQLTransientException

#pragma mark Public

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object.
 The <code>reason</code>, <code>SQLState</code> are initialized
 to <code>null</code> and the vendor code is initialized to 0.
 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the
 <code>Throwable.initCause(java.lang.Throwable)</code> method.
 <p>
 @since 1.6
 */
- (instancetype)init;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given <code>reason</code>.
 The <code>SQLState</code>
 is initialized to <code>null</code> and the vender code is initialized
 to 0.
 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the
 <code>Throwable.initCause(java.lang.Throwable)</code> method.
 <p>
 @param reason a description of the exception
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given <code>reason</code> and <code>SQLState</code>.
 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the
 <code>Throwable.initCause(java.lang.Throwable)</code> method. The vendor code
 is initialized to 0.
 <p>
 @param reason a description of the exception
 @param SQLState an XOPEN or SQL:2003 code identifying the exception
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given <code>reason</code>, <code>SQLState</code>  and
 <code>vendorCode</code>.
 The <code>cause</code> is not initialized, and may subsequently be
 initialized by a call to the
 <code>Throwable.initCause(java.lang.Throwable)</code> method.
 <p>
 @param reason a description of the exception
 @param SQLState an XOPEN or SQL:2003 code identifying the exception
 @param vendorCode a database vendor specific exception code
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState
                         withInt:(jint)vendorCode;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given
 <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code>
 and  <code>cause</code>.
 <p>
 @param reason a description of the exception
 @param SQLState an XOPEN or SQL:2003 code identifying the exception
 @param vendorCode a database vendor-specific exception code
 @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
 the cause is non-existent or unknown.
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState
                         withInt:(jint)vendorCode
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given
 <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.
 The vendor code is initialized to 0.
 <p>
 @param reason a description of the exception.
 @param SQLState an XOPEN or SQL:2003 code identifying the exception
 @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
 the cause is non-existent or unknown.
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                    withNSString:(NSString *)SQLState
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given
 <code>reason</code> and  <code>cause</code>.
 The <code>SQLState</code> is  initialized to <code>null</code>
 and the vendor code is initialized to 0.
 <p>
 @param reason a description of the exception.
 @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
 the cause is non-existent or unknown.
 @since 1.6
 */
- (instancetype)initWithNSString:(NSString *)reason
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a <code>SQLTimeoutException</code> object
 with a given  <code>cause</code>.
 The <code>SQLState</code> is initialized
 to <code>null</code> and the vendor code is initialized to 0.
 The <code>reason</code>  is initialized to <code>null</code> if
 <code>cause==null</code> or to <code>cause.toString()</code> if
 <code>cause!=null</code>.
 <p>
 @param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating
 the cause is non-existent or unknown.
 @since 1.6
 */
- (instancetype)initWithNSException:(NSException *)cause;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLTimeoutException)

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_init(JavaSqlSQLTimeoutException *self);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_init();

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_(JavaSqlSQLTimeoutException *self, NSString *reason);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_(NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_(NSString *reason);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_withNSString_(JavaSqlSQLTimeoutException *self, NSString *reason, NSString *SQLState);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_withNSString_(NSString *reason, NSString *SQLState) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_withNSString_(NSString *reason, NSString *SQLState);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_(JavaSqlSQLTimeoutException *self, NSString *reason, NSString *SQLState, jint vendorCode);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_(NSString *reason, NSString *SQLState, jint vendorCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_(NSString *reason, NSString *SQLState, jint vendorCode);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSException_(JavaSqlSQLTimeoutException *self, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_withNSException_(JavaSqlSQLTimeoutException *self, NSString *reason, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_withNSException_(NSString *reason, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_withNSException_(NSString *reason, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_withNSString_withNSException_(JavaSqlSQLTimeoutException *self, NSString *reason, NSString *SQLState, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *SQLState, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withNSException_(NSString *reason, NSString *SQLState, NSException *cause);

FOUNDATION_EXPORT void JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_withNSException_(JavaSqlSQLTimeoutException *self, NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause);

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *new_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlSQLTimeoutException *create_JavaSqlSQLTimeoutException_initWithNSString_withNSString_withInt_withNSException_(NSString *reason, NSString *SQLState, jint vendorCode, NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLTimeoutException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLTimeoutException")
