//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio_char/src/main/java/java/nio/charset/CharsetEncoder.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioCharsetCharsetEncoder")
#ifdef RESTRICT_JavaNioCharsetCharsetEncoder
#define INCLUDE_ALL_JavaNioCharsetCharsetEncoder 0
#else
#define INCLUDE_ALL_JavaNioCharsetCharsetEncoder 1
#endif
#undef RESTRICT_JavaNioCharsetCharsetEncoder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaNioCharsetCharsetEncoder_) && (INCLUDE_ALL_JavaNioCharsetCharsetEncoder || defined(INCLUDE_JavaNioCharsetCharsetEncoder))
#define JavaNioCharsetCharsetEncoder_

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaNioCharBuffer;
@class JavaNioCharsetCharset;
@class JavaNioCharsetCoderResult;
@class JavaNioCharsetCodingErrorAction;
@protocol JavaLangCharSequence;

/*!
 @brief A converter that can converts a 16-bit Unicode character sequence to a byte
 sequence in some charset.
 <p>
 The input character sequence is wrapped by a
 <code>CharBuffer</code> and the output character sequence is a
 <code>ByteBuffer</code>. An encoder instance should be used
 in the following sequence, which is referred to as a encoding operation:
 <ol>
 <li>invoking the <code>reset</code> method to reset the encoder if the
 encoder has been used;</li>
 <li>invoking the <code>encode</code>
 method until the additional input is not needed, the <code>endOfInput</code>
 parameter must be set to false, the input buffer must be filled and the
 output buffer must be flushed between invocations;</li>
 <li>invoking the <code>encode</code>
 method for the last time and the <code>endOfInput</code> parameter must be
 set to <code>true</code></li>
 <li>invoking the <code>flush</code> method to flush the
 output.</li>
 </ol>
 <p>
 The <code>encode</code> method will
 convert as many characters as possible, and the process won't stop until the
 input characters have run out, the output buffer has been filled or some
 error has happened. A <code>CoderResult</code> instance will be
 returned to indicate the stop reason, and the invoker can identify the result
 and choose further action, which includes filling the input buffer, flushing
 the output buffer or recovering from an error and trying again.
 <p>
 There are two common encoding errors. One is named malformed and it is
 returned when the input content is an illegal 16-bit Unicode character
 sequence, the other is named unmappable character and occurs when there is a
 problem mapping the input to a valid byte sequence in the specified charset.
 <p>
 Both errors can be handled in three ways, the default one is to report the
 error to the invoker by a <code>CoderResult</code> instance, and the
 alternatives are to ignore it or to replace the erroneous input with the
 replacement byte array. The replacement byte array is '<code>?</code>' by
 default and can be changed by invoking the
 <code>replaceWith</code> method. The invoker of this encoder
 can choose one way by specifying a
 <code>CodingErrorAction</code> instance for each error type via
 the <code>onMalformedInput</code> method and
 the <code>onUnmappableCharacter</code>
 method.
 <p>
 This class is abstract and encapsulates many common operations of the
 encoding process for all charsets. Encoders for a specific charset should
 extend this class and need only to implement the
 <code>encodeLoop</code> method for basic
 encoding. If a subclass maintains an internal state, it should override the
 <code>implFlush</code> method and the
 <code>implReset</code> method in addition.
 <p>
 This class is not thread-safe.
 - seealso: java.nio.charset.Charset
 - seealso: java.nio.charset.CharsetDecoder
 */
@interface JavaNioCharsetCharsetEncoder : NSObject

#pragma mark Public

/*!
 @brief Gets the average number of bytes created by this encoder for a single
 input character.
 @return the average number of bytes created by this encoder for a single
 input character.
 */
- (jfloat)averageBytesPerChar;

/*!
 @brief Checks if the given character can be encoded by this encoder.
 <p>
 Note that this method can change the internal status of this encoder, so
 it should not be called when another encoding process is ongoing,
 otherwise it will throw an <code>IllegalStateException</code>.
 <p>
 This method can be overridden for performance improvement.
 @param c
 the given encoder.
 @return true if given character can be encoded by this encoder.
 @throws IllegalStateException
 if another encode process is ongoing so that the current
 internal status is neither RESET or FLUSH.
 */
- (jboolean)canEncodeWithChar:(jchar)c;

/*!
 @brief Checks if a given <code>CharSequence</code> can be encoded by this
 encoder.
 Note that this method can change the internal status of this encoder, so
 it should not be called when another encode process is ongoing, otherwise
 it will throw an <code>IllegalStateException</code>.
 This method can be overridden for performance improvement.
 @param sequence
 the given <code>CharSequence</code>.
 @return true if the given <code>CharSequence</code> can be encoded by
 this encoder.
 @throws IllegalStateException
 if current internal status is neither RESET or FLUSH.
 */
- (jboolean)canEncodeWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

/*!
 @brief Gets the <code>Charset</code> which this encoder uses.
 @return the <code>Charset</code> which this encoder uses.
 */
- (JavaNioCharsetCharset *)charset;

/*!
 @brief This is a facade method for the encoding operation.
 <p>
 This method encodes the remaining character sequence of the given
 character buffer into a new byte buffer. This method performs a complete
 encoding operation, resets at first, then encodes, and flushes at last.
 <p>
 This method should not be invoked if another encode operation is ongoing.
 @param inArg
 the input buffer.
 @return a new <code>ByteBuffer</code> containing the bytes produced by
 this encoding operation. The buffer's limit will be the position
 of the last byte in the buffer, and the position will be zero.
 @throws IllegalStateException
 if another encoding operation is ongoing.
 @throws MalformedInputException
 if an illegal input character sequence for this charset is
 encountered, and the action for malformed error is
 <code>CodingErrorAction.REPORT</code>
 @throws UnmappableCharacterException
 if a legal but unmappable input character sequence for this
 charset is encountered, and the action for unmappable
 character error is
 <code>CodingErrorAction.REPORT</code>.
 Unmappable means the Unicode character sequence at the input
 buffer's current position cannot be mapped to a equivalent
 byte sequence.
 @throws CharacterCodingException
 if other exception happened during the encode operation.
 */
- (JavaNioByteBuffer *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg;

/*!
 @brief Encodes characters starting at the current position of the given input
 buffer, and writes the equivalent byte sequence into the given output
 buffer from its current position.
 <p>
 The buffers' position will be changed with the reading and writing
 operation, but their limits and marks will be kept intact.
 <p>
 A <code>CoderResult</code> instance will be returned according to
 following rules:
 <ul>
 <li>A <code>malformed input</code> result
 indicates that some malformed input error was encountered, and the
 erroneous characters start at the input buffer's position and their
 number can be got by result's <code>length</code>. This
 kind of result can be returned only if the malformed action is
 <code>CodingErrorAction.REPORT</code>.</li>
 <li><code>CoderResult.UNDERFLOW</code> indicates that
 as many characters as possible in the input buffer have been encoded. If
 there is no further input and no characters left in the input buffer then
 this task is complete. If this is not the case then the client should
 call this method again supplying some more input characters.</li>
 <li><code>CoderResult.OVERFLOW</code> indicates that the
 output buffer has been filled, while there are still some characters
 remaining in the input buffer. This method should be invoked again with a
 non-full output buffer.</li>
 <li>A <code>unmappable character</code>
 result indicates that some unmappable character error was encountered,
 and the erroneous characters start at the input buffer's position and
 their number can be got by result's <code>length</code>.
 This kind of result can be returned only on
 <code>CodingErrorAction.REPORT</code>.</li>
 </ul>
 <p>
 The <code>endOfInput</code> parameter indicates if the invoker can
 provider further input. This parameter is true if and only if the
 characters in the current input buffer are all inputs for this encoding
 operation. Note that it is common and won't cause an error if the invoker
 sets false and then has no more input available, while it may cause an
 error if the invoker always sets true in several consecutive invocations.
 This would make the remaining input to be treated as malformed input.
 input.
 <p>
 This method invokes the
 <code>encodeLoop</code> method to
 implement the basic encode logic for a specific charset.
 @param inArg
 the input buffer.
 @param outArg
 the output buffer.
 @param endOfInput
 true if all the input characters have been provided.
 @return a <code>CoderResult</code> instance indicating the result.
 @throws IllegalStateException
 if the encoding operation has already started or no more
 input is needed in this encoding process.
 @throws CoderMalfunctionError
 If the <code>encodeLoop</code>
 method threw an <code>BufferUnderflowException</code> or
 <code>BufferUnderflowException</code>.
 */
- (JavaNioCharsetCoderResult *)encodeWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg
                                     withJavaNioByteBuffer:(JavaNioByteBuffer *)outArg
                                               withBoolean:(jboolean)endOfInput;

/*!
 @brief Flushes this encoder.
 <p>
 This method will call <code>implFlush</code>. Some
 encoders may need to write some bytes to the output buffer when they have
 read all input characters, subclasses can overridden
 <code>implFlush</code> to perform writing action.
 <p>
 The maximum number of written bytes won't larger than
 <code>out.remaining()</code>. If some encoder wants to
 write more bytes than the output buffer's available remaining space, then
 <code>CoderResult.OVERFLOW</code> will be returned, and this method
 must be called again with a byte buffer that has free space. Otherwise
 this method will return <code>CoderResult.UNDERFLOW</code>, which
 means one encoding process has been completed successfully.
 <p>
 During the flush, the output buffer's position will be changed
 accordingly, while its mark and limit will be intact.
 @param outArg
 the given output buffer.
 @return <code>CoderResult.UNDERFLOW</code> or
 <code>CoderResult.OVERFLOW</code>.
 @throws IllegalStateException
 if this encoder hasn't read all input characters during one
 encoding process, which means neither after calling
 <code>encode(CharBuffer)</code> nor after
 calling <code>encode(CharBuffer, ByteBuffer, boolean)</code>
  with <code>true</code>
 for the last boolean parameter.
 */
- (JavaNioCharsetCoderResult *)flushWithJavaNioByteBuffer:(JavaNioByteBuffer *)outArg;

/*!
 @brief Checks if the given argument is legal as this encoder's replacement byte
 array.
 The given byte array is legal if and only if it can be decode into
 sixteen bits Unicode characters.
 This method can be overridden for performance improvement.
 @param repl
 the given byte array to be checked.
 @return true if the the given argument is legal as this encoder's
 replacement byte array.
 */
- (jboolean)isLegalReplacementWithByteArray:(IOSByteArray *)repl;

/*!
 @brief Gets this encoder's <code>CodingErrorAction</code> when a malformed
 input error occurred during the encoding process.
 @return this encoder's <code>CodingErrorAction</code> when a malformed
 input error occurred during the encoding process.
 */
- (JavaNioCharsetCodingErrorAction *)malformedInputAction;

/*!
 @brief Gets the maximum number of bytes which can be created by this encoder for
 one input character, must be positive.
 @return the maximum number of bytes which can be created by this encoder
 for one input character, must be positive.
 */
- (jfloat)maxBytesPerChar;

/*!
 @brief Sets this encoder's action on malformed input error.
 This method will call the
 <code>implOnMalformedInput</code>
 method with the given new action as argument.
 @param newAction
 the new action on malformed input error.
 @return this encoder.
 @throws IllegalArgumentException
 if the given newAction is null.
 */
- (JavaNioCharsetCharsetEncoder *)onMalformedInputWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction;

/*!
 @brief Sets this encoder's action on unmappable character error.
 This method will call the
 <code>implOnUnmappableCharacter</code>
 method with the given new action as argument.
 @param newAction
 the new action on unmappable character error.
 @return this encoder.
 @throws IllegalArgumentException
 if the given newAction is null.
 */
- (JavaNioCharsetCharsetEncoder *)onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction;

/*!
 @brief Gets the replacement byte array, which is never null or empty.
 @return the replacement byte array, cannot be null or empty.
 */
- (IOSByteArray *)replacement;

/*!
 @brief Sets the new replacement value.
 This method first checks the given replacement's validity, then changes
 the replacement value and finally calls the
 <code>implReplaceWith</code> method with the given
 new replacement as argument.
 @param replacement
 the replacement byte array, cannot be null or empty, its
 length cannot be larger than <code>maxBytesPerChar</code>,
 and it must be legal replacement, which can be justified by
 calling <code>isLegalReplacement(byte[] repl)</code>.
 @return this encoder.
 @throws IllegalArgumentException
 if the given replacement cannot satisfy the requirement
 mentioned above.
 */
- (JavaNioCharsetCharsetEncoder *)replaceWithWithByteArray:(IOSByteArray *)replacement;

/*!
 @brief Resets this encoder.
 This method will reset the internal status and then
 calla <code>implReset()</code> to reset any status related to the
 specific charset.
 @return this encoder.
 */
- (JavaNioCharsetCharsetEncoder *)reset;

/*!
 @brief Gets this encoder's <code>CodingErrorAction</code> when unmappable
 character occurred during encoding process.
 @return this encoder's <code>CodingErrorAction</code> when unmappable
 character occurred during encoding process.
 */
- (JavaNioCharsetCodingErrorAction *)unmappableCharacterAction;

#pragma mark Protected

/*!
 @brief Constructs a new <code>CharsetEncoder</code> using the given
 <code>Charset</code>, average number and maximum number of bytes
 created by this encoder for one input character.
 @param cs
 the <code>Charset</code> to be used by this encoder.
 @param averageBytesPerChar
 average number of bytes created by this encoder for one input
 character, must be positive.
 @param maxBytesPerChar
 maximum number of bytes which can be created by this encoder
 for one input character, must be positive.
 @throws IllegalArgumentException
 if <code>maxBytesPerChar</code> or
 <code>averageBytesPerChar</code> is negative.
 */
- (instancetype)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs
                                    withFloat:(jfloat)averageBytesPerChar
                                    withFloat:(jfloat)maxBytesPerChar;

/*!
 @brief Constructs a new <code>CharsetEncoder</code> using the given
 <code>Charset</code>, replacement byte array, average number and
 maximum number of bytes created by this encoder for one input character.
 @param cs
 the <code>Charset</code> to be used by this encoder.
 @param averageBytesPerChar
 average number of bytes created by this encoder for one single
 input character, must be positive.
 @param maxBytesPerChar
 maximum number of bytes which can be created by this encoder
 for one single input character, must be positive.
 @param replacement
 the replacement byte array, cannot be null or empty, its
 length cannot be larger than <code>maxBytesPerChar</code>,
 and must be a legal replacement, which can be justified by
 <code>isLegalReplacement</code>.
 @throws IllegalArgumentException
 if any parameters are invalid.
 */
- (instancetype)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs
                                    withFloat:(jfloat)averageBytesPerChar
                                    withFloat:(jfloat)maxBytesPerChar
                                withByteArray:(IOSByteArray *)replacement;

/*!
 @brief Encodes characters into bytes.
 This method is called by
 <code>encode</code>.
 <p>
 This method will implement the essential encoding operation, and it won't
 stop encoding until either all the input characters are read, the output
 buffer is filled, or some exception is encountered. Then it will
 return a <code>CoderResult</code> object indicating the result of the
 current encoding operation. The rule to construct the
 <code>CoderResult</code> is the same as for
 <code>encode</code>. When an
 exception is encountered in the encoding operation, most implementations
 of this method will return a relevant result object to the
 <code>encode</code> method, and some
 performance optimized implementation may handle the exception and
 implement the error action itself.
 <p>
 The buffers are scanned from their current positions, and their positions
 will be modified accordingly, while their marks and limits will be
 intact. At most <code>in.remaining()</code> characters
 will be read, and <code>out.remaining()</code> bytes
 will be written.
 <p>
 Note that some implementations may pre-scan the input buffer and return
 <code>CoderResult.UNDERFLOW</code> until it receives sufficient input.
 <p>
 @param inArg
 the input buffer.
 @param outArg
 the output buffer.
 @return a <code>CoderResult</code> instance indicating the result.
 */
- (JavaNioCharsetCoderResult *)encodeLoopWithJavaNioCharBuffer:(JavaNioCharBuffer *)inArg
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)outArg;

/*!
 @brief Flushes this encoder.
 The default implementation does nothing and always
 returns <code>CoderResult.UNDERFLOW</code>; this method can be
 overridden if needed.
 @param outArg
 the output buffer.
 @return <code>CoderResult.UNDERFLOW</code> or
 <code>CoderResult.OVERFLOW</code>.
 */
- (JavaNioCharsetCoderResult *)implFlushWithJavaNioByteBuffer:(JavaNioByteBuffer *)outArg;

/*!
 @brief Notifies that this encoder's <code>CodingErrorAction</code> specified
 for malformed input error has been changed.
 The default implementation
 does nothing; this method can be overridden if needed.
 @param newAction
 the new action.
 */
- (void)implOnMalformedInputWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction;

/*!
 @brief Notifies that this encoder's <code>CodingErrorAction</code> specified
 for unmappable character error has been changed.
 The default
 implementation does nothing; this method can be overridden if needed.
 @param newAction
 the new action.
 */
- (void)implOnUnmappableCharacterWithJavaNioCharsetCodingErrorAction:(JavaNioCharsetCodingErrorAction *)newAction;

/*!
 @brief Notifies that this encoder's replacement has been changed.
 The default
 implementation does nothing; this method can be overridden if needed.
 @param newReplacement
 the new replacement string.
 */
- (void)implReplaceWithWithByteArray:(IOSByteArray *)newReplacement;

/*!
 @brief Resets this encoder's charset related state.
 The default implementation
 does nothing; this method can be overridden if needed.
 */
- (void)implReset;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioCharsetCharsetEncoder)

FOUNDATION_EXPORT void JavaNioCharsetCharsetEncoder_initWithJavaNioCharsetCharset_withFloat_withFloat_(JavaNioCharsetCharsetEncoder *self, JavaNioCharsetCharset *cs, jfloat averageBytesPerChar, jfloat maxBytesPerChar);

FOUNDATION_EXPORT void JavaNioCharsetCharsetEncoder_initWithJavaNioCharsetCharset_withFloat_withFloat_withByteArray_(JavaNioCharsetCharsetEncoder *self, JavaNioCharsetCharset *cs, jfloat averageBytesPerChar, jfloat maxBytesPerChar, IOSByteArray *replacement);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioCharsetCharsetEncoder)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioCharsetCharsetEncoder")
