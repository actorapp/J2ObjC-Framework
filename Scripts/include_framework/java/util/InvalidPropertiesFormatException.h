//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/InvalidPropertiesFormatException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilInvalidPropertiesFormatException")
#ifdef RESTRICT_JavaUtilInvalidPropertiesFormatException
#define INCLUDE_ALL_JavaUtilInvalidPropertiesFormatException 0
#else
#define INCLUDE_ALL_JavaUtilInvalidPropertiesFormatException 1
#endif
#undef RESTRICT_JavaUtilInvalidPropertiesFormatException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilInvalidPropertiesFormatException_) && (INCLUDE_ALL_JavaUtilInvalidPropertiesFormatException || defined(INCLUDE_JavaUtilInvalidPropertiesFormatException))
#define JavaUtilInvalidPropertiesFormatException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "../../java/io/IOException.h"

/*!
 @brief Thrown to indicate that an operation could not complete because
 the input did not conform to the appropriate XML document type
 for a collection of properties, as per the <code>Properties</code>
 specification.
 <p>
 Note, that although InvalidPropertiesFormatException inherits Serializable
 interface from Exception, it is not intended to be Serializable. Appropriate
 serialization methods are implemented to throw NotSerializableException.
 - seealso: Properties
 @since 1.5
  exclude
 */
@interface JavaUtilInvalidPropertiesFormatException : JavaIoIOException

#pragma mark Public

/*!
 @brief Constructs an InvalidPropertiesFormatException with the specified
 detail message.
 @param message   the detail message. The detail message is saved for
 later retrieval by the <code>Throwable.getMessage()</code> method.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Constructs an InvalidPropertiesFormatException with the specified
 cause.
 @param cause the cause (which is saved for later retrieval by the
 <code>Throwable.getCause()</code> method).
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilInvalidPropertiesFormatException)

FOUNDATION_EXPORT void JavaUtilInvalidPropertiesFormatException_initWithNSException_(JavaUtilInvalidPropertiesFormatException *self, NSException *cause);

FOUNDATION_EXPORT JavaUtilInvalidPropertiesFormatException *new_JavaUtilInvalidPropertiesFormatException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilInvalidPropertiesFormatException *create_JavaUtilInvalidPropertiesFormatException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaUtilInvalidPropertiesFormatException_initWithNSString_(JavaUtilInvalidPropertiesFormatException *self, NSString *message);

FOUNDATION_EXPORT JavaUtilInvalidPropertiesFormatException *new_JavaUtilInvalidPropertiesFormatException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilInvalidPropertiesFormatException *create_JavaUtilInvalidPropertiesFormatException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilInvalidPropertiesFormatException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilInvalidPropertiesFormatException")
