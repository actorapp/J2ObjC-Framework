//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/concurrent/atomic/AtomicIntegerArray.java
//

#include "../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicIntegerArray")
#ifdef RESTRICT_JavaUtilConcurrentAtomicAtomicIntegerArray
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicIntegerArray 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicIntegerArray 1
#endif
#undef RESTRICT_JavaUtilConcurrentAtomicAtomicIntegerArray

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilConcurrentAtomicAtomicIntegerArray_) && (INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicIntegerArray || defined(INCLUDE_JavaUtilConcurrentAtomicAtomicIntegerArray))
#define JavaUtilConcurrentAtomicAtomicIntegerArray_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../../../java/io/Serializable.h"

@class IOSIntArray;

/*!
 @brief An <code>int</code> array in which elements may be updated atomically.
 See the <code>java.util.concurrent.atomic</code> package
 specification for description of the properties of atomic
 variables.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentAtomicAtomicIntegerArray : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates a new AtomicIntegerArray of the given length, with all
 elements initially zero.
 @param length the length of the array
 */
- (instancetype)initWithInt:(jint)length;

/*!
 @brief Creates a new AtomicIntegerArray with the same length as, and
 all elements copied from, the given array.
 @param array the array to copy elements from
 @throws NullPointerException if array is null
 */
- (instancetype)initWithIntArray:(IOSIntArray *)array;

/*!
 @brief Atomically adds the given value to the element at index <code>i</code>.
 @param i the index
 @param delta the value to add
 @return the updated value
 */
- (jint)addAndGetWithInt:(jint)i
                 withInt:(jint)delta;

/*!
 @brief Atomically sets the element at position <code>i</code> to the given
 updated value if the current value <code>==</code> the expected value.
 @param i the index
 @param expect the expected value
 @param update the new value
 @return true if successful. False return indicates that
 the actual value was not equal to the expected value.
 */
- (jboolean)compareAndSetWithInt:(jint)i
                         withInt:(jint)expect
                         withInt:(jint)update;

/*!
 @brief Atomically decrements by one the element at index <code>i</code>.
 @param i the index
 @return the updated value
 */
- (jint)decrementAndGetWithInt:(jint)i;

/*!
 @brief Gets the current value at position <code>i</code>.
 @param i the index
 @return the current value
 */
- (jint)getWithInt:(jint)i;

/*!
 @brief Atomically adds the given value to the element at index <code>i</code>.
 @param i the index
 @param delta the value to add
 @return the previous value
 */
- (jint)getAndAddWithInt:(jint)i
                 withInt:(jint)delta;

/*!
 @brief Atomically decrements by one the element at index <code>i</code>.
 @param i the index
 @return the previous value
 */
- (jint)getAndDecrementWithInt:(jint)i;

/*!
 @brief Atomically increments by one the element at index <code>i</code>.
 @param i the index
 @return the previous value
 */
- (jint)getAndIncrementWithInt:(jint)i;

/*!
 @brief Atomically sets the element at position <code>i</code> to the given
 value and returns the old value.
 @param i the index
 @param newValue the new value
 @return the previous value
 */
- (jint)getAndSetWithInt:(jint)i
                 withInt:(jint)newValue;

/*!
 @brief Atomically increments by one the element at index <code>i</code>.
 @param i the index
 @return the updated value
 */
- (jint)incrementAndGetWithInt:(jint)i;

/*!
 @brief Eventually sets the element at position <code>i</code> to the given value.
 @param i the index
 @param newValue the new value
 @since 1.6
 */
- (void)lazySetWithInt:(jint)i
               withInt:(jint)newValue;

/*!
 @brief Returns the length of the array.
 @return the length of the array
 */
- (jint)length;

/*!
 @brief Sets the element at position <code>i</code> to the given value.
 @param i the index
 @param newValue the new value
 */
- (void)setWithInt:(jint)i
           withInt:(jint)newValue;

/*!
 @brief Returns the String representation of the current values of array.
 @return the String representation of the current values of array
 */
- (NSString *)description;

/*!
 @brief Atomically sets the element at position <code>i</code> to the given
 updated value if the current value <code>==</code> the expected value.
 <p><a href="package-summary.html#weakCompareAndSet">May fail
 spuriously and does not provide ordering guarantees</a>, so is
 only rarely an appropriate alternative to <code>compareAndSet</code>.
 @param i the index
 @param expect the expected value
 @param update the new value
 @return true if successful
 */
- (jboolean)weakCompareAndSetWithInt:(jint)i
                             withInt:(jint)expect
                             withInt:(jint)update;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentAtomicAtomicIntegerArray)

FOUNDATION_EXPORT void JavaUtilConcurrentAtomicAtomicIntegerArray_initWithInt_(JavaUtilConcurrentAtomicAtomicIntegerArray *self, jint length);

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerArray *new_JavaUtilConcurrentAtomicAtomicIntegerArray_initWithInt_(jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerArray *create_JavaUtilConcurrentAtomicAtomicIntegerArray_initWithInt_(jint length);

FOUNDATION_EXPORT void JavaUtilConcurrentAtomicAtomicIntegerArray_initWithIntArray_(JavaUtilConcurrentAtomicAtomicIntegerArray *self, IOSIntArray *array);

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerArray *new_JavaUtilConcurrentAtomicAtomicIntegerArray_initWithIntArray_(IOSIntArray *array) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicIntegerArray *create_JavaUtilConcurrentAtomicAtomicIntegerArray_initWithIntArray_(IOSIntArray *array);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentAtomicAtomicIntegerArray)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicIntegerArray")
