//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/IntSummaryStatistics.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilIntSummaryStatistics")
#ifdef RESTRICT_JavaUtilIntSummaryStatistics
#define INCLUDE_ALL_JavaUtilIntSummaryStatistics 0
#else
#define INCLUDE_ALL_JavaUtilIntSummaryStatistics 1
#endif
#undef RESTRICT_JavaUtilIntSummaryStatistics

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilIntSummaryStatistics_) && (INCLUDE_ALL_JavaUtilIntSummaryStatistics || defined(INCLUDE_JavaUtilIntSummaryStatistics))
#define JavaUtilIntSummaryStatistics_

#define RESTRICT_JavaUtilFunctionIntConsumer 1
#define INCLUDE_JavaUtilFunctionIntConsumer 1
#include "../../java/util/function/IntConsumer.h"

/*!
 @brief A state object for collecting statistics such as count, min, max, sum, and
 average.
 <p>This class is designed to work with (though does not require)
 streams. For example, you can compute
 summary statistics on a stream of ints with:
 @code
  IntSummaryStatistics stats = intStream.collect(IntSummaryStatistics::new,
                                                IntSummaryStatistics::accept,
                                                IntSummaryStatistics::combine);
 
@endcode
 <p><code>IntSummaryStatistics</code> can be used as a
 reduction
 target for a stream. For example:
 @code
  IntSummaryStatistics stats = people.stream()
                                    .collect(Collectors.summarizingInt(Person::getDependents));
 
@endcode
 This computes, in a single pass, the count of people, as well as the minimum,
 maximum, sum, and average of their number of dependents.
  This implementation is not thread safe. However, it is safe to use
 <code>Collectors.toIntStatistics()</code>
  on a parallel stream, because the parallel
 implementation of <code>Stream.collect()</code>
 provides the necessary partitioning, isolation, and merging of results for
 safe and efficient parallel execution.
 <p>This implementation does not check for overflow of the sum.
 @since 1.8
 */
@interface JavaUtilIntSummaryStatistics : NSObject < JavaUtilFunctionIntConsumer >

#pragma mark Public

/*!
 @brief Construct an empty instance with zero count, zero sum,
 <code>Integer.MAX_VALUE</code> min, <code>Integer.MIN_VALUE</code> max and zero
 average.
 */
- (instancetype)init;

/*!
 @brief Records a new value into the summary information
 @param value the input value
 */
- (void)acceptWithInt:(jint)value;

/*!
 @brief Combines the state of another <code>IntSummaryStatistics</code> into this one.
 @param other another <code>IntSummaryStatistics</code>
 @throws NullPointerException if <code>other</code> is null
 */
- (void)combineWithJavaUtilIntSummaryStatistics:(JavaUtilIntSummaryStatistics *)other;

/*!
 @brief Returns the arithmetic mean of values recorded, or zero if no values have been
 recorded.
 @return the arithmetic mean of values, or zero if none
 */
- (jdouble)getAverage;

/*!
 @brief Returns the count of values recorded.
 @return the count of values
 */
- (jlong)getCount;

/*!
 @brief Returns the maximum value recorded, or <code>Integer.MIN_VALUE</code> if no
 values have been recorded.
 @return the maximum value, or <code>Integer.MIN_VALUE</code> if none
 */
- (jint)getMax;

/*!
 @brief Returns the minimum value recorded, or <code>Integer.MAX_VALUE</code> if no
 values have been recorded.
 @return the minimum value, or <code>Integer.MAX_VALUE</code> if none
 */
- (jint)getMin;

/*!
 @brief Returns the sum of values recorded, or zero if no values have been
 recorded.
 @return the sum of values, or zero if none
 */
- (jlong)getSum;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIntSummaryStatistics)

FOUNDATION_EXPORT void JavaUtilIntSummaryStatistics_init(JavaUtilIntSummaryStatistics *self);

FOUNDATION_EXPORT JavaUtilIntSummaryStatistics *new_JavaUtilIntSummaryStatistics_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilIntSummaryStatistics *create_JavaUtilIntSummaryStatistics_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIntSummaryStatistics)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilIntSummaryStatistics")
