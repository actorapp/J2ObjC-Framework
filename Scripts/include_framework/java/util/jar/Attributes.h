//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/jar/Attributes.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilJarAttributes")
#ifdef RESTRICT_JavaUtilJarAttributes
#define INCLUDE_ALL_JavaUtilJarAttributes 0
#else
#define INCLUDE_ALL_JavaUtilJarAttributes 1
#endif
#undef RESTRICT_JavaUtilJarAttributes

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilJarAttributes_) && (INCLUDE_ALL_JavaUtilJarAttributes || defined(INCLUDE_JavaUtilJarAttributes))
#define JavaUtilJarAttributes_

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap 1
#include "../../../java/util/Map.h"

@class JavaUtilJarAttributes_Name;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilSet;

/*!
 @brief The <code>Attributes</code> class is used to store values for manifest entries.
 Attribute keys are generally instances of <code>Attributes.Name</code>. Values
 associated with attribute keys are of type <code>String</code>.
 */
@interface JavaUtilJarAttributes : NSObject < NSCopying, JavaUtilMap > {
 @public
  /*!
   @brief The <code>Attributes</code> as name/value pairs.
   Maps the attribute names (as
 <code>Attributes.Name</code>) of a JAR file manifest to arbitrary values. The
 attribute names thus are obtained from the <code>Manifest</code> for
 convenience.
   */
  id<JavaUtilMap> map_;
}

#pragma mark Public

/*!
 @brief Constructs an <code>Attributes</code> instance.
 */
- (instancetype)init;

/*!
 @brief Constructs an <code>Attributes</code> instance obtaining keys and values from
 the parameter <code>attrib</code>.
 @param attrib
 The attributes to obtain entries from.
 */
- (instancetype)initWithJavaUtilJarAttributes:(JavaUtilJarAttributes *)attrib;

/*!
 @brief Constructs an <code>Attributes</code> instance with initial capacity of size
 <code>size</code>.
 @param size
 Initial size of this <code>Attributes</code> instance.
 */
- (instancetype)initWithInt:(jint)size;

/*!
 @brief Removes all key/value pairs from this <code>Attributes</code>.
 */
- (void)clear;

- (id)clone;

/*!
 @brief Determines whether this <code>Attributes</code> contains the specified key.
 @param key
 The key to search for.
 @return <code>true</code> if the key is found, <code>false</code> otherwise.
 */
- (jboolean)containsKeyWithId:(id)key;

/*!
 @brief Determines whether this <code>Attributes</code> contains the specified value.
 @param value
 the value to search for.
 @return <code>true</code> if the value is found, <code>false</code> otherwise.
 */
- (jboolean)containsValueWithId:(id)value;

/*!
 @brief Returns a set containing map entries for each of the key/value pair
 contained in this <code>Attributes</code>.
 @return a set of Map.Entry's
 */
- (id<JavaUtilSet>)entrySet;

/*!
 @brief Determines if this <code>Attributes</code> and the parameter <code>Attributes</code>
  are equal.
 Two <code>Attributes</code> instances are equal if they
 contain the same keys and values.
 @param obj
 the object with which this <code>Attributes</code> is compared.
 @return <code>true</code> if the <code>Attributes</code> are equal, <code>false</code>
 otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the value associated with the parameter key.
 @param key
 the key to search for.
 @return Object associated with key, or <code>null</code> if key does not
 exist.
 */
- (id)getWithId:(id)key;

/*!
 @brief Returns the value associated with the parameter <code>Attributes.Name</code>
 key.
 @param name
 the key to obtain the value for.
 @return the <code>String</code> associated with name, or <code>null</code> if name
 is not a valid key.
 */
- (NSString *)getValueWithJavaUtilJarAttributes_Name:(JavaUtilJarAttributes_Name *)name;

/*!
 @brief Returns the string associated with the parameter name.
 @param name
 the key to obtain the value for.
 @return the string associated with name, or <code>null</code> if name is not a
 valid key.
 */
- (NSString *)getValueWithNSString:(NSString *)name;

/*!
 @brief Returns the hash code of this <code>Attributes</code>.
 @return the hash code of this object.
 */
- (NSUInteger)hash;

/*!
 @brief Determines whether this <code>Attributes</code> contains any keys.
 @return <code>true</code> if one or more keys exist, <code>false</code> otherwise.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns a <code>Set</code> containing all the keys found in this <code>Attributes</code>
 .
 @return a <code>Set</code> of all keys.
 */
- (id<JavaUtilSet>)keySet;

/*!
 @brief Stores key/value pairs in this <code>Attributes</code>.
 @param key
 the key to associate with value.
 @param value
 the value to store in this <code>Attributes</code>.
 @return the value being stored.
 @throws ClassCastException
 when key is not an <code>Attributes.Name</code> or value is not
 a <code>String</code>.
 */
- (id)putWithId:(id)key
         withId:(id)value;

/*!
 @brief Stores all the key/value pairs in the argument in this <code>Attributes</code>
 .
 @param attrib
 the associations to store (must be of type <code>Attributes</code>
 ).
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)attrib;

/*!
 @brief Stores the value <code>value</code> associated with the key <code>name</code> in this
 <code>Attributes</code>.
 @return the value being stored.
 */
- (NSString *)putValueWithNSString:(NSString *)name
                      withNSString:(NSString *)value;

/*!
 @brief Deletes the key/value pair with key <code>key</code> from this <code>Attributes</code>
 .
 @param key
 the key to remove.
 @return the values associated with the removed key, <code>null</code> if not
 present.
 */
- (id)removeWithId:(id)key;

/*!
 @brief Returns the number of key/value pairs associated with this <code>Attributes</code>
 .
 @return the size of this <code>Attributes</code>.
 */
- (jint)size;

/*!
 @brief Returns a collection of all the values present in this <code>Attributes</code>
 .
 @return a collection of all values present.
 */
- (id<JavaUtilCollection>)values;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilJarAttributes)

J2OBJC_FIELD_SETTER(JavaUtilJarAttributes, map_, id<JavaUtilMap>)

FOUNDATION_EXPORT void JavaUtilJarAttributes_init(JavaUtilJarAttributes *self);

FOUNDATION_EXPORT JavaUtilJarAttributes *new_JavaUtilJarAttributes_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarAttributes *create_JavaUtilJarAttributes_init();

FOUNDATION_EXPORT void JavaUtilJarAttributes_initWithJavaUtilJarAttributes_(JavaUtilJarAttributes *self, JavaUtilJarAttributes *attrib);

FOUNDATION_EXPORT JavaUtilJarAttributes *new_JavaUtilJarAttributes_initWithJavaUtilJarAttributes_(JavaUtilJarAttributes *attrib) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarAttributes *create_JavaUtilJarAttributes_initWithJavaUtilJarAttributes_(JavaUtilJarAttributes *attrib);

FOUNDATION_EXPORT void JavaUtilJarAttributes_initWithInt_(JavaUtilJarAttributes *self, jint size);

FOUNDATION_EXPORT JavaUtilJarAttributes *new_JavaUtilJarAttributes_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarAttributes *create_JavaUtilJarAttributes_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarAttributes)

#endif

#if !defined (JavaUtilJarAttributes_Name_) && (INCLUDE_ALL_JavaUtilJarAttributes || defined(INCLUDE_JavaUtilJarAttributes_Name))
#define JavaUtilJarAttributes_Name_

/*!
 @brief The name part of the name/value pairs constituting an attribute as
 defined by the specification of the JAR manifest.
 May be composed of the
 following ASCII signs as defined in the EBNF below:
 @code

  name       = alphanum *headerchar
  headerchar = alphanum | - | _
  alphanum   = {A-Z} | {a-z} | {0-9}
  
@endcode
 */
@interface JavaUtilJarAttributes_Name : NSObject

+ (JavaUtilJarAttributes_Name *)CLASS_PATH;

+ (JavaUtilJarAttributes_Name *)MANIFEST_VERSION;

+ (JavaUtilJarAttributes_Name *)MAIN_CLASS;

+ (JavaUtilJarAttributes_Name *)SIGNATURE_VERSION;

+ (JavaUtilJarAttributes_Name *)CONTENT_TYPE;

+ (JavaUtilJarAttributes_Name *)SEALED;

+ (JavaUtilJarAttributes_Name *)IMPLEMENTATION_TITLE;

+ (JavaUtilJarAttributes_Name *)IMPLEMENTATION_VERSION;

+ (JavaUtilJarAttributes_Name *)IMPLEMENTATION_VENDOR;

+ (JavaUtilJarAttributes_Name *)SPECIFICATION_TITLE;

+ (JavaUtilJarAttributes_Name *)SPECIFICATION_VERSION;

+ (JavaUtilJarAttributes_Name *)SPECIFICATION_VENDOR;

+ (JavaUtilJarAttributes_Name *)EXTENSION_LIST;

+ (JavaUtilJarAttributes_Name *)EXTENSION_NAME;

+ (JavaUtilJarAttributes_Name *)EXTENSION_INSTALLATION;

+ (JavaUtilJarAttributes_Name *)IMPLEMENTATION_VENDOR_ID;

+ (JavaUtilJarAttributes_Name *)IMPLEMENTATION_URL;

+ (JavaUtilJarAttributes_Name *)NAME;

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (NSString *)getName;

@end

J2OBJC_STATIC_INIT(JavaUtilJarAttributes_Name)

/*!
 @brief The class path (a main attribute).
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_CLASS_PATH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_CLASS_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, CLASS_PATH, JavaUtilJarAttributes_Name *)

/*!
 @brief The version of the manifest file (a main attribute).
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_MANIFEST_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_MANIFEST_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, MANIFEST_VERSION, JavaUtilJarAttributes_Name *)

/*!
 @brief The main class's name (for stand-alone applications).
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_MAIN_CLASS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_MAIN_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, MAIN_CLASS, JavaUtilJarAttributes_Name *)

/*!
 @brief Defines the signature version of the JAR file.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_SIGNATURE_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_SIGNATURE_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, SIGNATURE_VERSION, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Content-Type</code> manifest attribute.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_CONTENT_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_CONTENT_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, CONTENT_TYPE, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Sealed</code> manifest attribute which may have the value
 <code>true</code> for sealed archives.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_SEALED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_SEALED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, SEALED, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Implementation-Title</code> attribute whose value is a string
 that defines the title of the extension implementation.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_IMPLEMENTATION_TITLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_IMPLEMENTATION_TITLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, IMPLEMENTATION_TITLE, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Implementation-Version</code> attribute defining the version of
 the extension implementation.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_IMPLEMENTATION_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_IMPLEMENTATION_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, IMPLEMENTATION_VERSION, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Implementation-Vendor</code> attribute defining the organization
 that maintains the extension implementation.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_IMPLEMENTATION_VENDOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_IMPLEMENTATION_VENDOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, IMPLEMENTATION_VENDOR, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Specification-Title</code> attribute defining the title of the
 extension specification.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_SPECIFICATION_TITLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_SPECIFICATION_TITLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, SPECIFICATION_TITLE, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Specification-Version</code> attribute defining the version of
 the extension specification.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_SPECIFICATION_VERSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_SPECIFICATION_VERSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, SPECIFICATION_VERSION, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Specification-Vendor</code> attribute defining the organization
 that maintains the extension specification.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_SPECIFICATION_VENDOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_SPECIFICATION_VENDOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, SPECIFICATION_VENDOR, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Extension-List</code> attribute defining the extensions that are
 needed by the applet.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_EXTENSION_LIST();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_EXTENSION_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, EXTENSION_LIST, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Extension-Name</code> attribute which defines the unique name of
 the extension.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_EXTENSION_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_EXTENSION_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, EXTENSION_NAME, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Extension-Installation</code> attribute.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_EXTENSION_INSTALLATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_EXTENSION_INSTALLATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, EXTENSION_INSTALLATION, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Implementation-Vendor-Id</code> attribute specifies the vendor
 of an extension implementation if the applet requires an
 implementation from a specific vendor.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_IMPLEMENTATION_VENDOR_ID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_IMPLEMENTATION_VENDOR_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, IMPLEMENTATION_VENDOR_ID, JavaUtilJarAttributes_Name *)

/*!
 @brief The <code>Implementation-URL</code> attribute specifying a URL that can be
 used to obtain the most recent version of the extension if the
 required version is not already installed.
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_IMPLEMENTATION_URL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_IMPLEMENTATION_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, IMPLEMENTATION_URL, JavaUtilJarAttributes_Name *)

/*!
 */
inline JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_get_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilJarAttributes_Name *JavaUtilJarAttributes_Name_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilJarAttributes_Name, NAME, JavaUtilJarAttributes_Name *)

FOUNDATION_EXPORT void JavaUtilJarAttributes_Name_initWithNSString_(JavaUtilJarAttributes_Name *self, NSString *name);

FOUNDATION_EXPORT JavaUtilJarAttributes_Name *new_JavaUtilJarAttributes_Name_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarAttributes_Name *create_JavaUtilJarAttributes_Name_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarAttributes_Name)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilJarAttributes")
