//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/logging/XMLFormatter.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLoggingXMLFormatter")
#ifdef RESTRICT_JavaUtilLoggingXMLFormatter
#define INCLUDE_ALL_JavaUtilLoggingXMLFormatter 0
#else
#define INCLUDE_ALL_JavaUtilLoggingXMLFormatter 1
#endif
#undef RESTRICT_JavaUtilLoggingXMLFormatter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaUtilLoggingXMLFormatter_) && (INCLUDE_ALL_JavaUtilLoggingXMLFormatter || defined(INCLUDE_JavaUtilLoggingXMLFormatter))
#define JavaUtilLoggingXMLFormatter_

#define RESTRICT_JavaUtilLoggingFormatter 1
#define INCLUDE_JavaUtilLoggingFormatter 1
#include "../../../java/util/logging/Formatter.h"

@class JavaUtilLoggingHandler;
@class JavaUtilLoggingLogRecord;

/*!
 @brief Formatter to convert a <code>LogRecord</code> into an XML string.
 The DTD
 specified in Appendix A to the Java Logging APIs specification is used.
 <code>XMLFormatter</code> uses the output handler's encoding if it is specified,
 otherwise the default platform encoding is used instead. UTF-8 is the
 recommended encoding.
 */
@interface JavaUtilLoggingXMLFormatter : JavaUtilLoggingFormatter

#pragma mark Public

/*!
 @brief Constructs a new <code>XMLFormatter</code>.
 */
- (instancetype)init;

/*!
 @brief Converts a <code>LogRecord</code> into an XML string.
 @param r
 the log record to be formatted.
 @return the log record formatted as an XML string.
 */
- (NSString *)formatWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)r;

/*!
 @brief Returns the header string for a set of log records formatted as XML
 strings, using the output handler's encoding if it is defined, otherwise
 using the default platform encoding.
 @param h
 the output handler, may be <code>null</code>.
 @return the header string for log records formatted as XML strings.
 */
- (NSString *)getHeadWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)h;

/*!
 @brief Returns the tail string for a set of log records formatted as XML
 strings.
 @param h
 the output handler, may be <code>null</code>.
 @return the tail string for log records formatted as XML strings.
 */
- (NSString *)getTailWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)h;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLoggingXMLFormatter)

FOUNDATION_EXPORT void JavaUtilLoggingXMLFormatter_init(JavaUtilLoggingXMLFormatter *self);

FOUNDATION_EXPORT JavaUtilLoggingXMLFormatter *new_JavaUtilLoggingXMLFormatter_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLoggingXMLFormatter *create_JavaUtilLoggingXMLFormatter_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLoggingXMLFormatter)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLoggingXMLFormatter")
