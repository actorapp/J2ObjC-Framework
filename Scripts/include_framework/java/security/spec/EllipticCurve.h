//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/spec/EllipticCurve.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecEllipticCurve")
#ifdef RESTRICT_JavaSecuritySpecEllipticCurve
#define INCLUDE_ALL_JavaSecuritySpecEllipticCurve 0
#else
#define INCLUDE_ALL_JavaSecuritySpecEllipticCurve 1
#endif
#undef RESTRICT_JavaSecuritySpecEllipticCurve

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecuritySpecEllipticCurve_) && (INCLUDE_ALL_JavaSecuritySpecEllipticCurve || defined(INCLUDE_JavaSecuritySpecEllipticCurve))
#define JavaSecuritySpecEllipticCurve_

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol JavaSecuritySpecECField;

/*!
 @brief An Elliptic Curve with its necessary values.
 */
@interface JavaSecuritySpecEllipticCurve : NSObject

#pragma mark Public

/*!
 @brief Creates a new <code>EllipticCurve</code> with the specified field and
 coefficients.
 @param field
 the finite field of this elliptic curve.
 @param a
 the coefficient <code>a</code>.
 @param b
 the coefficient <code>b</code>.
 @throws IllegalArgumentException
 if the specified coefficients are not in the specified field.
 */
- (instancetype)initWithJavaSecuritySpecECField:(id<JavaSecuritySpecECField>)field
                         withJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Creates a new <code>EllipticCurve</code> with the specified field,
 coefficients and seed.
 @param field
 the finite field of this elliptic curve.
 @param a
 the coefficient <code>a</code>.
 @param b
 the coefficient <code>b</code>.
 @param seed
 the seed used for the generation of the curve.
 @throws IllegalArgumentException
 if the specified coefficients are not in the specified field.
 */
- (instancetype)initWithJavaSecuritySpecECField:(id<JavaSecuritySpecECField>)field
                         withJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b
                                  withByteArray:(IOSByteArray *)seed;

/*!
 @brief Returns whether the specified object equals to this elliptic curve.
 @param other
 the object to compare.
 @return <code>true</code> if the specified object is equal to this elliptic
 curve, otherwise <code>false</code>.
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the coefficient <code>a</code> of this elliptic curve.
 @return the coefficient <code>a</code> of this elliptic curve.
 */
- (JavaMathBigInteger *)getA;

/*!
 @brief Returns the coefficient <code>b</code> of this elliptic curve.
 @return the coefficient <code>b</code> of this elliptic curve.
 */
- (JavaMathBigInteger *)getB;

/*!
 @brief Returns the finite field of this elliptic curve.
 @return the finite field of this elliptic curve.
 */
- (id<JavaSecuritySpecECField>)getField;

/*!
 @brief Returns a copy of the seed that was used to generate this elliptic curve.
 @return a copy of the seed that was used to generate this elliptic curve,
 or <code>null</code> if none specified.
 */
- (IOSByteArray *)getSeed;

/*!
 @brief Returns the hashcode of this elliptic curve.
 @return the hashcode of this elliptic curve.
 */
- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecEllipticCurve)

FOUNDATION_EXPORT void JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(JavaSecuritySpecEllipticCurve *self, id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed);

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *new_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *create_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed);

FOUNDATION_EXPORT void JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(JavaSecuritySpecEllipticCurve *self, id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *new_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *create_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecEllipticCurve)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecEllipticCurve")
