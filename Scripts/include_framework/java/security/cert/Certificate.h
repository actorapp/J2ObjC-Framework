//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/cert/Certificate.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertificate")
#ifdef RESTRICT_JavaSecurityCertCertificate
#define INCLUDE_ALL_JavaSecurityCertCertificate 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertificate 1
#endif
#undef RESTRICT_JavaSecurityCertCertificate

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityCertCertificate_) && (INCLUDE_ALL_JavaSecurityCertCertificate || defined(INCLUDE_JavaSecurityCertCertificate))
#define JavaSecurityCertCertificate_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../../java/io/Serializable.h"

@class IOSByteArray;
@protocol JavaSecurityPublicKey;

/*!
 @brief Abstract class to represent identity certificates.
 It represents a way to
 verify the binding of a Principal and its public key. Examples are X.509,
 PGP, and SDSI.
 */
@interface JavaSecurityCertCertificate : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Compares the argument to the certificate, and returns <code>true</code> if they
 represent the <em>same</em> object using a class specific comparison.
 The
 implementation in Object returns <code>true</code> only if the argument is the
 exact same object as the callee (==).
 @param other
 the object to compare with this object.
 @return <code>true</code> if the object is the same as this object, <code>false</code>
  if it is different from this object.
 - seealso: #hashCode
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the encoded representation for this certificate.
 @return the encoded representation for this certificate.
 @throws CertificateEncodingException
 if the encoding fails.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Returns the public key corresponding to this certificate.
 @return the public key corresponding to this certificate.
 */
- (id<JavaSecurityPublicKey>)getPublicKey;

/*!
 @brief Returns the certificate type.
 @return the certificate type.
 */
- (NSString *)getType;

/*!
 @brief Returns an integer hash code for the certificate.
 Any two objects which
 return <code>true</code> when passed to <code>equals</code> must return the same
 value for this method.
 @return the certificate's hash
 - seealso: #equals
 */
- (NSUInteger)hash;

/*!
 @brief Returns a string containing a concise, human-readable description of the
 certificate.
 @return a printable representation for the certificate.
 */
- (NSString *)description;

/*!
 @brief Verifies that this certificate was signed with the given public key.
 @param key
 PublicKey public key for which verification should be
 performed.
 @throws CertificateException
 if encoding errors are detected.
 @throws NoSuchAlgorithmException
 if an unsupported algorithm is detected.
 @throws InvalidKeyException
 if an invalid key is detected.
 @throws NoSuchProviderException
 if there is no default provider.
 @throws SignatureException
 if signature errors are detected.
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

/*!
 @brief Verifies that this certificate was signed with the given public key.
 It
 Uses the signature algorithm given by the provider.
 @param key
 PublicKey public key for which verification should be
 performed.
 @param sigProvider
 String the name of the signature provider.
 @throws CertificateException
 if encoding errors are detected.
 @throws NoSuchAlgorithmException
 if an unsupported algorithm is detected.
 @throws InvalidKeyException
 if an invalid key is detected.
 @throws NoSuchProviderException
 if the specified provider does not exists.
 @throws SignatureException
 if signature errors are detected.
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider;

#pragma mark Protected

/*!
 @brief Creates a new <code>Certificate</code> with the specified type.
 @param type
 the certificate type.
 */
- (instancetype)initWithNSString:(NSString *)type;

/*!
 @brief Returns an alternate object to be serialized.
 @return the object to serialize.
 @throws ObjectStreamException
 if the creation of the alternate object fails.
 */
- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertificate)

FOUNDATION_EXPORT void JavaSecurityCertCertificate_initWithNSString_(JavaSecurityCertCertificate *self, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertificate)

#endif

#if !defined (JavaSecurityCertCertificate_CertificateRep_) && (INCLUDE_ALL_JavaSecurityCertCertificate || defined(INCLUDE_JavaSecurityCertCertificate_CertificateRep))
#define JavaSecurityCertCertificate_CertificateRep_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../../java/io/Serializable.h"

@class IOSByteArray;

/*!
 @brief The alternate <code>Serializable</code> class to be used for serialization and
 deserialization of <code>Certificate</code> objects.
 */
@interface JavaSecurityCertCertificate_CertificateRep : NSObject < JavaIoSerializable >

#pragma mark Protected

/*!
 @brief Creates a new <code>CertificateRep</code> instance with the specified
 certificate type and encoded data.
 @param type
 the certificate type.
 @param data
 the encoded data.
 */
- (instancetype)initWithNSString:(NSString *)type
                   withByteArray:(IOSByteArray *)data;

/*!
 @brief Deserializes a <code>Certificate</code> from a serialized <code>CertificateRep</code>
  object.
 @return the deserialized <code>Certificate</code>.
 @throws ObjectStreamException
 if deserialization fails.
 */
- (id)readResolve;

@end

J2OBJC_STATIC_INIT(JavaSecurityCertCertificate_CertificateRep)

FOUNDATION_EXPORT void JavaSecurityCertCertificate_CertificateRep_initWithNSString_withByteArray_(JavaSecurityCertCertificate_CertificateRep *self, NSString *type, IOSByteArray *data);

FOUNDATION_EXPORT JavaSecurityCertCertificate_CertificateRep *new_JavaSecurityCertCertificate_CertificateRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificate_CertificateRep *create_JavaSecurityCertCertificate_CertificateRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertificate_CertificateRep)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertificate")
