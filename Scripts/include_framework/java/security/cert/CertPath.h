//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/cert/CertPath.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertPath")
#ifdef RESTRICT_JavaSecurityCertCertPath
#define INCLUDE_ALL_JavaSecurityCertCertPath 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertPath 1
#endif
#undef RESTRICT_JavaSecurityCertCertPath

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityCertCertPath_) && (INCLUDE_ALL_JavaSecurityCertCertPath || defined(INCLUDE_JavaSecurityCertCertPath))
#define JavaSecurityCertCertPath_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../../java/io/Serializable.h"

@class IOSByteArray;
@protocol JavaUtilIterator;
@protocol JavaUtilList;

/*!
 @brief An immutable certificate path that can be validated.
 All certificates in the
 path are of the same type (i.e., X509).
 <p>
 A <code>CertPath</code> can be represented as a byte array in at least one
 supported encoding scheme (i.e. PkiPath or PKCS7) when serialized.
 <p>
 When a <code>List</code> of the certificates is obtained it must be immutable.
 <p>
 A <code>CertPath</code> must be thread-safe without requiring coordinated access.
 - seealso: Certificate
 */
@interface JavaSecurityCertCertPath : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Returns <code>true</code> if <code>Certificate</code>s in the list are the same
 type and the lists are equal (and by implication the certificates
 contained within are the same).
 @param other
 <code>CertPath</code> to be compared for equality.
 @return <code>true</code> if the object are equal, <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns an immutable List of the <code>Certificate</code>s contained
 in the <code>CertPath</code>.
 @return a list of <code>Certificate</code>s in the <code>CertPath</code>.
 */
- (id<JavaUtilList>)getCertificates;

/*!
 @brief Returns an encoding of the <code>CertPath</code> using the default encoding.
 @return default encoding of the <code>CertPath</code>.
 @throws CertificateEncodingException
 if the encoding fails.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Returns an encoding of this <code>CertPath</code> using the given
 <code>encoding</code> from <code>getEncodings()</code>.
 @throws CertificateEncodingException
 if the encoding fails.
 */
- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding;

/*!
 @brief Returns an <code>Iterator</code> over the supported encodings for a
 representation of the certificate path.
 @return <code>Iterator</code> over supported encodings (as <code>String</code>s).
 */
- (id<JavaUtilIterator>)getEncodings;

/*!
 @brief Returns the type of <code>Certificate</code> in this instance.
 @return the certificate type.
 */
- (NSString *)getType;

/*!
 @brief Overrides <code>Object.hashCode()</code>.
 The function is defined as follows:
 @code

  hashCode = 31 * path.getType().hashCode() +
  path.getCertificates().hashCode();
  
@endcode
 @return the hash code for this instance.
 */
- (NSUInteger)hash;

/*!
 @brief Returns a <code>String</code> representation of this <code>CertPath</code>
 instance.
 It is the result of calling <code>toString</code> on all <code>Certificate</code>
 s in the <code>List</code>.
 @return a string representation of this instance.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Creates a new <code>CertPath</code> instance for the specified certificate
 type.
 @param type
 the certificate type.
 */
- (instancetype)initWithNSString:(NSString *)type;

/*!
 @brief Returns an alternate object to be serialized.
 @return an alternate object to be serialized.
 @throws ObjectStreamException
 if the creation of the alternate object fails.
 */
- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPath)

FOUNDATION_EXPORT void JavaSecurityCertCertPath_initWithNSString_(JavaSecurityCertCertPath *self, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPath)

#endif

#if !defined (JavaSecurityCertCertPath_CertPathRep_) && (INCLUDE_ALL_JavaSecurityCertCertPath || defined(INCLUDE_JavaSecurityCertCertPath_CertPathRep))
#define JavaSecurityCertCertPath_CertPathRep_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../../java/io/Serializable.h"

@class IOSByteArray;

/*!
 @brief The alternate <code>Serializable</code> class to be used for serialization and
 deserialization on <code>CertPath</code> objects.
 */
@interface JavaSecurityCertCertPath_CertPathRep : NSObject < JavaIoSerializable >

#pragma mark Protected

/*!
 @brief Creates a new <code>CertPathRep</code> instance with the specified type
 and encoded data.
 @param type
 the certificate type.
 @param data
 the encoded data.
 */
- (instancetype)initWithNSString:(NSString *)type
                   withByteArray:(IOSByteArray *)data;

/*!
 @brief Deserializes a <code>CertPath</code> from a serialized <code>CertPathRep</code>
 object.
 @return the deserialized <code>CertPath</code>.
 @throws ObjectStreamException
 if deserialization fails.
 */
- (id)readResolve;

@end

J2OBJC_STATIC_INIT(JavaSecurityCertCertPath_CertPathRep)

FOUNDATION_EXPORT void JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(JavaSecurityCertCertPath_CertPathRep *self, NSString *type, IOSByteArray *data);

FOUNDATION_EXPORT JavaSecurityCertCertPath_CertPathRep *new_JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPath_CertPathRep *create_JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPath_CertPathRep)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertPath")
