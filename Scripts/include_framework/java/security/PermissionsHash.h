//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/PermissionsHash.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityPermissionsHash")
#ifdef RESTRICT_JavaSecurityPermissionsHash
#define INCLUDE_ALL_JavaSecurityPermissionsHash 0
#else
#define INCLUDE_ALL_JavaSecurityPermissionsHash 1
#endif
#undef RESTRICT_JavaSecurityPermissionsHash

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecurityPermissionsHash_) && (INCLUDE_ALL_JavaSecurityPermissionsHash || defined(INCLUDE_JavaSecurityPermissionsHash))
#define JavaSecurityPermissionsHash_

#define RESTRICT_JavaSecurityPermissionCollection 1
#define INCLUDE_JavaSecurityPermissionCollection 1
#include "../../java/security/PermissionCollection.h"

@class JavaSecurityPermission;
@protocol JavaUtilEnumeration;

/*!
 @brief A default <code>PermissionCollection</code> implementation that uses a hashtable.
 Each hashtable entry stores a Permission object as both the key and the
 value.
 <p>
 This <code>PermissionCollection</code> is intended for storing &quot;neutral&quot;
 permissions which do not require special collection.
 */
@interface JavaSecurityPermissionsHash : JavaSecurityPermissionCollection

#pragma mark Public

/*!
 @brief Adds the argument to the collection.
 @param permission
 the permission to add to the collection.
 */
- (void)addWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

/*!
 @brief Returns an enumeration of the permissions in the receiver.
 @return Enumeration the permissions in the receiver.
 */
- (id<JavaUtilEnumeration>)elements;

/*!
 @brief Indicates whether the argument permission is implied by the permissions
 contained in the receiver.
 @return boolean <code>true</code> if the argument permission is implied
 by the permissions in the receiver, and <code>false</code> if
 it is not.
 @param permission
 java.security.Permission the permission to check
 */
- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityPermissionsHash)

FOUNDATION_EXPORT void JavaSecurityPermissionsHash_init(JavaSecurityPermissionsHash *self);

FOUNDATION_EXPORT JavaSecurityPermissionsHash *new_JavaSecurityPermissionsHash_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityPermissionsHash *create_JavaSecurityPermissionsHash_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityPermissionsHash)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityPermissionsHash")
