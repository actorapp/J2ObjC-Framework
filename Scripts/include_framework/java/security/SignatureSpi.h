//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/security/SignatureSpi.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySignatureSpi")
#ifdef RESTRICT_JavaSecuritySignatureSpi
#define INCLUDE_ALL_JavaSecuritySignatureSpi 0
#else
#define INCLUDE_ALL_JavaSecuritySignatureSpi 1
#endif
#undef RESTRICT_JavaSecuritySignatureSpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaSecuritySignatureSpi_) && (INCLUDE_ALL_JavaSecuritySignatureSpi || defined(INCLUDE_JavaSecuritySignatureSpi))
#define JavaSecuritySignatureSpi_

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief <code>SignatureSpi</code> is the <i>Service Provider Interface</i> (<b>SPI</b>)
 definition for <code>Signature</code>.
 - seealso: Signature
 */
@interface JavaSecuritySignatureSpi : NSObject {
 @public
  /*!
   @brief Implementation specific source of randomness.
   */
  JavaSecuritySecureRandom *appRandom_;
}

#pragma mark Public

- (instancetype)init;

- (id)clone;

#pragma mark Protected

/*!
 @brief Returns the value of the parameter with the specified name.
 @param param
 the name of the requested parameter value.
 @return the value of the parameter with the specified name, maybe <code>null</code>
 .
 @throws InvalidParameterException
 if <code>param</code> is not a valid parameter for this <code>SignatureSpi</code>
  or an other error occurs.
 */
- (id)engineGetParameterWithNSString:(NSString *)param __attribute__((deprecated));

/*!
 @brief Returns the <code>AlgorithmParameters</code> of this <code>SignatureSpi</code>
 instance.
 @return the <code>AlgorithmParameters</code> of this <code>SignatureSpi</code>
 instance, maybe <code>null</code>.
 */
- (JavaSecurityAlgorithmParameters *)engineGetParameters;

/*!
 @brief Initializes this <code>SignatureSpi</code> instance for signing, using the
 private key of the identity whose signature is going to be generated.
 @param privateKey
 the private key.
 @throws InvalidKeyException
 if <code>privateKey</code> is not valid.
 */
- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey;

/*!
 @brief Initializes this <code>SignatureSpi</code> instance for signing, using the
 private key of the identity whose signature is going to be generated and
 the specified source of randomness.
 @param privateKey
 the private key.
 @param random
 the <code>SecureRandom</code> to use.
 @throws InvalidKeyException
 if <code>privateKey</code> is not valid.
 */
- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Initializes this <code>SignatureSpi</code> instance for signature
 verification, using the public key of the identity whose signature is
 going to be verified.
 @param publicKey
 the public key.
 @throws InvalidKeyException
 if <code>publicKey</code> is not valid.
 */
- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey;

/*!
 @brief Sets the specified <code>AlgorithmParameterSpec</code>.
 @param params
 the parameter to set.
 @throws InvalidAlgorithmParameterException
 if the parameter is invalid, already set or is not allowed to
 be changed.
 */
- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params;

/*!
 @brief Sets the specified parameter to the given value.
 @param param
 the name of the parameter.
 @param value
 the parameter value.
 @throws InvalidParameterException
 if the parameter is invalid, already set or is not allowed to
 be changed.
 */
- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value __attribute__((deprecated));

/*!
 @brief Generates and returns the signature of all updated data.
 <p>
 This <code>SignatureSpi</code> instance is reset to the state of its last
 initialization for signing and thus can be used for another signature
 from the same identity.
 @return the signature of all updated data.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 */
- (IOSByteArray *)engineSign;

/*!
 @brief Generates and stores the signature of all updated data in the provided
 <code>byte[]</code> at the specified position with the specified length.
 <p>
 This <code>SignatureSpi</code> instance is reset to the state of its last
 initialization for signing and thus can be used for another signature
 from the same identity.
 @param outbuf
 the buffer to store the signature.
 @param offset
 the index of the first byte in <code>outbuf</code> to store.
 @param len
 the number of bytes allocated for the signature.
 @return the number of bytes stored in <code>outbuf</code>.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 @throws IllegalArgumentException
 if <code>offset</code> or <code>len</code> are not valid in respect to
 <code>outbuf</code>.
 */
- (jint)engineSignWithByteArray:(IOSByteArray *)outbuf
                        withInt:(jint)offset
                        withInt:(jint)len;

/*!
 @brief Updates the data to be verified or to be signed, using the specified
 <code>byte</code>.
 @param b
 the byte to update with.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 */
- (void)engineUpdateWithByte:(jbyte)b;

/*!
 @brief Updates the data to be verified or to be signed, using the given <code>byte[]</code>
 , starting form the specified index for the specified length.
 @param b
 the byte array to update with.
 @param off
 the start index in <code>b</code> of the data.
 @param len
 the number of bytes to use.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 */
- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len;

/*!
 @brief Updates the data to be verified or to be signed, using the specified
 <code>ByteBuffer</code>.
 @param input
 the <code>ByteBuffer</code> to update with.
 @throws RuntimeException
 since <code>SignatureException</code> is not specified for this
 method it throws a <code>RuntimeException</code> if underlying
 <code>engineUpdate(byte[],int,int)</code> throws <code>SignatureException</code>
 .
 */
- (void)engineUpdateWithJavaNioByteBuffer:(JavaNioByteBuffer *)input;

/*!
 @brief Indicates whether the given <code>sigBytes</code> can be verified using the
 public key or a certificate of the signer.
 <p>
 This <code>SignatureSpi</code> instance is reset to the state of its last
 initialization for verifying and thus can be used to verify another
 signature of the same signer.
 @param sigBytes
 the signature to verify.
 @return <code>true</code> if the signature was verified, <code>false</code>
 otherwise.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 */
- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes;

/*!
 @brief Indicates whether the given <code>sigBytes</code> starting at index <code>offset</code>
  with <code>length</code> bytes can be verified using the public key or
 a certificate of the signer.
 <p>
 This <code>SignatureSpi</code> instance is reset to the state of its last
 initialization for verifying and thus can be used to verify another
 signature of the same signer.
 @param sigBytes
 the <code>byte[]</code> containing the signature to verify.
 @param offset
 the start index in <code>sigBytes</code> of the signature
 @param length
 the number of bytes allocated for the signature.
 @return <code>true</code> if the signature was verified, <code>false</code>
 otherwise.
 @throws SignatureException
 if this <code>SignatureSpi</code> instance is not initialized
 properly.
 @throws IllegalArgumentException
 if <code>offset</code> or <code>length</code> are not valid in respect
 to <code>sigBytes</code>.
 */
- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes
                              withInt:(jint)offset
                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySignatureSpi)

J2OBJC_FIELD_SETTER(JavaSecuritySignatureSpi, appRandom_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void JavaSecuritySignatureSpi_init(JavaSecuritySignatureSpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySignatureSpi)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySignatureSpi")
