//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/ReflectiveOperationException.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectiveOperationException")
#ifdef RESTRICT_JavaLangReflectiveOperationException
#define INCLUDE_ALL_JavaLangReflectiveOperationException 0
#else
#define INCLUDE_ALL_JavaLangReflectiveOperationException 1
#endif
#undef RESTRICT_JavaLangReflectiveOperationException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangReflectiveOperationException_) && (INCLUDE_ALL_JavaLangReflectiveOperationException || defined(INCLUDE_JavaLangReflectiveOperationException))
#define JavaLangReflectiveOperationException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "../../java/lang/Exception.h"

/*!
 @brief Common superclass of exceptions thrown by reflective operations in
 core reflection.
 - seealso: LinkageError
 @since 1.7
 */
@interface JavaLangReflectiveOperationException : JavaLangException

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Constructs a new exception with <code>null</code> as its detail
 message.
 The cause is not initialized, and may subsequently be
 initialized by a call to <code>initCause</code>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new exception with the specified detail message.
 The cause is not initialized, and may subsequently be
 initialized by a call to <code>initCause</code>.
 @param message   the detail message. The detail message is saved for
 later retrieval by the <code>getMessage()</code> method.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a new exception with the specified detail message
 and cause.
 <p>Note that the detail message associated with
 <code>cause</code> is <em>not</em> automatically incorporated in
 this exception's detail message.
 @param message the detail message (which is saved for later retrieval
 by the <code>getMessage()</code> method).
 @param cause the cause (which is saved for later retrieval by the
 <code>getCause()</code> method).  (A <code>null</code> value is
 permitted, and indicates that the cause is nonexistent or
 unknown.)
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a new exception with the specified cause and a detail
 message of <code>(cause==null ?
 null : cause.toString())</code> (which
 typically contains the class and detail message of <code>cause</code>).
 @param cause the cause (which is saved for later retrieval by the
 <code>getCause()</code> method).  (A <code>null</code> value is
 permitted, and indicates that the cause is nonexistent or
 unknown.)
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectiveOperationException)

inline jlong JavaLangReflectiveOperationException_get_serialVersionUID();
#define JavaLangReflectiveOperationException_serialVersionUID 123456789LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangReflectiveOperationException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaLangReflectiveOperationException_init(JavaLangReflectiveOperationException *self);

FOUNDATION_EXPORT JavaLangReflectiveOperationException *new_JavaLangReflectiveOperationException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectiveOperationException *create_JavaLangReflectiveOperationException_init();

FOUNDATION_EXPORT void JavaLangReflectiveOperationException_initWithNSString_(JavaLangReflectiveOperationException *self, NSString *message);

FOUNDATION_EXPORT JavaLangReflectiveOperationException *new_JavaLangReflectiveOperationException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectiveOperationException *create_JavaLangReflectiveOperationException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangReflectiveOperationException_initWithNSString_withNSException_(JavaLangReflectiveOperationException *self, NSString *message, NSException *cause);

FOUNDATION_EXPORT JavaLangReflectiveOperationException *new_JavaLangReflectiveOperationException_initWithNSString_withNSException_(NSString *message, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectiveOperationException *create_JavaLangReflectiveOperationException_initWithNSString_withNSException_(NSString *message, NSException *cause);

FOUNDATION_EXPORT void JavaLangReflectiveOperationException_initWithNSException_(JavaLangReflectiveOperationException *self, NSException *cause);

FOUNDATION_EXPORT JavaLangReflectiveOperationException *new_JavaLangReflectiveOperationException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectiveOperationException *create_JavaLangReflectiveOperationException_initWithNSException_(NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectiveOperationException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectiveOperationException")
