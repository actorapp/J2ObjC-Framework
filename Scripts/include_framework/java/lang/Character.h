//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/objc/java/java/lang/Character.java
//

#include "../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangCharacter")
#ifdef RESTRICT_JavaLangCharacter
#define INCLUDE_ALL_JavaLangCharacter 0
#else
#define INCLUDE_ALL_JavaLangCharacter 1
#endif
#undef RESTRICT_JavaLangCharacter
#ifdef INCLUDE_JavaLangCharacter_UnicodeBlock
#define INCLUDE_JavaLangCharacter_Subset 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaLangCharacter_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter))
#define JavaLangCharacter_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "../../java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "../../java/lang/Comparable.h"

@class IOSCharArray;
@class IOSClass;
@protocol JavaLangCharSequence;

/*!
 @brief The <code>Character</code> class wraps a value of the primitive
 type <code>char</code> in an object.
 An object of type
 <code>Character</code> contains a single field whose type is
 <code>char</code>.
 <p>
 In addition, this class provides several methods for determining
 a character's category (lowercase letter, digit, etc.) and for converting
 characters from uppercase to lowercase and vice versa.
 <p>
 Character information is based on the Unicode Standard, version 6.2.0.
 <p>
 The methods and data of class <code>Character</code> are defined by
 the information in the <i>UnicodeData</i> file that is part of the
 Unicode Character Database maintained by the Unicode
 Consortium. This file specifies various properties including name
 and general category for every defined Unicode code point or
 character range.
 <p>
 The file and its description are available from the Unicode Consortium at:
 <ul>
 <li><a href="http://www.unicode.org">http://www.unicode.org</a>
 </ul>
 <h3><a name="unicode">Unicode Character Representations</a></h3>
 <p>The <code>char</code> data type (and therefore the value that a
 <code>Character</code> object encapsulates) are based on the
 original Unicode specification, which defined characters as
 fixed-width 16-bit entities. The Unicode Standard has since been
 changed to allow for characters whose representation requires more
 than 16 bits.  The range of legal <em>code point</em>s is now
 U+0000 to U+10FFFF, known as <em>Unicode scalar value</em>.
 (Refer to the <a
 href="http://www.unicode.org/reports/tr27/#notation"><i>
 definition</i></a> of the U+<i>n</i> notation in the Unicode
 Standard.)
 <p><a name="BMP">The set of characters from U+0000 to U+FFFF</a> is
 sometimes referred to as the <em>Basic Multilingual Plane (BMP)</em>.
 <a name="supplementary">Characters</a> whose code points are greater
 than U+FFFF are called <em>supplementary character</em>s.  The Java
 platform uses the UTF-16 representation in <code>char</code> arrays and
 in the <code>String</code> and <code>StringBuffer</code> classes. In
 this representation, supplementary characters are represented as a pair
 of <code>char</code> values, the first from the <em>high-surrogates</em>
 range, (&#92;uD800-&#92;uDBFF), the second from the
 <em>low-surrogates</em> range (&#92;uDC00-&#92;uDFFF).
 <p>A <code>char</code> value, therefore, represents Basic
 Multilingual Plane (BMP) code points, including the surrogate
 code points, or code units of the UTF-16 encoding. An
 <code>int</code> value represents all Unicode code points,
 including supplementary code points. The lower (least significant)
 21 bits of <code>int</code> are used to represent Unicode code
 points and the upper (most significant) 11 bits must be zero.
 Unless otherwise specified, the behavior with respect to
 supplementary characters and surrogate <code>char</code> values is
 as follows:
 <ul>
 <li>The methods that only accept a <code>char</code> value cannot support
 supplementary characters. They treat <code>char</code> values from the
 surrogate ranges as undefined characters. For example,
 <code>Character.isLetter('\u005CuD840')</code> returns <code>false</code>, even though
 this specific value if followed by any low-surrogate value in a string
 would represent a letter.
 <li>The methods that accept an <code>int</code> value support all
 Unicode characters, including supplementary characters. For
 example, <code>Character.isLetter(0x2F81A)</code> returns
 <code>true</code> because the code point value represents a letter
 (a CJK ideograph).
 </ul>
 <p>In the Java SE API documentation, <em>Unicode code point</em> is
 used for character values in the range between U+0000 and U+10FFFF,
 and <em>Unicode code unit</em> is used for 16-bit
 <code>char</code> values that are code units of the <em>UTF-16</em>
 encoding. For more information on Unicode terminology, refer to the
 <a href="http://www.unicode.org/glossary/">Unicode Glossary</a>.
 @author Lee Boynton
 @author Guy Steele
 @author Akira Tanaka
 @author Martin Buchholz
 @author Ulf Zibis
 @since 1.0
 */
@interface JavaLangCharacter : NSObject < JavaIoSerializable, JavaLangComparable >

+ (jint)MIN_RADIX;

+ (jint)MAX_RADIX;

+ (jchar)MIN_VALUE;

+ (jchar)MAX_VALUE;

+ (IOSClass *)TYPE;

+ (jbyte)UNASSIGNED;

+ (jbyte)UPPERCASE_LETTER;

+ (jbyte)LOWERCASE_LETTER;

+ (jbyte)TITLECASE_LETTER;

+ (jbyte)MODIFIER_LETTER;

+ (jbyte)OTHER_LETTER;

+ (jbyte)NON_SPACING_MARK;

+ (jbyte)ENCLOSING_MARK;

+ (jbyte)COMBINING_SPACING_MARK;

+ (jbyte)DECIMAL_DIGIT_NUMBER;

+ (jbyte)LETTER_NUMBER;

+ (jbyte)OTHER_NUMBER;

+ (jbyte)SPACE_SEPARATOR;

+ (jbyte)LINE_SEPARATOR;

+ (jbyte)PARAGRAPH_SEPARATOR;

+ (jbyte)CONTROL;

+ (jbyte)FORMAT;

+ (jbyte)PRIVATE_USE;

+ (jbyte)SURROGATE;

+ (jbyte)DASH_PUNCTUATION;

+ (jbyte)START_PUNCTUATION;

+ (jbyte)END_PUNCTUATION;

+ (jbyte)CONNECTOR_PUNCTUATION;

+ (jbyte)OTHER_PUNCTUATION;

+ (jbyte)MATH_SYMBOL;

+ (jbyte)CURRENCY_SYMBOL;

+ (jbyte)MODIFIER_SYMBOL;

+ (jbyte)OTHER_SYMBOL;

+ (jbyte)INITIAL_QUOTE_PUNCTUATION;

+ (jbyte)FINAL_QUOTE_PUNCTUATION;

+ (jint)ERROR;

+ (jbyte)DIRECTIONALITY_UNDEFINED;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;

+ (jbyte)DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;

+ (jbyte)DIRECTIONALITY_ARABIC_NUMBER;

+ (jbyte)DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;

+ (jbyte)DIRECTIONALITY_NONSPACING_MARK;

+ (jbyte)DIRECTIONALITY_BOUNDARY_NEUTRAL;

+ (jbyte)DIRECTIONALITY_PARAGRAPH_SEPARATOR;

+ (jbyte)DIRECTIONALITY_SEGMENT_SEPARATOR;

+ (jbyte)DIRECTIONALITY_WHITESPACE;

+ (jbyte)DIRECTIONALITY_OTHER_NEUTRALS;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;

+ (jbyte)DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;

+ (jbyte)DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;

+ (jbyte)DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;

+ (jchar)MIN_HIGH_SURROGATE;

+ (jchar)MAX_HIGH_SURROGATE;

+ (jchar)MIN_LOW_SURROGATE;

+ (jchar)MAX_LOW_SURROGATE;

+ (jchar)MIN_SURROGATE;

+ (jchar)MAX_SURROGATE;

+ (jint)MIN_SUPPLEMENTARY_CODE_POINT;

+ (jint)MIN_CODE_POINT;

+ (jint)MAX_CODE_POINT;

+ (jint)SIZE;

+ (jint)BYTES;

#pragma mark Public

/*!
 @brief Constructs a newly allocated <code>Character</code> object that
 represents the specified <code>char</code> value.
 @param value   the value to be represented by the
 <code>Character</code> object.
 */
- (instancetype)initWithChar:(jchar)value;

/*!
 @brief Determines the number of <code>char</code> values needed to
 represent the specified character (Unicode code point).
 If the
 specified character is equal to or greater than 0x10000, then
 the method returns 2. Otherwise, the method returns 1.
 <p>This method doesn't validate the specified character to be a
 valid Unicode code point. The caller must validate the
 character value using <code>isValidCodePoint</code>
 if necessary.
 @param codePoint the character (Unicode code point) to be tested.
 @return 2 if the character is a valid supplementary character; 1 otherwise.
 - seealso: Character#isSupplementaryCodePoint(int)
 @since 1.5
 */
+ (jint)charCountWithInt:(jint)codePoint;

/*!
 @brief Returns the value of this <code>Character</code> object.
 @return the primitive <code>char</code> value represented by
 this object.
 */
- (jchar)charValue;

/*!
 @brief Returns the code point at the given index of the
 <code>char</code> array.
 If the <code>char</code> value at
 the given index in the <code>char</code> array is in the
 high-surrogate range, the following index is less than the
 length of the <code>char</code> array, and the
 <code>char</code> value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at the given index is returned.
 @param a the <code>char</code> array
 @param index the index to the <code>char</code> values (Unicode
 code units) in the <code>char</code> array to be converted
 @return the Unicode code point at the given index
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException if the value
 <code>index</code> is negative or not less than
 the length of the <code>char</code> array.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)a
                         withInt:(jint)index;

/*!
 @brief Returns the code point at the given index of the
 <code>char</code> array, where only array elements with
 <code>index</code> less than <code>limit</code> can be used.
 If
 the <code>char</code> value at the given index in the
 <code>char</code> array is in the high-surrogate range, the
 following index is less than the <code>limit</code>, and the
 <code>char</code> value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at the given index is returned.
 @param a the <code>char</code> array
 @param index the index to the <code>char</code> values (Unicode
 code units) in the <code>char</code> array to be converted
 @param limit the index after the last array element that
 can be used in the <code>char</code> array
 @return the Unicode code point at the given index
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException if the <code>index</code>
 argument is negative or not less than the <code>limit</code>
 argument, or if the <code>limit</code> argument is negative or
 greater than the length of the <code>char</code> array.
 @since 1.5
 */
+ (jint)codePointAtWithCharArray:(IOSCharArray *)a
                         withInt:(jint)index
                         withInt:(jint)limit;

/*!
 @brief Returns the code point at the given index of the
 <code>CharSequence</code>.
 If the <code>char</code> value at
 the given index in the <code>CharSequence</code> is in the
 high-surrogate range, the following index is less than the
 length of the <code>CharSequence</code>, and the
 <code>char</code> value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at the given index is returned.
 @param seq a sequence of <code>char</code> values (Unicode code
 units)
 @param index the index to the <code>char</code> values (Unicode
 code units) in <code>seq</code> to be converted
 @return the Unicode code point at the given index
 @exception NullPointerException if <code>seq</code> is null.
 @exception IndexOutOfBoundsException if the value
 <code>index</code> is negative or not less than
 <code>seq.length()</code>.
 @since 1.5
 */
+ (jint)codePointAtWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)index;

/*!
 @brief Returns the code point preceding the given index of the
 <code>char</code> array.
 If the <code>char</code> value at
 <code>(index - 1)</code> in the <code>char</code> array is in
 the low-surrogate range, <code>(index - 2)</code> is not
 negative, and the <code>char</code> value at <code>(index - 2)</code>
 in the <code>char</code> array is in the
 high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at <code>(index - 1)</code> is
 returned.
 @param a the <code>char</code> array
 @param index the index following the code point that should be returned
 @return the Unicode code point value before the given index.
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException if the <code>index</code>
 argument is less than 1 or greater than the length of the
 <code>char</code> array
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)a
                             withInt:(jint)index;

/*!
 @brief Returns the code point preceding the given index of the
 <code>char</code> array, where only array elements with
 <code>index</code> greater than or equal to <code>start</code>
 can be used.
 If the <code>char</code> value at <code>(index - 1)</code>
 in the <code>char</code> array is in the
 low-surrogate range, <code>(index - 2)</code> is not less than
 <code>start</code>, and the <code>char</code> value at
 <code>(index - 2)</code> in the <code>char</code> array is in
 the high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at <code>(index - 1)</code> is
 returned.
 @param a the <code>char</code> array
 @param index the index following the code point that should be returned
 @param start the index of the first array element in the
 <code>char</code> array
 @return the Unicode code point value before the given index.
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException if the <code>index</code>
 argument is not greater than the <code>start</code> argument or
 is greater than the length of the <code>char</code> array, or
 if the <code>start</code> argument is negative or not less than
 the length of the <code>char</code> array.
 @since 1.5
 */
+ (jint)codePointBeforeWithCharArray:(IOSCharArray *)a
                             withInt:(jint)index
                             withInt:(jint)start;

/*!
 @brief Returns the code point preceding the given index of the
 <code>CharSequence</code>.
 If the <code>char</code> value at
 <code>(index - 1)</code> in the <code>CharSequence</code> is in
 the low-surrogate range, <code>(index - 2)</code> is not
 negative, and the <code>char</code> value at <code>(index - 2)</code>
 in the <code>CharSequence</code> is in the
 high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the <code>char</code> value at <code>(index - 1)</code> is
 returned.
 @param seq the <code>CharSequence</code> instance
 @param index the index following the code point that should be returned
 @return the Unicode code point value before the given index.
 @exception NullPointerException if <code>seq</code> is null.
 @exception IndexOutOfBoundsException if the <code>index</code>
 argument is less than 1 or greater than <code>seq.length()</code>
 .
 @since 1.5
 */
+ (jint)codePointBeforeWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                        withInt:(jint)index;

/*!
 @brief Returns the number of Unicode code points in a subarray of the
 <code>char</code> array argument.
 The <code>offset</code>
 argument is the index of the first <code>char</code> of the
 subarray and the <code>count</code> argument specifies the
 length of the subarray in <code>char</code>s. Unpaired
 surrogates within the subarray count as one code point each.
 @param a the <code>char</code> array
 @param offset the index of the first <code>char</code> in the
 given <code>char</code> array
 @param count the length of the subarray in <code>char</code>s
 @return the number of Unicode code points in the specified subarray
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException if <code>offset</code> or
 <code>count</code> is negative, or if <code>offset +
 count</code>
  is larger than the length of the given array.
 @since 1.5
 */
+ (jint)codePointCountWithCharArray:(IOSCharArray *)a
                            withInt:(jint)offset
                            withInt:(jint)count;

/*!
 @brief Returns the number of Unicode code points in the text range of
 the specified char sequence.
 The text range begins at the
 specified <code>beginIndex</code> and extends to the
 <code>char</code> at index <code>endIndex - 1</code>. Thus the
 length (in <code>char</code>s) of the text range is
 <code>endIndex-beginIndex</code>. Unpaired surrogates within
 the text range count as one code point each.
 @param seq the char sequence
 @param beginIndex the index to the first <code>char</code> of
 the text range.
 @param endIndex the index after the last <code>char</code> of
 the text range.
 @return the number of Unicode code points in the specified text
 range
 @exception NullPointerException if <code>seq</code> is null.
 @exception IndexOutOfBoundsException if the
 <code>beginIndex</code> is negative, or <code>endIndex</code>
 is larger than the length of the given sequence, or
 <code>beginIndex</code> is larger than <code>endIndex</code>.
 @since 1.5
 */
+ (jint)codePointCountWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                       withInt:(jint)beginIndex
                                       withInt:(jint)endIndex;

/*!
 @brief Compares two <code>char</code> values numerically.
 The value returned is identical to what would be returned by:
 @code

    Character.valueOf(x).compareTo(Character.valueOf(y))
  
@endcode
 @param x the first <code>char</code> to compare
 @param y the second <code>char</code> to compare
 @return the value <code>0</code> if <code>x == y</code>;
 a value less than <code>0</code> if <code>x < y</code>; and
 a value greater than <code>0</code> if <code>x > y</code>
 @since 1.7
 */
+ (jint)compareWithChar:(jchar)x
               withChar:(jchar)y;

/*!
 @brief Compares two <code>Character</code> objects numerically.
 @param anotherCharacter   the <code>Character</code> to be compared.
 @return the value <code>0</code> if the argument <code>Character</code>
 is equal to this <code>Character</code>; a value less than
 <code>0</code> if this <code>Character</code> is numerically less
 than the <code>Character</code> argument; and a value greater than
 <code>0</code> if this <code>Character</code> is numerically greater
 than the <code>Character</code> argument (unsigned comparison).
 Note that this is strictly a numerical comparison; it is not
 locale-dependent.
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangCharacter *)anotherCharacter;

/*!
 @brief Returns the numeric value of the character <code>ch</code> in the
 specified radix.
 <p>
 If the radix is not in the range <code>MIN_RADIX</code> &le;
 <code>radix</code> &le; <code>MAX_RADIX</code> or if the
 value of <code>ch</code> is not a valid digit in the specified
 radix, <code>-1</code> is returned. A character is a valid digit
 if at least one of the following is true:
 <ul>
 <li>The method <code>isDigit</code> is <code>true</code> of the character
 and the Unicode decimal digit value of the character (or its
 single-character decomposition) is less than the specified radix.
 In this case the decimal digit value is returned.
 <li>The character is one of the uppercase Latin letters
 <code>'A'</code> through <code>'Z'</code> and its code is less than
 <code>radix + 'A' - 10</code>.
 In this case, <code>ch - 'A' + 10</code>
 is returned.
 <li>The character is one of the lowercase Latin letters
 <code>'a'</code> through <code>'z'</code> and its code is less than
 <code>radix + 'a' - 10</code>.
 In this case, <code>ch - 'a' + 10</code>
 is returned.
 <li>The character is one of the fullwidth uppercase Latin letters A
 (<code>'\u005CuFF21'</code>) through Z (<code>'\u005CuFF3A'</code>)
 and its code is less than
 <code>radix + '\u005CuFF21' - 10</code>.
 In this case, <code>ch - '\u005CuFF21' + 10</code>
 is returned.
 <li>The character is one of the fullwidth lowercase Latin letters a
 (<code>'\u005CuFF41'</code>) through z (<code>'\u005CuFF5A'</code>)
 and its code is less than
 <code>radix + '\u005CuFF41' - 10</code>.
 In this case, <code>ch - '\u005CuFF41' + 10</code>
 is returned.
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>digit(int,int)</code> method.
 @param ch      the character to be converted.
 @param radix   the radix.
 @return the numeric value represented by the character in the
 specified radix.
 - seealso: Character#forDigit(int,int)
 - seealso: Character#isDigit(char)
 */
+ (jint)digitWithChar:(jchar)ch
              withInt:(jint)radix;

/*!
 @brief Returns the numeric value of the specified character (Unicode
 code point) in the specified radix.
 <p>If the radix is not in the range <code>MIN_RADIX</code> &le;
 <code>radix</code> &le; <code>MAX_RADIX</code> or if the
 character is not a valid digit in the specified
 radix, <code>-1</code> is returned. A character is a valid digit
 if at least one of the following is true:
 <ul>
 <li>The method <code>isDigit(codePoint)</code> is <code>true</code> of the character
 and the Unicode decimal digit value of the character (or its
 single-character decomposition) is less than the specified radix.
 In this case the decimal digit value is returned.
 <li>The character is one of the uppercase Latin letters
 <code>'A'</code> through <code>'Z'</code> and its code is less than
 <code>radix + 'A' - 10</code>.
 In this case, <code>codePoint - 'A' + 10</code>
 is returned.
 <li>The character is one of the lowercase Latin letters
 <code>'a'</code> through <code>'z'</code> and its code is less than
 <code>radix + 'a' - 10</code>.
 In this case, <code>codePoint - 'a' + 10</code>
 is returned.
 <li>The character is one of the fullwidth uppercase Latin letters A
 (<code>'\u005CuFF21'</code>) through Z (<code>'\u005CuFF3A'</code>)
 and its code is less than
 <code>radix + '\u005CuFF21' - 10</code>.
 In this case,
 <code>codePoint - '\u005CuFF21' + 10</code>
 is returned.
 <li>The character is one of the fullwidth lowercase Latin letters a
 (<code>'\u005CuFF41'</code>) through z (<code>'\u005CuFF5A'</code>)
 and its code is less than
 <code>radix + '\u005CuFF41'- 10</code>.
 In this case,
 <code>codePoint - '\u005CuFF41' + 10</code>
 is returned.
 </ul>
 @param codePoint the character (Unicode code point) to be converted.
 @param radix   the radix.
 @return the numeric value represented by the character in the
 specified radix.
 - seealso: Character#forDigit(int,int)
 - seealso: Character#isDigit(int)
 @since 1.5
 */
+ (jint)digitWithInt:(jint)codePoint
             withInt:(jint)radix;

/*!
 @brief Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is not
 <code>null</code> and is a <code>Character</code> object that
 represents the same <code>char</code> value as this object.
 @param obj   the object to compare with.
 @return <code>true</code> if the objects are the same;
 <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Determines the character representation for a specific digit in
 the specified radix.
 If the value of <code>radix</code> is not a
 valid radix, or the value of <code>digit</code> is not a valid
 digit in the specified radix, the null character
 (<code>'\u005Cu0000'</code>) is returned.
 <p>
 The <code>radix</code> argument is valid if it is greater than or
 equal to <code>MIN_RADIX</code> and less than or equal to
 <code>MAX_RADIX</code>. The <code>digit</code> argument is valid if
 <code>0 <= digit < radix</code>.
 <p>
 If the digit is less than 10, then
 <code>'0' + digit</code> is returned. Otherwise, the value
 <code>'a' + digit - 10</code> is returned.
 @param digit   the number to convert to a character.
 @param radix   the radix.
 @return the <code>char</code> representation of the specified digit
 in the specified radix.
 - seealso: Character#MIN_RADIX
 - seealso: Character#MAX_RADIX
 - seealso: Character#digit(char,int)
 */
+ (jchar)forDigitWithInt:(jint)digit
                 withInt:(jint)radix;

/*!
 @brief Returns the Unicode directionality property for the given
 character.
 Character directionality is used to calculate the
 visual ordering of text. The directionality value of undefined
 <code>char</code> values is <code>DIRECTIONALITY_UNDEFINED</code>.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>getDirectionality(int)</code> method.
 @param ch <code>char</code> for which the directionality property
 is requested.
 @return the directionality property of the <code>char</code> value.
 - seealso: Character#DIRECTIONALITY_UNDEFINED
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
 - seealso: Character#DIRECTIONALITY_ARABIC_NUMBER
 - seealso: Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
 - seealso: Character#DIRECTIONALITY_NONSPACING_MARK
 - seealso: Character#DIRECTIONALITY_BOUNDARY_NEUTRAL
 - seealso: Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR
 - seealso: Character#DIRECTIONALITY_SEGMENT_SEPARATOR
 - seealso: Character#DIRECTIONALITY_WHITESPACE
 - seealso: Character#DIRECTIONALITY_OTHER_NEUTRALS
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
 - seealso: Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
 @since 1.4
 */
+ (jbyte)getDirectionalityWithChar:(jchar)ch;

/*!
 @brief Returns the Unicode directionality property for the given
 character (Unicode code point).
 Character directionality is
 used to calculate the visual ordering of text. The
 directionality value of undefined character is <code>DIRECTIONALITY_UNDEFINED</code>
 .
 @param codePoint the character (Unicode code point) for which
 the directionality property is requested.
 @return the directionality property of the character.
 - seealso: Character#DIRECTIONALITY_UNDEFINED DIRECTIONALITY_UNDEFINED
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT DIRECTIONALITY_LEFT_TO_RIGHT
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT DIRECTIONALITY_RIGHT_TO_LEFT
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER DIRECTIONALITY_EUROPEAN_NUMBER
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
 - seealso: Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
 - seealso: Character#DIRECTIONALITY_ARABIC_NUMBER DIRECTIONALITY_ARABIC_NUMBER
 - seealso: Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
 - seealso: Character#DIRECTIONALITY_NONSPACING_MARK DIRECTIONALITY_NONSPACING_MARK
 - seealso: Character#DIRECTIONALITY_BOUNDARY_NEUTRAL DIRECTIONALITY_BOUNDARY_NEUTRAL
 - seealso: Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR DIRECTIONALITY_PARAGRAPH_SEPARATOR
 - seealso: Character#DIRECTIONALITY_SEGMENT_SEPARATOR DIRECTIONALITY_SEGMENT_SEPARATOR
 - seealso: Character#DIRECTIONALITY_WHITESPACE DIRECTIONALITY_WHITESPACE
 - seealso: Character#DIRECTIONALITY_OTHER_NEUTRALS DIRECTIONALITY_OTHER_NEUTRALS
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
 - seealso: Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
 - seealso: Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
 - seealso: Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
 @since 1.5
 */
+ (jbyte)getDirectionalityWithInt:(jint)codePoint;

/*!
 @brief Returns the Unicode name of the specified character
 <code>codePoint</code>, or null if the code point is
 <code>unassigned</code>.
 <p>
 Note: if the specified character is not assigned a name by
 the <i>UnicodeData</i> file (part of the Unicode Character
 Database maintained by the Unicode Consortium), the returned
 name is the same as the result of expression.
 <blockquote><code>Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ')
 + " "
 + Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH);</code>
 </blockquote>
 @param codePoint the character (Unicode code point)
 @return the Unicode name of the specified character, or null if
 the code point is unassigned.
 @exception IllegalArgumentException if the specified
 <code>codePoint</code> is not a valid Unicode
 code point.
 @since 1.7
 */
+ (NSString *)getNameWithInt:(jint)codePoint;

/*!
 @brief Returns the <code>int</code> value that the specified Unicode
 character represents.
 For example, the character
 <code>'\u005Cu216C'</code> (the roman numeral fifty) will return
 an int with a value of 50.
 <p>
 The letters A-Z in their uppercase (<code>'\u005Cu0041'</code> through
 <code>'\u005Cu005A'</code>), lowercase
 (<code>'\u005Cu0061'</code> through <code>'\u005Cu007A'</code>), and
 full width variant (<code>'\u005CuFF21'</code> through
 <code>'\u005CuFF3A'</code> and <code>'\u005CuFF41'</code> through
 <code>'\u005CuFF5A'</code>) forms have numeric values from 10
 through 35. This is independent of the Unicode specification,
 which does not assign numeric values to these <code>char</code>
 values.
 <p>
 If the character does not have a numeric value, then -1 is returned.
 If the character has a numeric value that cannot be represented as a
 nonnegative integer (for example, a fractional value), then -2
 is returned.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>getNumericValue(int)</code> method.
 @param ch      the character to be converted.
 @return the numeric value of the character, as a nonnegative <code>int</code>
 value; -2 if the character has a numeric value that is not a
 nonnegative integer; -1 if the character has no numeric value.
 - seealso: Character#forDigit(int,int)
 - seealso: Character#isDigit(char)
 @since 1.1
 */
+ (jint)getNumericValueWithChar:(jchar)ch;

/*!
 @brief Returns the <code>int</code> value that the specified
 character (Unicode code point) represents.
 For example, the character
 <code>'\u005Cu216C'</code> (the Roman numeral fifty) will return
 an <code>int</code> with a value of 50.
 <p>
 The letters A-Z in their uppercase (<code>'\u005Cu0041'</code> through
 <code>'\u005Cu005A'</code>), lowercase
 (<code>'\u005Cu0061'</code> through <code>'\u005Cu007A'</code>), and
 full width variant (<code>'\u005CuFF21'</code> through
 <code>'\u005CuFF3A'</code> and <code>'\u005CuFF41'</code> through
 <code>'\u005CuFF5A'</code>) forms have numeric values from 10
 through 35. This is independent of the Unicode specification,
 which does not assign numeric values to these <code>char</code>
 values.
 <p>
 If the character does not have a numeric value, then -1 is returned.
 If the character has a numeric value that cannot be represented as a
 nonnegative integer (for example, a fractional value), then -2
 is returned.
 @param codePoint the character (Unicode code point) to be converted.
 @return the numeric value of the character, as a nonnegative <code>int</code>
 value; -2 if the character has a numeric value that is not a
 nonnegative integer; -1 if the character has no numeric value.
 - seealso: Character#forDigit(int,int)
 - seealso: Character#isDigit(int)
 @since 1.5
 */
+ (jint)getNumericValueWithInt:(jint)codePoint;

/*!
 @brief Returns a value indicating a character's general category.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>getType(int)</code> method.
 @param ch      the character to be tested.
 @return a value of type <code>int</code> representing the
 character's general category.
 - seealso: Character#COMBINING_SPACING_MARK
 - seealso: Character#CONNECTOR_PUNCTUATION
 - seealso: Character#CONTROL
 - seealso: Character#CURRENCY_SYMBOL
 - seealso: Character#DASH_PUNCTUATION
 - seealso: Character#DECIMAL_DIGIT_NUMBER
 - seealso: Character#ENCLOSING_MARK
 - seealso: Character#END_PUNCTUATION
 - seealso: Character#FINAL_QUOTE_PUNCTUATION
 - seealso: Character#FORMAT
 - seealso: Character#INITIAL_QUOTE_PUNCTUATION
 - seealso: Character#LETTER_NUMBER
 - seealso: Character#LINE_SEPARATOR
 - seealso: Character#LOWERCASE_LETTER
 - seealso: Character#MATH_SYMBOL
 - seealso: Character#MODIFIER_LETTER
 - seealso: Character#MODIFIER_SYMBOL
 - seealso: Character#NON_SPACING_MARK
 - seealso: Character#OTHER_LETTER
 - seealso: Character#OTHER_NUMBER
 - seealso: Character#OTHER_PUNCTUATION
 - seealso: Character#OTHER_SYMBOL
 - seealso: Character#PARAGRAPH_SEPARATOR
 - seealso: Character#PRIVATE_USE
 - seealso: Character#SPACE_SEPARATOR
 - seealso: Character#START_PUNCTUATION
 - seealso: Character#SURROGATE
 - seealso: Character#TITLECASE_LETTER
 - seealso: Character#UNASSIGNED
 - seealso: Character#UPPERCASE_LETTER
 @since 1.1
 */
+ (jint)getTypeWithChar:(jchar)ch;

/*!
 @brief Returns a value indicating a character's general category.
 @param codePoint the character (Unicode code point) to be tested.
 @return a value of type <code>int</code> representing the
 character's general category.
 - seealso: Character#COMBINING_SPACING_MARK COMBINING_SPACING_MARK
 - seealso: Character#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION
 - seealso: Character#CONTROL CONTROL
 - seealso: Character#CURRENCY_SYMBOL CURRENCY_SYMBOL
 - seealso: Character#DASH_PUNCTUATION DASH_PUNCTUATION
 - seealso: Character#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER
 - seealso: Character#ENCLOSING_MARK ENCLOSING_MARK
 - seealso: Character#END_PUNCTUATION END_PUNCTUATION
 - seealso: Character#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION
 - seealso: Character#FORMAT FORMAT
 - seealso: Character#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION
 - seealso: Character#LETTER_NUMBER LETTER_NUMBER
 - seealso: Character#LINE_SEPARATOR LINE_SEPARATOR
 - seealso: Character#LOWERCASE_LETTER LOWERCASE_LETTER
 - seealso: Character#MATH_SYMBOL MATH_SYMBOL
 - seealso: Character#MODIFIER_LETTER MODIFIER_LETTER
 - seealso: Character#MODIFIER_SYMBOL MODIFIER_SYMBOL
 - seealso: Character#NON_SPACING_MARK NON_SPACING_MARK
 - seealso: Character#OTHER_LETTER OTHER_LETTER
 - seealso: Character#OTHER_NUMBER OTHER_NUMBER
 - seealso: Character#OTHER_PUNCTUATION OTHER_PUNCTUATION
 - seealso: Character#OTHER_SYMBOL OTHER_SYMBOL
 - seealso: Character#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR
 - seealso: Character#PRIVATE_USE PRIVATE_USE
 - seealso: Character#SPACE_SEPARATOR SPACE_SEPARATOR
 - seealso: Character#START_PUNCTUATION START_PUNCTUATION
 - seealso: Character#SURROGATE SURROGATE
 - seealso: Character#TITLECASE_LETTER TITLECASE_LETTER
 - seealso: Character#UNASSIGNED UNASSIGNED
 - seealso: Character#UPPERCASE_LETTER UPPERCASE_LETTER
 @since 1.5
 */
+ (jint)getTypeWithInt:(jint)codePoint;

/*!
 @brief Returns a hash code for this <code>Character</code>; equal to the result
 of invoking <code>charValue()</code>.
 @return a hash code value for this <code>Character</code>
 */
- (NSUInteger)hash;

/*!
 @brief Returns a hash code for a <code>char</code> value; compatible with
 <code>Character.hashCode()</code>.
 @since 1.8
 @param value The <code>char</code> for which to return a hash code.
 @return a hash code value for a <code>char</code> value.
 */
+ (jint)hashCodeWithChar:(jchar)value;

/*!
 @brief Returns the leading surrogate (a
 <a href="http://www.unicode.org/glossary/#high_surrogate_code_unit">
 high surrogate code unit</a>) of the
 <a href="http://www.unicode.org/glossary/#surrogate_pair">
 surrogate pair</a>
 representing the specified supplementary character (Unicode
 code point) in the UTF-16 encoding.
 If the specified character
 is not a
 <a href="Character.html#supplementary">supplementary character</a>,
 an unspecified <code>char</code> is returned.
 <p>If
 <code>isSupplementaryCodePoint(x)</code>
 is <code>true</code>, then
 <code>isHighSurrogate</code><code>(highSurrogate(x))</code> and
 <code>toCodePoint</code><code>(highSurrogate(x),</code><code>lowSurrogate</code><code>(x)) == x</code>
 are also always <code>true</code>.
 @param codePoint a supplementary character (Unicode code point)
 @return the leading surrogate code unit used to represent the
 character in the UTF-16 encoding
 @since 1.7
 */
+ (jchar)highSurrogateWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character (Unicode code point) is an alphabet.
 <p>
 A character is considered to be alphabetic if its general category type,
 provided by <code>getType(codePoint)</code>, is any of
 the following:
 <ul>
 <li> <code>UPPERCASE_LETTER</code>
 <li> <code>LOWERCASE_LETTER</code>
 <li> <code>TITLECASE_LETTER</code>
 <li> <code>MODIFIER_LETTER</code>
 <li> <code>OTHER_LETTER</code>
 <li> <code>LETTER_NUMBER</code>
 </ul>
 or it has contributory property Other_Alphabetic as defined by the
 Unicode Standard.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a Unicode alphabet
 character, <code>false</code> otherwise.
 @since 1.7
 */
+ (jboolean)isAlphabeticWithInt:(jint)codePoint;

/*!
 @brief Determines whether the specified character (Unicode code point)
 is in the <a href="#BMP">Basic Multilingual Plane (BMP)</a>.
 Such code points can be represented using a single <code>char</code>.
 @param codePoint the character (Unicode code point) to be tested
 @return <code>true</code> if the specified code point is between
 <code>MIN_VALUE</code> and <code>MAX_VALUE</code> inclusive;
 <code>false</code> otherwise.
 @since 1.7
 */
+ (jboolean)isBmpCodePointWithInt:(jint)codePoint;

/*!
 @brief Determines if a character is defined in Unicode.
 <p>
 A character is defined if at least one of the following is true:
 <ul>
 <li>It has an entry in the UnicodeData file.
 <li>It has a value in a range defined by the UnicodeData file.
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isDefined(int)</code> method.
 @param ch   the character to be tested
 @return <code>true</code> if the character has a defined meaning
 in Unicode; <code>false</code> otherwise.
 - seealso: Character#isDigit(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isLowerCase(char)
 - seealso: Character#isTitleCase(char)
 - seealso: Character#isUpperCase(char)
 @since 1.0.2
 */
+ (jboolean)isDefinedWithChar:(jchar)ch;

/*!
 @brief Determines if a character (Unicode code point) is defined in Unicode.
 <p>
 A character is defined if at least one of the following is true:
 <ul>
 <li>It has an entry in the UnicodeData file.
 <li>It has a value in a range defined by the UnicodeData file.
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character has a defined meaning
 in Unicode; <code>false</code> otherwise.
 - seealso: Character#isDigit(int)
 - seealso: Character#isLetter(int)
 - seealso: Character#isLetterOrDigit(int)
 - seealso: Character#isLowerCase(int)
 - seealso: Character#isTitleCase(int)
 - seealso: Character#isUpperCase(int)
 @since 1.5
 */
+ (jboolean)isDefinedWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is a digit.
 <p>
 A character is a digit if its general category type, provided
 by <code>Character.getType(ch)</code>, is
 <code>DECIMAL_DIGIT_NUMBER</code>.
 <p>
 Some Unicode character ranges that contain digits:
 <ul>
 <li><code>'\u005Cu0030'</code> through <code>'\u005Cu0039'</code>,
 ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)
 <li><code>'\u005Cu0660'</code> through <code>'\u005Cu0669'</code>,
 Arabic-Indic digits
 <li><code>'\u005Cu06F0'</code> through <code>'\u005Cu06F9'</code>,
 Extended Arabic-Indic digits
 <li><code>'\u005Cu0966'</code> through <code>'\u005Cu096F'</code>,
 Devanagari digits
 <li><code>'\u005CuFF10'</code> through <code>'\u005CuFF19'</code>,
 Fullwidth digits
 </ul>
 Many other character ranges contain digits as well.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isDigit(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is a digit;
 <code>false</code> otherwise.
 - seealso: Character#digit(char,int)
 - seealso: Character#forDigit(int,int)
 - seealso: Character#getType(char)
 */
+ (jboolean)isDigitWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a digit.
 <p>
 A character is a digit if its general category type, provided
 by <code>getType(codePoint)</code>, is
 <code>DECIMAL_DIGIT_NUMBER</code>.
 <p>
 Some Unicode character ranges that contain digits:
 <ul>
 <li><code>'\u005Cu0030'</code> through <code>'\u005Cu0039'</code>,
 ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)
 <li><code>'\u005Cu0660'</code> through <code>'\u005Cu0669'</code>,
 Arabic-Indic digits
 <li><code>'\u005Cu06F0'</code> through <code>'\u005Cu06F9'</code>,
 Extended Arabic-Indic digits
 <li><code>'\u005Cu0966'</code> through <code>'\u005Cu096F'</code>,
 Devanagari digits
 <li><code>'\u005CuFF10'</code> through <code>'\u005CuFF19'</code>,
 Fullwidth digits
 </ul>
 Many other character ranges contain digits as well.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a digit;
 <code>false</code> otherwise.
 - seealso: Character#forDigit(int,int)
 - seealso: Character#getType(int)
 @since 1.5
 */
+ (jboolean)isDigitWithInt:(jint)codePoint;

/*!
 @brief Determines if the given <code>char</code> value is a
 <a href="http://www.unicode.org/glossary/#high_surrogate_code_unit">
 Unicode high-surrogate code unit</a>
 (also known as <i>leading-surrogate code unit</i>).
 <p>Such values do not represent characters by themselves,
 but are used in the representation of
 <a href="#supplementary">supplementary characters</a>
 in the UTF-16 encoding.
 @param ch the <code>char</code> value to be tested.
 @return <code>true</code> if the <code>char</code> value is between
 <code>MIN_HIGH_SURROGATE</code> and
 <code>MAX_HIGH_SURROGATE</code> inclusive;
 <code>false</code> otherwise.
 - seealso: Character#isLowSurrogate(char)
 - seealso: Character.UnicodeBlock#of(int)
 @since 1.5
 */
+ (jboolean)isHighSurrogateWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
 <p>
 The following Unicode characters are ignorable in a Java identifier
 or a Unicode identifier:
 <ul>
 <li>ISO control characters that are not whitespace
 <ul>
 <li><code>'\u005Cu0000'</code> through <code>'\u005Cu0008'</code>
 <li><code>'\u005Cu000E'</code> through <code>'\u005Cu001B'</code>
 <li><code>'\u005Cu007F'</code> through <code>'\u005Cu009F'</code>
 </ul>
 <li>all characters that have the <code>FORMAT</code> general
 category value
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isIdentifierIgnorable(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character is an ignorable control
 character that may be part of a Java or Unicode identifier;
 <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isUnicodeIdentifierPart(char)
 @since 1.1
 */
+ (jboolean)isIdentifierIgnorableWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
 <p>
 The following Unicode characters are ignorable in a Java identifier
 or a Unicode identifier:
 <ul>
 <li>ISO control characters that are not whitespace
 <ul>
 <li><code>'\u005Cu0000'</code> through <code>'\u005Cu0008'</code>
 <li><code>'\u005Cu000E'</code> through <code>'\u005Cu001B'</code>
 <li><code>'\u005Cu007F'</code> through <code>'\u005Cu009F'</code>
 </ul>
 <li>all characters that have the <code>FORMAT</code> general
 category value
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is an ignorable control
 character that may be part of a Java or Unicode identifier;
 <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierPart(int)
 - seealso: Character#isUnicodeIdentifierPart(int)
 @since 1.5
 */
+ (jboolean)isIdentifierIgnorableWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character (Unicode code point) is a CJKV
 (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by
 the Unicode Standard.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a Unicode ideograph
 character, <code>false</code> otherwise.
 @since 1.7
 */
+ (jboolean)isIdeographicWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is an ISO control
 character.
 A character is considered to be an ISO control
 character if its code is in the range <code>'\u005Cu0000'</code>
 through <code>'\u005Cu001F'</code> or in the range
 <code>'\u005Cu007F'</code> through <code>'\u005Cu009F'</code>.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isISOControl(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character is an ISO control character;
 <code>false</code> otherwise.
 - seealso: Character#isSpaceChar(char)
 - seealso: Character#isWhitespace(char)
 @since 1.1
 */
+ (jboolean)isISOControlWithChar:(jchar)ch;

/*!
 @brief Determines if the referenced character (Unicode code point) is an ISO control
 character.
 A character is considered to be an ISO control
 character if its code is in the range <code>'\u005Cu0000'</code>
 through <code>'\u005Cu001F'</code> or in the range
 <code>'\u005Cu007F'</code> through <code>'\u005Cu009F'</code>.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is an ISO control character;
 <code>false</code> otherwise.
 - seealso: Character#isSpaceChar(int)
 - seealso: Character#isWhitespace(int)
 @since 1.5
 */
+ (jboolean)isISOControlWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character may be part of a Java
 identifier as other than the first character.
 <p>
 A character may be part of a Java identifier if any of the following
 are true:
 <ul>
 <li>  it is a letter
 <li>  it is a currency symbol (such as <code>'$'</code>)
 <li>  it is a connecting punctuation character (such as <code>'_'</code>)
 <li>  it is a digit
 <li>  it is a numeric letter (such as a Roman numeral character)
 <li>  it is a combining mark
 <li>  it is a non-spacing mark
 <li> <code>isIdentifierIgnorable</code> returns
 <code>true</code> for the character
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isJavaIdentifierPart(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character may be part of a
 Java identifier; <code>false</code> otherwise.
 - seealso: Character#isIdentifierIgnorable(char)
 - seealso: Character#isJavaIdentifierStart(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isUnicodeIdentifierPart(char)
 - seealso: javax.lang.model.SourceVersion#isIdentifier(CharSequence)
 @since 1.1
 */
+ (jboolean)isJavaIdentifierPartWithChar:(jchar)ch;

/*!
 @brief Determines if the character (Unicode code point) may be part of a Java
 identifier as other than the first character.
 <p>
 A character may be part of a Java identifier if any of the following
 are true:
 <ul>
 <li>  it is a letter
 <li>  it is a currency symbol (such as <code>'$'</code>)
 <li>  it is a connecting punctuation character (such as <code>'_'</code>)
 <li>  it is a digit
 <li>  it is a numeric letter (such as a Roman numeral character)
 <li>  it is a combining mark
 <li>  it is a non-spacing mark
 <li> <code>isIdentifierIgnorable(codePoint)</code>
  returns <code>true</code> for
 the character
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character may be part of a
 Java identifier; <code>false</code> otherwise.
 - seealso: Character#isIdentifierIgnorable(int)
 - seealso: Character#isJavaIdentifierStart(int)
 - seealso: Character#isLetterOrDigit(int)
 - seealso: Character#isUnicodeIdentifierPart(int)
 - seealso: javax.lang.model.SourceVersion#isIdentifier(CharSequence)
 @since 1.5
 */
+ (jboolean)isJavaIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is
 permissible as the first character in a Java identifier.
 <p>
 A character may start a Java identifier if and only if
 one of the following conditions is true:
 <ul>
 <li> <code>isLetter(ch)</code> returns <code>true</code>
 <li> <code>getType(ch)</code> returns <code>LETTER_NUMBER</code>
 <li> <code>ch</code> is a currency symbol (such as <code>'$'</code>)
 <li> <code>ch</code> is a connecting punctuation character (such as <code>'_'</code>).
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isJavaIdentifierStart(int)</code> method.
 @param ch the character to be tested.
 @return <code>true</code> if the character may start a Java identifier;
 <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isUnicodeIdentifierStart(char)
 - seealso: javax.lang.model.SourceVersion#isIdentifier(CharSequence)
 @since 1.1
 */
+ (jboolean)isJavaIdentifierStartWithChar:(jchar)ch;

/*!
 @brief Determines if the character (Unicode code point) is
 permissible as the first character in a Java identifier.
 <p>
 A character may start a Java identifier if and only if
 one of the following conditions is true:
 <ul>
 <li> <code>isLetter(codePoint)</code>
 returns <code>true</code>
 <li> <code>getType(codePoint)</code>
 returns <code>LETTER_NUMBER</code>
 <li> the referenced character is a currency symbol (such as <code>'$'</code>)
 <li> the referenced character is a connecting punctuation character
 (such as <code>'_'</code>).
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character may start a Java identifier;
 <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierPart(int)
 - seealso: Character#isLetter(int)
 - seealso: Character#isUnicodeIdentifierStart(int)
 - seealso: javax.lang.model.SourceVersion#isIdentifier(CharSequence)
 @since 1.5
 */
+ (jboolean)isJavaIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is permissible as the first
 character in a Java identifier.
 <p>
 A character may start a Java identifier if and only if
 one of the following is true:
 <ul>
 <li> <code>isLetter(ch)</code> returns <code>true</code>
 <li> <code>getType(ch)</code> returns <code>LETTER_NUMBER</code>
 <li> <code>ch</code> is a currency symbol (such as <code>'$'</code>)
 <li> <code>ch</code> is a connecting punctuation character (such as <code>'_'</code>).
 </ul>
 @param ch the character to be tested.
 @return <code>true</code> if the character may start a Java
 identifier; <code>false</code> otherwise.
 - seealso: Character#isJavaLetterOrDigit(char)
 - seealso: Character#isJavaIdentifierStart(char)
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isUnicodeIdentifierStart(char)
 @since 1.02
 */
+ (jboolean)isJavaLetterWithChar:(jchar)ch __attribute__((deprecated));

/*!
 @brief Determines if the specified character may be part of a Java
 identifier as other than the first character.
 <p>
 A character may be part of a Java identifier if and only if any
 of the following are true:
 <ul>
 <li>  it is a letter
 <li>  it is a currency symbol (such as <code>'$'</code>)
 <li>  it is a connecting punctuation character (such as <code>'_'</code>)
 <li>  it is a digit
 <li>  it is a numeric letter (such as a Roman numeral character)
 <li>  it is a combining mark
 <li>  it is a non-spacing mark
 <li> <code>isIdentifierIgnorable</code> returns
 <code>true</code> for the character.
 </ul>
 @param ch the character to be tested.
 @return <code>true</code> if the character may be part of a
 Java identifier; <code>false</code> otherwise.
 - seealso: Character#isJavaLetter(char)
 - seealso: Character#isJavaIdentifierStart(char)
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isUnicodeIdentifierPart(char)
 - seealso: Character#isIdentifierIgnorable(char)
 @since 1.02
 */
+ (jboolean)isJavaLetterOrDigitWithChar:(jchar)ch __attribute__((deprecated));

/*!
 @brief Determines if the specified character is a letter.
 <p>
 A character is considered to be a letter if its general
 category type, provided by <code>Character.getType(ch)</code>,
 is any of the following:
 <ul>
 <li> <code>UPPERCASE_LETTER</code>
 <li> <code>LOWERCASE_LETTER</code>
 <li> <code>TITLECASE_LETTER</code>
 <li> <code>MODIFIER_LETTER</code>
 <li> <code>OTHER_LETTER</code>
 </ul>
 Not all letters have case. Many characters are
 letters but are neither uppercase nor lowercase nor titlecase.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isLetter(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is a letter;
 <code>false</code> otherwise.
 - seealso: Character#isDigit(char)
 - seealso: Character#isJavaIdentifierStart(char)
 - seealso: Character#isJavaLetter(char)
 - seealso: Character#isJavaLetterOrDigit(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isLowerCase(char)
 - seealso: Character#isTitleCase(char)
 - seealso: Character#isUnicodeIdentifierStart(char)
 - seealso: Character#isUpperCase(char)
 */
+ (jboolean)isLetterWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a letter.
 <p>
 A character is considered to be a letter if its general
 category type, provided by <code>getType(codePoint)</code>,
 is any of the following:
 <ul>
 <li> <code>UPPERCASE_LETTER</code>
 <li> <code>LOWERCASE_LETTER</code>
 <li> <code>TITLECASE_LETTER</code>
 <li> <code>MODIFIER_LETTER</code>
 <li> <code>OTHER_LETTER</code>
 </ul>
 Not all letters have case. Many characters are
 letters but are neither uppercase nor lowercase nor titlecase.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a letter;
 <code>false</code> otherwise.
 - seealso: Character#isDigit(int)
 - seealso: Character#isJavaIdentifierStart(int)
 - seealso: Character#isLetterOrDigit(int)
 - seealso: Character#isLowerCase(int)
 - seealso: Character#isTitleCase(int)
 - seealso: Character#isUnicodeIdentifierStart(int)
 - seealso: Character#isUpperCase(int)
 @since 1.5
 */
+ (jboolean)isLetterWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is a letter or digit.
 <p>
 A character is considered to be a letter or digit if either
 <code>Character.isLetter(char ch)</code> or
 <code>Character.isDigit(char ch)</code> returns
 <code>true</code> for the character.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isLetterOrDigit(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is a letter or digit;
 <code>false</code> otherwise.
 - seealso: Character#isDigit(char)
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isJavaLetter(char)
 - seealso: Character#isJavaLetterOrDigit(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isUnicodeIdentifierPart(char)
 @since 1.0.2
 */
+ (jboolean)isLetterOrDigitWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a letter or digit.
 <p>
 A character is considered to be a letter or digit if either
 <code>isLetter(codePoint)</code> or
 <code>isDigit(codePoint)</code> returns
 <code>true</code> for the character.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a letter or digit;
 <code>false</code> otherwise.
 - seealso: Character#isDigit(int)
 - seealso: Character#isJavaIdentifierPart(int)
 - seealso: Character#isLetter(int)
 - seealso: Character#isUnicodeIdentifierPart(int)
 @since 1.5
 */
+ (jboolean)isLetterOrDigitWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is a lowercase character.
 <p>
 A character is lowercase if its general category type, provided
 by <code>Character.getType(ch)</code>, is
 <code>LOWERCASE_LETTER</code>, or it has contributory property
 Other_Lowercase as defined by the Unicode Standard.
 <p>
 The following are examples of lowercase characters:
 <blockquote>
@code

  a b c d e f g h i j k l m n o p q r s t u v w x y z
  '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6'
  '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
  '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
  '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
  
@endcode</blockquote>
 <p> Many other Unicode characters are lowercase too.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isLowerCase(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is lowercase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(char)
 - seealso: Character#isTitleCase(char)
 - seealso: Character#toLowerCase(char)
 - seealso: Character#getType(char)
 */
+ (jboolean)isLowerCaseWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a
 lowercase character.
 <p>
 A character is lowercase if its general category type, provided
 by <code>getType(codePoint)</code>, is
 <code>LOWERCASE_LETTER</code>, or it has contributory property
 Other_Lowercase as defined by the Unicode Standard.
 <p>
 The following are examples of lowercase characters:
 <blockquote>
@code

  a b c d e f g h i j k l m n o p q r s t u v w x y z
  '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6'
  '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
  '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
  '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
  
@endcode</blockquote>
 <p> Many other Unicode characters are lowercase too.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is lowercase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(int)
 - seealso: Character#isTitleCase(int)
 - seealso: Character#toLowerCase(int)
 - seealso: Character#getType(int)
 @since 1.5
 */
+ (jboolean)isLowerCaseWithInt:(jint)codePoint;

/*!
 @brief Determines if the given <code>char</code> value is a
 <a href="http://www.unicode.org/glossary/#low_surrogate_code_unit">
 Unicode low-surrogate code unit</a>
 (also known as <i>trailing-surrogate code unit</i>).
 <p>Such values do not represent characters by themselves,
 but are used in the representation of
 <a href="#supplementary">supplementary characters</a>
 in the UTF-16 encoding.
 @param ch the <code>char</code> value to be tested.
 @return <code>true</code> if the <code>char</code> value is between
 <code>MIN_LOW_SURROGATE</code> and
 <code>MAX_LOW_SURROGATE</code> inclusive;
 <code>false</code> otherwise.
 - seealso: Character#isHighSurrogate(char)
 @since 1.5
 */
+ (jboolean)isLowSurrogateWithChar:(jchar)ch;

/*!
 @brief Determines whether the character is mirrored according to the
 Unicode specification.
 Mirrored characters should have their
 glyphs horizontally mirrored when displayed in text that is
 right-to-left.  For example, <code>'\u005Cu0028'</code> LEFT
 PARENTHESIS is semantically defined to be an <i>opening
 parenthesis</i>.  This will appear as a "(" in text that is
 left-to-right but as a ")" in text that is right-to-left.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isMirrored(int)</code> method.
 @param ch <code>char</code> for which the mirrored property is requested
 @return <code>true</code> if the char is mirrored, <code>false</code>
 if the <code>char</code> is not mirrored or is not defined.
 @since 1.4
 */
+ (jboolean)isMirroredWithChar:(jchar)ch;

/*!
 @brief Determines whether the specified character (Unicode code point)
 is mirrored according to the Unicode specification.
 Mirrored
 characters should have their glyphs horizontally mirrored when
 displayed in text that is right-to-left.  For example,
 <code>'\u005Cu0028'</code> LEFT PARENTHESIS is semantically
 defined to be an <i>opening parenthesis</i>.  This will appear
 as a "(" in text that is left-to-right but as a ")" in text
 that is right-to-left.
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is mirrored, <code>false</code>
 if the character is not mirrored or is not defined.
 @since 1.5
 */
+ (jboolean)isMirroredWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is ISO-LATIN-1 white space.
 This method returns <code>true</code> for the following five
 characters only:
 <table summary="truechars">
 <tr><td><code>'\t'</code></td>            <td><code>U+0009</code></td>
 <td><code>HORIZONTAL TABULATION</code></td></tr>
 <tr><td><code>'\n'</code></td>            <td><code>U+000A</code></td>
 <td><code>NEW LINE</code></td></tr>
 <tr><td><code>'\f'</code></td>            <td><code>U+000C</code></td>
 <td><code>FORM FEED</code></td></tr>
 <tr><td><code>'\r'</code></td>            <td><code>U+000D</code></td>
 <td><code>CARRIAGE RETURN</code></td></tr>
 <tr><td><code>'&nbsp;'</code></td>  <td><code>U+0020</code></td>
 <td><code>SPACE</code></td></tr>
 </table>
 @param ch   the character to be tested.
 @return <code>true</code> if the character is ISO-LATIN-1 white
 space; <code>false</code> otherwise.
 - seealso: Character#isSpaceChar(char)
 - seealso: Character#isWhitespace(char)
 */
+ (jboolean)isSpaceWithChar:(jchar)ch __attribute__((deprecated));

/*!
 @brief Determines if the specified character is a Unicode space character.
 A character is considered to be a space character if and only if
 it is specified to be a space character by the Unicode Standard. This
 method returns true if the character's general category type is any of
 the following:
 <ul>
 <li> <code>SPACE_SEPARATOR</code>
 <li> <code>LINE_SEPARATOR</code>
 <li> <code>PARAGRAPH_SEPARATOR</code>
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isSpaceChar(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character is a space character;
 <code>false</code> otherwise.
 - seealso: Character#isWhitespace(char)
 @since 1.1
 */
+ (jboolean)isSpaceCharWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a
 Unicode space character.
 A character is considered to be a
 space character if and only if it is specified to be a space
 character by the Unicode Standard. This method returns true if
 the character's general category type is any of the following:
 <ul>
 <li> <code>SPACE_SEPARATOR</code>
 <li> <code>LINE_SEPARATOR</code>
 <li> <code>PARAGRAPH_SEPARATOR</code>
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a space character;
 <code>false</code> otherwise.
 - seealso: Character#isWhitespace(int)
 @since 1.5
 */
+ (jboolean)isSpaceCharWithInt:(jint)codePoint;

/*!
 @brief Determines whether the specified character (Unicode code point)
 is in the <a href="#supplementary">supplementary character</a> range.
 @param codePoint the character (Unicode code point) to be tested
 @return <code>true</code> if the specified code point is between
 <code>MIN_SUPPLEMENTARY_CODE_POINT</code> and
 <code>MAX_CODE_POINT</code> inclusive;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isSupplementaryCodePointWithInt:(jint)codePoint;

/*!
 @brief Determines if the given <code>char</code> value is a Unicode
 <i>surrogate code unit</i>.
 <p>Such values do not represent characters by themselves,
 but are used in the representation of
 <a href="#supplementary">supplementary characters</a>
 in the UTF-16 encoding.
 <p>A char value is a surrogate code unit if and only if it is either
 a low-surrogate code unit or
 a high-surrogate code unit.
 @param ch the <code>char</code> value to be tested.
 @return <code>true</code> if the <code>char</code> value is between
 <code>MIN_SURROGATE</code> and
 <code>MAX_SURROGATE</code> inclusive;
 <code>false</code> otherwise.
 @since 1.7
 */
+ (jboolean)isSurrogateWithChar:(jchar)ch;

/*!
 @brief Determines whether the specified pair of <code>char</code>
 values is a valid
 <a href="http://www.unicode.org/glossary/#surrogate_pair">
 Unicode surrogate pair</a>.
 <p>This method is equivalent to the expression:
 <blockquote>
@code
 isHighSurrogate(high) && isLowSurrogate(low)
 
@endcode</blockquote>
 @param high the high-surrogate code value to be tested
 @param low the low-surrogate code value to be tested
 @return <code>true</code> if the specified high and
 low-surrogate code values represent a valid surrogate pair;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isSurrogatePairWithChar:(jchar)high
                           withChar:(jchar)low;

/*!
 @brief Determines if the specified character is a titlecase character.
 <p>
 A character is a titlecase character if its general
 category type, provided by <code>Character.getType(ch)</code>,
 is <code>TITLECASE_LETTER</code>.
 <p>
 Some characters look like pairs of Latin letters. For example, there
 is an uppercase letter that looks like "LJ" and has a corresponding
 lowercase letter that looks like "lj". A third form, which looks like "Lj",
 is the appropriate form to use when rendering a word in lowercase
 with initial capitals, as for a book title.
 <p>
 These are some of the Unicode characters for which this method returns
 <code>true</code>:
 <ul>
 <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</code>
 <li><code>LATIN CAPITAL LETTER L WITH SMALL LETTER J</code>
 <li><code>LATIN CAPITAL LETTER N WITH SMALL LETTER J</code>
 <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z</code>
 </ul>
 <p> Many other Unicode characters are titlecase too.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isTitleCase(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is titlecase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(char)
 - seealso: Character#isUpperCase(char)
 - seealso: Character#toTitleCase(char)
 - seealso: Character#getType(char)
 @since 1.0.2
 */
+ (jboolean)isTitleCaseWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is a titlecase character.
 <p>
 A character is a titlecase character if its general
 category type, provided by <code>getType(codePoint)</code>,
 is <code>TITLECASE_LETTER</code>.
 <p>
 Some characters look like pairs of Latin letters. For example, there
 is an uppercase letter that looks like "LJ" and has a corresponding
 lowercase letter that looks like "lj". A third form, which looks like "Lj",
 is the appropriate form to use when rendering a word in lowercase
 with initial capitals, as for a book title.
 <p>
 These are some of the Unicode characters for which this method returns
 <code>true</code>:
 <ul>
 <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</code>
 <li><code>LATIN CAPITAL LETTER L WITH SMALL LETTER J</code>
 <li><code>LATIN CAPITAL LETTER N WITH SMALL LETTER J</code>
 <li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z</code>
 </ul>
 <p> Many other Unicode characters are titlecase too.<p>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is titlecase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(int)
 - seealso: Character#isUpperCase(int)
 - seealso: Character#toTitleCase(int)
 - seealso: Character#getType(int)
 @since 1.5
 */
+ (jboolean)isTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character may be part of a Unicode
 identifier as other than the first character.
 <p>
 A character may be part of a Unicode identifier if and only if
 one of the following statements is true:
 <ul>
 <li>  it is a letter
 <li>  it is a connecting punctuation character (such as <code>'_'</code>)
 <li>  it is a digit
 <li>  it is a numeric letter (such as a Roman numeral character)
 <li>  it is a combining mark
 <li>  it is a non-spacing mark
 <li> <code>isIdentifierIgnorable</code> returns
 <code>true</code> for this character.
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isUnicodeIdentifierPart(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character may be part of a
 Unicode identifier; <code>false</code> otherwise.
 - seealso: Character#isIdentifierIgnorable(char)
 - seealso: Character#isJavaIdentifierPart(char)
 - seealso: Character#isLetterOrDigit(char)
 - seealso: Character#isUnicodeIdentifierStart(char)
 @since 1.1
 */
+ (jboolean)isUnicodeIdentifierPartWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) may be part of a Unicode
 identifier as other than the first character.
 <p>
 A character may be part of a Unicode identifier if and only if
 one of the following statements is true:
 <ul>
 <li>  it is a letter
 <li>  it is a connecting punctuation character (such as <code>'_'</code>)
 <li>  it is a digit
 <li>  it is a numeric letter (such as a Roman numeral character)
 <li>  it is a combining mark
 <li>  it is a non-spacing mark
 <li> <code>isIdentifierIgnorable</code> returns
 <code>true</code> for this character.
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character may be part of a
 Unicode identifier; <code>false</code> otherwise.
 - seealso: Character#isIdentifierIgnorable(int)
 - seealso: Character#isJavaIdentifierPart(int)
 - seealso: Character#isLetterOrDigit(int)
 - seealso: Character#isUnicodeIdentifierStart(int)
 @since 1.5
 */
+ (jboolean)isUnicodeIdentifierPartWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is permissible as the
 first character in a Unicode identifier.
 <p>
 A character may start a Unicode identifier if and only if
 one of the following conditions is true:
 <ul>
 <li> <code>isLetter(ch)</code> returns <code>true</code>
 <li> <code>getType(ch)</code> returns
 <code>LETTER_NUMBER</code>.
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isUnicodeIdentifierStart(int)</code> method.
 @param ch      the character to be tested.
 @return <code>true</code> if the character may start a Unicode
 identifier; <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierStart(char)
 - seealso: Character#isLetter(char)
 - seealso: Character#isUnicodeIdentifierPart(char)
 @since 1.1
 */
+ (jboolean)isUnicodeIdentifierStartWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is permissible as the
 first character in a Unicode identifier.
 <p>
 A character may start a Unicode identifier if and only if
 one of the following conditions is true:
 <ul>
 <li> <code>isLetter(codePoint)</code>
 returns <code>true</code>
 <li> <code>getType(codePoint)</code>
 returns <code>LETTER_NUMBER</code>.
 </ul>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character may start a Unicode
 identifier; <code>false</code> otherwise.
 - seealso: Character#isJavaIdentifierStart(int)
 - seealso: Character#isLetter(int)
 - seealso: Character#isUnicodeIdentifierPart(int)
 @since 1.5
 */
+ (jboolean)isUnicodeIdentifierStartWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is an uppercase character.
 <p>
 A character is uppercase if its general category type, provided by
 <code>Character.getType(ch)</code>, is <code>UPPERCASE_LETTER</code>.
 or it has contributory property Other_Uppercase as defined by the Unicode Standard.
 <p>
 The following are examples of uppercase characters:
 <blockquote>
@code

  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
  '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
  '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
  '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
  
@endcode</blockquote>
 <p> Many other Unicode characters are uppercase too.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isUpperCase(int)</code> method.
 @param ch   the character to be tested.
 @return <code>true</code> if the character is uppercase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(char)
 - seealso: Character#isTitleCase(char)
 - seealso: Character#toUpperCase(char)
 - seealso: Character#getType(char)
 @since 1.0
 */
+ (jboolean)isUpperCaseWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is an uppercase character.
 <p>
 A character is uppercase if its general category type, provided by
 <code>getType(codePoint)</code>, is <code>UPPERCASE_LETTER</code>,
 or it has contributory property Other_Uppercase as defined by the Unicode Standard.
 <p>
 The following are examples of uppercase characters:
 <blockquote>
@code

  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
  '&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
  '&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
  '&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
  '&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
  
@endcode</blockquote>
 <p> Many other Unicode characters are uppercase too.<p>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is uppercase;
 <code>false</code> otherwise.
 - seealso: Character#isLowerCase(int)
 - seealso: Character#isTitleCase(int)
 - seealso: Character#toUpperCase(int)
 - seealso: Character#getType(int)
 @since 1.5
 */
+ (jboolean)isUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Determines whether the specified code point is a valid
 <a href="http://www.unicode.org/glossary/#code_point">
 Unicode code point value</a>.
 @param codePoint the Unicode code point to be tested
 @return <code>true</code> if the specified code point value is between
 <code>MIN_CODE_POINT</code> and
 <code>MAX_CODE_POINT</code> inclusive;
 <code>false</code> otherwise.
 @since 1.5
 */
+ (jboolean)isValidCodePointWithInt:(jint)codePoint;

/*!
 @brief Determines if the specified character is white space according to Java.
 A character is a Java whitespace character if and only if it satisfies
 one of the following criteria:
 <ul>
 <li> It is a Unicode space character (<code>SPACE_SEPARATOR</code>,
 <code>LINE_SEPARATOR</code>, or <code>PARAGRAPH_SEPARATOR</code>)
 but is not also a non-breaking space (<code>'\u005Cu00A0'</code>,
 <code>'\u005Cu2007'</code>, <code>'\u005Cu202F'</code>).
 <li> It is <code>'\u005Ct'</code>, U+0009 HORIZONTAL TABULATION.
 <li> It is <code>'\u005Cn'</code>, U+000A LINE FEED.
 <li> It is <code>'\u005Cu000B'</code>, U+000B VERTICAL TABULATION.
 <li> It is <code>'\u005Cf'</code>, U+000C FORM FEED.
 <li> It is <code>'\u005Cr'</code>, U+000D CARRIAGE RETURN.
 <li> It is <code>'\u005Cu001C'</code>, U+001C FILE SEPARATOR.
 <li> It is <code>'\u005Cu001D'</code>, U+001D GROUP SEPARATOR.
 <li> It is <code>'\u005Cu001E'</code>, U+001E RECORD SEPARATOR.
 <li> It is <code>'\u005Cu001F'</code>, U+001F UNIT SEPARATOR.
 </ul>
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>isWhitespace(int)</code> method.
 @param ch the character to be tested.
 @return <code>true</code> if the character is a Java whitespace
 character; <code>false</code> otherwise.
 - seealso: Character#isSpaceChar(char)
 @since 1.1
 */
+ (jboolean)isWhitespaceWithChar:(jchar)ch;

/*!
 @brief Determines if the specified character (Unicode code point) is
 white space according to Java.
 A character is a Java
 whitespace character if and only if it satisfies one of the
 following criteria:
 <ul>
 <li> It is a Unicode space character (<code>SPACE_SEPARATOR</code>,
 <code>LINE_SEPARATOR</code>, or <code>PARAGRAPH_SEPARATOR</code>)
 but is not also a non-breaking space (<code>'\u005Cu00A0'</code>,
 <code>'\u005Cu2007'</code>, <code>'\u005Cu202F'</code>).
 <li> It is <code>'\u005Ct'</code>, U+0009 HORIZONTAL TABULATION.
 <li> It is <code>'\u005Cn'</code>, U+000A LINE FEED.
 <li> It is <code>'\u005Cu000B'</code>, U+000B VERTICAL TABULATION.
 <li> It is <code>'\u005Cf'</code>, U+000C FORM FEED.
 <li> It is <code>'\u005Cr'</code>, U+000D CARRIAGE RETURN.
 <li> It is <code>'\u005Cu001C'</code>, U+001C FILE SEPARATOR.
 <li> It is <code>'\u005Cu001D'</code>, U+001D GROUP SEPARATOR.
 <li> It is <code>'\u005Cu001E'</code>, U+001E RECORD SEPARATOR.
 <li> It is <code>'\u005Cu001F'</code>, U+001F UNIT SEPARATOR.
 </ul>
 <p>
 @param codePoint the character (Unicode code point) to be tested.
 @return <code>true</code> if the character is a Java whitespace
 character; <code>false</code> otherwise.
 - seealso: Character#isSpaceChar(int)
 @since 1.5
 */
+ (jboolean)isWhitespaceWithInt:(jint)codePoint;

/*!
 @brief Returns the trailing surrogate (a
 <a href="http://www.unicode.org/glossary/#low_surrogate_code_unit">
 low surrogate code unit</a>) of the
 <a href="http://www.unicode.org/glossary/#surrogate_pair">
 surrogate pair</a>
 representing the specified supplementary character (Unicode
 code point) in the UTF-16 encoding.
 If the specified character
 is not a
 <a href="Character.html#supplementary">supplementary character</a>,
 an unspecified <code>char</code> is returned.
 <p>If
 <code>isSupplementaryCodePoint(x)</code>
 is <code>true</code>, then
 <code>isLowSurrogate</code><code>(lowSurrogate(x))</code> and
 <code>toCodePoint</code><code>(</code><code>highSurrogate</code><code>(x), lowSurrogate(x)) == x</code>
 are also always <code>true</code>.
 @param codePoint a supplementary character (Unicode code point)
 @return the trailing surrogate code unit used to represent the
 character in the UTF-16 encoding
 @since 1.7
 */
+ (jchar)lowSurrogateWithInt:(jint)codePoint;

/*!
 @brief Returns the index within the given <code>char</code> subarray
 that is offset from the given <code>index</code> by
 <code>codePointOffset</code> code points.
 The
 <code>start</code> and <code>count</code> arguments specify a
 subarray of the <code>char</code> array. Unpaired surrogates
 within the text range given by <code>index</code> and
 <code>codePointOffset</code> count as one code point each.
 @param a the <code>char</code> array
 @param start the index of the first <code>char</code> of the
 subarray
 @param count the length of the subarray in <code>char</code>s
 @param index the index to be offset
 @param codePointOffset the offset in code points
 @return the index within the subarray
 @exception NullPointerException if <code>a</code> is null.
 @exception IndexOutOfBoundsException
 if <code>start</code> or <code>count</code> is negative,
 or if <code>start + count</code> is larger than the length of
 the given array,
 or if <code>index</code> is less than <code>start</code> or
 larger then <code>start + count</code>,
 or if <code>codePointOffset</code> is positive and the text range
 starting with <code>index</code> and ending with <code>start + count - 1</code>
 has fewer than <code>codePointOffset</code> code
 points,
 or if <code>codePointOffset</code> is negative and the text range
 starting with <code>start</code> and ending with <code>index - 1</code>
 has fewer than the absolute value of
 <code>codePointOffset</code> code points.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithCharArray:(IOSCharArray *)a
                                withInt:(jint)start
                                withInt:(jint)count
                                withInt:(jint)index
                                withInt:(jint)codePointOffset;

/*!
 @brief Returns the index within the given char sequence that is offset
 from the given <code>index</code> by <code>codePointOffset</code>
 code points.
 Unpaired surrogates within the text range given by
 <code>index</code> and <code>codePointOffset</code> count as
 one code point each.
 @param seq the char sequence
 @param index the index to be offset
 @param codePointOffset the offset in code points
 @return the index within the char sequence
 @exception NullPointerException if <code>seq</code> is null.
 @exception IndexOutOfBoundsException if <code>index</code>
 is negative or larger then the length of the char sequence,
 or if <code>codePointOffset</code> is positive and the
 subsequence starting with <code>index</code> has fewer than
 <code>codePointOffset</code> code points, or if
 <code>codePointOffset</code> is negative and the subsequence
 before <code>index</code> has fewer than the absolute value
 of <code>codePointOffset</code> code points.
 @since 1.5
 */
+ (jint)offsetByCodePointsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                           withInt:(jint)index
                                           withInt:(jint)codePointOffset;

/*!
 @brief Returns the value obtained by reversing the order of the bytes in the
 specified <tt>char</tt> value.
 @param ch The <code>char</code> of which to reverse the byte order.
 @return the value obtained by reversing (or, equivalently, swapping)
 the bytes in the specified <tt>char</tt> value.
 @since 1.5
 */
+ (jchar)reverseBytesWithChar:(jchar)ch;

/*!
 @brief Converts the specified character (Unicode code point) to its
 UTF-16 representation stored in a <code>char</code> array.
 If
 the specified code point is a BMP (Basic Multilingual Plane or
 Plane 0) value, the resulting <code>char</code> array has
 the same value as <code>codePoint</code>. If the specified code
 point is a supplementary code point, the resulting
 <code>char</code> array has the corresponding surrogate pair.
 @param codePoint a Unicode code point
 @return a <code>char</code> array having
 <code>codePoint</code>'s UTF-16 representation.
 @exception IllegalArgumentException if the specified
 <code>codePoint</code> is not a valid Unicode code point.
 @since 1.5
 */
+ (IOSCharArray *)toCharsWithInt:(jint)codePoint;

/*!
 @brief Converts the specified character (Unicode code point) to its
 UTF-16 representation.
 If the specified code point is a BMP
 (Basic Multilingual Plane or Plane 0) value, the same value is
 stored in <code>dst[dstIndex]</code>, and 1 is returned. If the
 specified code point is a supplementary character, its
 surrogate values are stored in <code>dst[dstIndex]</code>
 (high-surrogate) and <code>dst[dstIndex+1]</code>
 (low-surrogate), and 2 is returned.
 @param codePoint the character (Unicode code point) to be converted.
 @param dst an array of <code>char</code> in which the
 <code>codePoint</code>'s UTF-16 value is stored.
 @param dstIndex the start index into the <code>dst</code>
 array where the converted value is stored.
 @return 1 if the code point is a BMP code point, 2 if the
 code point is a supplementary code point.
 @exception IllegalArgumentException if the specified
 <code>codePoint</code> is not a valid Unicode code point.
 @exception NullPointerException if the specified <code>dst</code> is null.
 @exception IndexOutOfBoundsException if <code>dstIndex</code>
 is negative or not less than <code>dst.length</code>, or if
 <code>dst</code> at <code>dstIndex</code> doesn't have enough
 array element(s) to store the resulting <code>char</code>
 value(s). (If <code>dstIndex</code> is equal to
 <code>dst.length-1</code> and the specified
 <code>codePoint</code> is a supplementary character, the
 high-surrogate value is not stored in
 <code>dst[dstIndex]</code>.)
 @since 1.5
 */
+ (jint)toCharsWithInt:(jint)codePoint
         withCharArray:(IOSCharArray *)dst
               withInt:(jint)dstIndex;

/*!
 @brief Converts the specified surrogate pair to its supplementary code
 point value.
 This method does not validate the specified
 surrogate pair. The caller must validate it using <code>isSurrogatePair</code>
  if necessary.
 @param high the high-surrogate code unit
 @param low the low-surrogate code unit
 @return the supplementary code point composed from the
 specified surrogate pair.
 @since 1.5
 */
+ (jint)toCodePointWithChar:(jchar)high
                   withChar:(jchar)low;

/*!
 @brief Converts the character argument to lowercase using case
 mapping information from the UnicodeData file.
 <p>
 Note that
 <code>Character.isLowerCase(Character.toLowerCase(ch))</code>
 does not always return <code>true</code> for some ranges of
 characters, particularly those that are symbols or ideographs.
 <p>In general, <code>String.toLowerCase()</code> should be used to map
 characters to lowercase. <code>String</code> case mapping methods
 have several benefits over <code>Character</code> case mapping methods.
 <code>String</code> case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the <code>Character</code> case mapping methods cannot.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>toLowerCase(int)</code> method.
 @param ch   the character to be converted.
 @return the lowercase equivalent of the character, if any;
 otherwise, the character itself.
 - seealso: Character#isLowerCase(char)
 - seealso: String#toLowerCase()
 */
+ (jchar)toLowerCaseWithChar:(jchar)ch;

/*!
 @brief Converts the character (Unicode code point) argument to
 lowercase using case mapping information from the UnicodeData
 file.
 <p> Note that
 <code>Character.isLowerCase(Character.toLowerCase(codePoint))</code>
 does not always return <code>true</code> for some ranges of
 characters, particularly those that are symbols or ideographs.
 <p>In general, <code>String.toLowerCase()</code> should be used to map
 characters to lowercase. <code>String</code> case mapping methods
 have several benefits over <code>Character</code> case mapping methods.
 <code>String</code> case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the <code>Character</code> case mapping methods cannot.
 @param codePoint   the character (Unicode code point) to be converted.
 @return the lowercase equivalent of the character (Unicode code
 point), if any; otherwise, the character itself.
 - seealso: Character#isLowerCase(int)
 - seealso: String#toLowerCase()
 @since 1.5
 */
+ (jint)toLowerCaseWithInt:(jint)codePoint;

/*!
 @brief Returns a <code>String</code> object representing this
 <code>Character</code>'s value.
 The result is a string of
 length 1 whose sole component is the primitive
 <code>char</code> value represented by this
 <code>Character</code> object.
 @return a string representation of this object.
 */
- (NSString *)description;

/*!
 @brief Returns a <code>String</code> object representing the
 specified <code>char</code>.
 The result is a string of length
 1 consisting solely of the specified <code>char</code>.
 @param c the <code>char</code> to be converted
 @return the string representation of the specified <code>char</code>
 @since 1.4
 */
+ (NSString *)toStringWithChar:(jchar)c;

/*!
 @brief Converts the character argument to titlecase using case mapping
 information from the UnicodeData file.
 If a character has no
 explicit titlecase mapping and is not itself a titlecase char
 according to UnicodeData, then the uppercase mapping is
 returned as an equivalent titlecase mapping. If the
 <code>char</code> argument is already a titlecase
 <code>char</code>, the same <code>char</code> value will be
 returned.
 <p>
 Note that
 <code>Character.isTitleCase(Character.toTitleCase(ch))</code>
 does not always return <code>true</code> for some ranges of
 characters.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>toTitleCase(int)</code> method.
 @param ch   the character to be converted.
 @return the titlecase equivalent of the character, if any;
 otherwise, the character itself.
 - seealso: Character#isTitleCase(char)
 - seealso: Character#toLowerCase(char)
 - seealso: Character#toUpperCase(char)
 @since 1.0.2
 */
+ (jchar)toTitleCaseWithChar:(jchar)ch;

/*!
 @brief Converts the character (Unicode code point) argument to titlecase using case mapping
 information from the UnicodeData file.
 If a character has no
 explicit titlecase mapping and is not itself a titlecase char
 according to UnicodeData, then the uppercase mapping is
 returned as an equivalent titlecase mapping. If the
 character argument is already a titlecase
 character, the same character value will be
 returned.
 <p>Note that
 <code>Character.isTitleCase(Character.toTitleCase(codePoint))</code>
 does not always return <code>true</code> for some ranges of
 characters.
 @param codePoint   the character (Unicode code point) to be converted.
 @return the titlecase equivalent of the character, if any;
 otherwise, the character itself.
 - seealso: Character#isTitleCase(int)
 - seealso: Character#toLowerCase(int)
 - seealso: Character#toUpperCase(int)
 @since 1.5
 */
+ (jint)toTitleCaseWithInt:(jint)codePoint;

/*!
 @brief Converts the character argument to uppercase using case mapping
 information from the UnicodeData file.
 <p>
 Note that
 <code>Character.isUpperCase(Character.toUpperCase(ch))</code>
 does not always return <code>true</code> for some ranges of
 characters, particularly those that are symbols or ideographs.
 <p>In general, <code>String.toUpperCase()</code> should be used to map
 characters to uppercase. <code>String</code> case mapping methods
 have several benefits over <code>Character</code> case mapping methods.
 <code>String</code> case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the <code>Character</code> case mapping methods cannot.
 <p><b>Note:</b> This method cannot handle <a
 href="#supplementary"> supplementary characters</a>. To support
 all Unicode characters, including supplementary characters, use
 the <code>toUpperCase(int)</code> method.
 @param ch   the character to be converted.
 @return the uppercase equivalent of the character, if any;
 otherwise, the character itself.
 - seealso: Character#isUpperCase(char)
 - seealso: String#toUpperCase()
 */
+ (jchar)toUpperCaseWithChar:(jchar)ch;

/*!
 @brief Converts the character (Unicode code point) argument to
 uppercase using case mapping information from the UnicodeData
 file.
 <p>Note that
 <code>Character.isUpperCase(Character.toUpperCase(codePoint))</code>
 does not always return <code>true</code> for some ranges of
 characters, particularly those that are symbols or ideographs.
 <p>In general, <code>String.toUpperCase()</code> should be used to map
 characters to uppercase. <code>String</code> case mapping methods
 have several benefits over <code>Character</code> case mapping methods.
 <code>String</code> case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the <code>Character</code> case mapping methods cannot.
 @param codePoint   the character (Unicode code point) to be converted.
 @return the uppercase equivalent of the character, if any;
 otherwise, the character itself.
 - seealso: Character#isUpperCase(int)
 - seealso: String#toUpperCase()
 @since 1.5
 */
+ (jint)toUpperCaseWithInt:(jint)codePoint;

/*!
 @brief Returns a <tt>Character</tt> instance representing the specified
 <tt>char</tt> value.
 If a new <tt>Character</tt> instance is not required, this method
 should generally be used in preference to the constructor
 <code>Character(char)</code>, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.
 This method will always cache values in the range <code>'\u005Cu0000'</code>
  to <code>'\u005Cu007F'</code>, inclusive, and may
 cache other values outside of this range.
 @param c a char value.
 @return a <tt>Character</tt> instance representing <tt>c</tt>.
 @since 1.5
 */
+ (JavaLangCharacter *)valueOfWithChar:(jchar)c;

#pragma mark Package-Private

+ (jint)codePointAtImplWithCharArray:(IOSCharArray *)a
                             withInt:(jint)index
                             withInt:(jint)limit;

+ (jint)codePointBeforeImplWithCharArray:(IOSCharArray *)a
                                 withInt:(jint)index
                                 withInt:(jint)start;

+ (jint)codePointCountImplWithCharArray:(IOSCharArray *)a
                                withInt:(jint)offset
                                withInt:(jint)count;

+ (jint)digitImplWithInt:(jint)codePoint
                 withInt:(jint)radix;

+ (jbyte)getDirectionalityImplWithInt:(jint)codePoint;

+ (jint)getNumericValueImplWithInt:(jint)codePoint;

+ (jint)getTypeImplWithInt:(jint)codePoint;

+ (jboolean)isAlphabeticImplWithInt:(jint)codePoint;

+ (jboolean)isDefinedImplWithInt:(jint)codePoint;

+ (jboolean)isDigitImplWithInt:(jint)codePoint;

+ (jboolean)isIdentifierIgnorableImplWithInt:(jint)codePoint;

+ (jboolean)isIdeographicImplWithInt:(jint)codePoint;

+ (jboolean)isLetterImplWithInt:(jint)codePoint;

+ (jboolean)isLetterOrDigitImplWithInt:(jint)codePoint;

+ (jboolean)isLowerCaseImplWithInt:(jint)codePoint;

+ (jboolean)isMirroredImplWithInt:(jint)codePoint;

+ (jboolean)isSpaceCharImplWithInt:(jint)codePoint;

+ (jboolean)isTitleCaseImplWithInt:(jint)codePoint;

+ (jboolean)isUnicodeIdentifierPartImplWithInt:(jint)codePoint;

+ (jboolean)isUnicodeIdentifierStartImplWithInt:(jint)codePoint;

+ (jboolean)isUpperCaseImplWithInt:(jint)codePoint;

+ (jboolean)isWhitespaceImplWithInt:(jint)codePoint;

+ (jint)offsetByCodePointsImplWithCharArray:(IOSCharArray *)a
                                    withInt:(jint)start
                                    withInt:(jint)count
                                    withInt:(jint)index
                                    withInt:(jint)codePointOffset;

+ (jint)toLowerCaseImplWithInt:(jint)codePoint;

+ (void)toSurrogatesWithInt:(jint)codePoint
              withCharArray:(IOSCharArray *)dst
                    withInt:(jint)index;

+ (jint)toTitleCaseImplWithInt:(jint)codePoint;

+ (jint)toUpperCaseImplWithInt:(jint)codePoint;

@end

J2OBJC_STATIC_INIT(JavaLangCharacter)

/*!
 @brief The minimum radix available for conversion to and from strings.
 The constant value of this field is the smallest value permitted
 for the radix argument in radix-conversion methods such as the
 <code>digit</code> method, the <code>forDigit</code> method, and the
 <code>toString</code> method of class <code>Integer</code>.
 - seealso: Character#digit(char,int)
 - seealso: Character#forDigit(int,int)
 - seealso: Integer#toString(int,int)
 - seealso: Integer#valueOf(String)
 */
inline jint JavaLangCharacter_get_MIN_RADIX();
#define JavaLangCharacter_MIN_RADIX 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_RADIX, jint)

/*!
 @brief The maximum radix available for conversion to and from strings.
 The constant value of this field is the largest value permitted
 for the radix argument in radix-conversion methods such as the
 <code>digit</code> method, the <code>forDigit</code> method, and the
 <code>toString</code> method of class <code>Integer</code>.
 - seealso: Character#digit(char,int)
 - seealso: Character#forDigit(int,int)
 - seealso: Integer#toString(int,int)
 - seealso: Integer#valueOf(String)
 */
inline jint JavaLangCharacter_get_MAX_RADIX();
#define JavaLangCharacter_MAX_RADIX 36
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_RADIX, jint)

/*!
 @brief The constant value of this field is the smallest value of type
 <code>char</code>, <code>'\u005Cu0000'</code>.
 @since 1.0.2
 */
inline jchar JavaLangCharacter_get_MIN_VALUE();
#define JavaLangCharacter_MIN_VALUE 0x0000
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_VALUE, jchar)

/*!
 @brief The constant value of this field is the largest value of type
 <code>char</code>, <code>'\u005CuFFFF'</code>.
 @since 1.0.2
 */
inline jchar JavaLangCharacter_get_MAX_VALUE();
#define JavaLangCharacter_MAX_VALUE 0xffff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_VALUE, jchar)

/*!
 @brief The <code>Class</code> instance representing the primitive type
 <code>char</code>.
 @since 1.1
 */
inline IOSClass *JavaLangCharacter_get_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaLangCharacter_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter, TYPE, IOSClass *)

/*!
 @brief General category "Cn" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_UNASSIGNED();
#define JavaLangCharacter_UNASSIGNED 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, UNASSIGNED, jbyte)

/*!
 @brief General category "Lu" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_UPPERCASE_LETTER();
#define JavaLangCharacter_UPPERCASE_LETTER 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, UPPERCASE_LETTER, jbyte)

/*!
 @brief General category "Ll" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_LOWERCASE_LETTER();
#define JavaLangCharacter_LOWERCASE_LETTER 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LOWERCASE_LETTER, jbyte)

/*!
 @brief General category "Lt" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_TITLECASE_LETTER();
#define JavaLangCharacter_TITLECASE_LETTER 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, TITLECASE_LETTER, jbyte)

/*!
 @brief General category "Lm" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_MODIFIER_LETTER();
#define JavaLangCharacter_MODIFIER_LETTER 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MODIFIER_LETTER, jbyte)

/*!
 @brief General category "Lo" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_OTHER_LETTER();
#define JavaLangCharacter_OTHER_LETTER 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_LETTER, jbyte)

/*!
 @brief General category "Mn" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_NON_SPACING_MARK();
#define JavaLangCharacter_NON_SPACING_MARK 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, NON_SPACING_MARK, jbyte)

/*!
 @brief General category "Me" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_ENCLOSING_MARK();
#define JavaLangCharacter_ENCLOSING_MARK 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, ENCLOSING_MARK, jbyte)

/*!
 @brief General category "Mc" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_COMBINING_SPACING_MARK();
#define JavaLangCharacter_COMBINING_SPACING_MARK 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, COMBINING_SPACING_MARK, jbyte)

/*!
 @brief General category "Nd" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_DECIMAL_DIGIT_NUMBER();
#define JavaLangCharacter_DECIMAL_DIGIT_NUMBER 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DECIMAL_DIGIT_NUMBER, jbyte)

/*!
 @brief General category "Nl" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_LETTER_NUMBER();
#define JavaLangCharacter_LETTER_NUMBER 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LETTER_NUMBER, jbyte)

/*!
 @brief General category "No" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_OTHER_NUMBER();
#define JavaLangCharacter_OTHER_NUMBER 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_NUMBER, jbyte)

/*!
 @brief General category "Zs" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_SPACE_SEPARATOR();
#define JavaLangCharacter_SPACE_SEPARATOR 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SPACE_SEPARATOR, jbyte)

/*!
 @brief General category "Zl" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_LINE_SEPARATOR();
#define JavaLangCharacter_LINE_SEPARATOR 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, LINE_SEPARATOR, jbyte)

/*!
 @brief General category "Zp" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_PARAGRAPH_SEPARATOR();
#define JavaLangCharacter_PARAGRAPH_SEPARATOR 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, PARAGRAPH_SEPARATOR, jbyte)

/*!
 @brief General category "Cc" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_CONTROL();
#define JavaLangCharacter_CONTROL 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CONTROL, jbyte)

/*!
 @brief General category "Cf" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_FORMAT();
#define JavaLangCharacter_FORMAT 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, FORMAT, jbyte)

/*!
 @brief General category "Co" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_PRIVATE_USE();
#define JavaLangCharacter_PRIVATE_USE 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, PRIVATE_USE, jbyte)

/*!
 @brief General category "Cs" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_SURROGATE();
#define JavaLangCharacter_SURROGATE 19
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SURROGATE, jbyte)

/*!
 @brief General category "Pd" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_DASH_PUNCTUATION();
#define JavaLangCharacter_DASH_PUNCTUATION 20
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DASH_PUNCTUATION, jbyte)

/*!
 @brief General category "Ps" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_START_PUNCTUATION();
#define JavaLangCharacter_START_PUNCTUATION 21
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, START_PUNCTUATION, jbyte)

/*!
 @brief General category "Pe" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_END_PUNCTUATION();
#define JavaLangCharacter_END_PUNCTUATION 22
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, END_PUNCTUATION, jbyte)

/*!
 @brief General category "Pc" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_CONNECTOR_PUNCTUATION();
#define JavaLangCharacter_CONNECTOR_PUNCTUATION 23
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CONNECTOR_PUNCTUATION, jbyte)

/*!
 @brief General category "Po" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_OTHER_PUNCTUATION();
#define JavaLangCharacter_OTHER_PUNCTUATION 24
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_PUNCTUATION, jbyte)

/*!
 @brief General category "Sm" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_MATH_SYMBOL();
#define JavaLangCharacter_MATH_SYMBOL 25
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MATH_SYMBOL, jbyte)

/*!
 @brief General category "Sc" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_CURRENCY_SYMBOL();
#define JavaLangCharacter_CURRENCY_SYMBOL 26
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, CURRENCY_SYMBOL, jbyte)

/*!
 @brief General category "Sk" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_MODIFIER_SYMBOL();
#define JavaLangCharacter_MODIFIER_SYMBOL 27
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MODIFIER_SYMBOL, jbyte)

/*!
 @brief General category "So" in the Unicode specification.
 @since 1.1
 */
inline jbyte JavaLangCharacter_get_OTHER_SYMBOL();
#define JavaLangCharacter_OTHER_SYMBOL 28
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, OTHER_SYMBOL, jbyte)

/*!
 @brief General category "Pi" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_INITIAL_QUOTE_PUNCTUATION();
#define JavaLangCharacter_INITIAL_QUOTE_PUNCTUATION 29
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, INITIAL_QUOTE_PUNCTUATION, jbyte)

/*!
 @brief General category "Pf" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_FINAL_QUOTE_PUNCTUATION();
#define JavaLangCharacter_FINAL_QUOTE_PUNCTUATION 30
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, FINAL_QUOTE_PUNCTUATION, jbyte)

/*!
 @brief Error flag.
 Use int (code point) to avoid confusion with U+FFFF.
 */
inline jint JavaLangCharacter_get_ERROR();
#define JavaLangCharacter_ERROR -1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, ERROR, jint)

/*!
 @brief Undefined bidirectional character type.
 Undefined <code>char</code>
 values have undefined directionality in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_UNDEFINED();
#define JavaLangCharacter_DIRECTIONALITY_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_UNDEFINED, jbyte)

/*!
 @brief Strong bidirectional character type "L" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT, jbyte)

/*!
 @brief Strong bidirectional character type "R" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT, jbyte)

/*!
 @brief Strong bidirectional character type "AL" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC, jbyte)

/*!
 @brief Weak bidirectional character type "EN" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER, jbyte)

/*!
 @brief Weak bidirectional character type "ES" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR, jbyte)

/*!
 @brief Weak bidirectional character type "ET" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR();
#define JavaLangCharacter_DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR, jbyte)

/*!
 @brief Weak bidirectional character type "AN" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_ARABIC_NUMBER();
#define JavaLangCharacter_DIRECTIONALITY_ARABIC_NUMBER 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_ARABIC_NUMBER, jbyte)

/*!
 @brief Weak bidirectional character type "CS" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_COMMON_NUMBER_SEPARATOR 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_COMMON_NUMBER_SEPARATOR, jbyte)

/*!
 @brief Weak bidirectional character type "NSM" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_NONSPACING_MARK();
#define JavaLangCharacter_DIRECTIONALITY_NONSPACING_MARK 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_NONSPACING_MARK, jbyte)

/*!
 @brief Weak bidirectional character type "BN" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_BOUNDARY_NEUTRAL();
#define JavaLangCharacter_DIRECTIONALITY_BOUNDARY_NEUTRAL 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_BOUNDARY_NEUTRAL, jbyte)

/*!
 @brief Neutral bidirectional character type "B" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_PARAGRAPH_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_PARAGRAPH_SEPARATOR 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_PARAGRAPH_SEPARATOR, jbyte)

/*!
 @brief Neutral bidirectional character type "S" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_SEGMENT_SEPARATOR();
#define JavaLangCharacter_DIRECTIONALITY_SEGMENT_SEPARATOR 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_SEGMENT_SEPARATOR, jbyte)

/*!
 @brief Neutral bidirectional character type "WS" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_WHITESPACE();
#define JavaLangCharacter_DIRECTIONALITY_WHITESPACE 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_WHITESPACE, jbyte)

/*!
 @brief Neutral bidirectional character type "ON" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_OTHER_NEUTRALS();
#define JavaLangCharacter_DIRECTIONALITY_OTHER_NEUTRALS 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_OTHER_NEUTRALS, jbyte)

/*!
 @brief Strong bidirectional character type "LRE" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING, jbyte)

/*!
 @brief Strong bidirectional character type "LRO" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE();
#define JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE, jbyte)

/*!
 @brief Strong bidirectional character type "RLE" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING, jbyte)

/*!
 @brief Strong bidirectional character type "RLO" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE();
#define JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE 17
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE, jbyte)

/*!
 @brief Weak bidirectional character type "PDF" in the Unicode specification.
 @since 1.4
 */
inline jbyte JavaLangCharacter_get_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT();
#define JavaLangCharacter_DIRECTIONALITY_POP_DIRECTIONAL_FORMAT 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, DIRECTIONALITY_POP_DIRECTIONAL_FORMAT, jbyte)

/*!
 @brief The minimum value of a
 <a href="http://www.unicode.org/glossary/#high_surrogate_code_unit">
 Unicode high-surrogate code unit</a>
 in the UTF-16 encoding, constant <code>'\u005CuD800'</code>.
 A high-surrogate is also known as a <i>leading-surrogate</i>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_HIGH_SURROGATE();
#define JavaLangCharacter_MIN_HIGH_SURROGATE 0xd800
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_HIGH_SURROGATE, jchar)

/*!
 @brief The maximum value of a
 <a href="http://www.unicode.org/glossary/#high_surrogate_code_unit">
 Unicode high-surrogate code unit</a>
 in the UTF-16 encoding, constant <code>'\u005CuDBFF'</code>.
 A high-surrogate is also known as a <i>leading-surrogate</i>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_HIGH_SURROGATE();
#define JavaLangCharacter_MAX_HIGH_SURROGATE 0xdbff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_HIGH_SURROGATE, jchar)

/*!
 @brief The minimum value of a
 <a href="http://www.unicode.org/glossary/#low_surrogate_code_unit">
 Unicode low-surrogate code unit</a>
 in the UTF-16 encoding, constant <code>'\u005CuDC00'</code>.
 A low-surrogate is also known as a <i>trailing-surrogate</i>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_LOW_SURROGATE();
#define JavaLangCharacter_MIN_LOW_SURROGATE 0xdc00
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_LOW_SURROGATE, jchar)

/*!
 @brief The maximum value of a
 <a href="http://www.unicode.org/glossary/#low_surrogate_code_unit">
 Unicode low-surrogate code unit</a>
 in the UTF-16 encoding, constant <code>'\u005CuDFFF'</code>.
 A low-surrogate is also known as a <i>trailing-surrogate</i>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_LOW_SURROGATE();
#define JavaLangCharacter_MAX_LOW_SURROGATE 0xdfff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_LOW_SURROGATE, jchar)

/*!
 @brief The minimum value of a Unicode surrogate code unit in the
 UTF-16 encoding, constant <code>'\u005CuD800'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MIN_SURROGATE();
#define JavaLangCharacter_MIN_SURROGATE 0xd800
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_SURROGATE, jchar)

/*!
 @brief The maximum value of a Unicode surrogate code unit in the
 UTF-16 encoding, constant <code>'\u005CuDFFF'</code>.
 @since 1.5
 */
inline jchar JavaLangCharacter_get_MAX_SURROGATE();
#define JavaLangCharacter_MAX_SURROGATE 0xdfff
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_SURROGATE, jchar)

/*!
 @brief The minimum value of a
 <a href="http://www.unicode.org/glossary/#supplementary_code_point">
 Unicode supplementary code point</a>, constant <code>U+10000</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MIN_SUPPLEMENTARY_CODE_POINT();
#define JavaLangCharacter_MIN_SUPPLEMENTARY_CODE_POINT 65536
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_SUPPLEMENTARY_CODE_POINT, jint)

/*!
 @brief The minimum value of a
 <a href="http://www.unicode.org/glossary/#code_point">
 Unicode code point</a>, constant <code>U+0000</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MIN_CODE_POINT();
#define JavaLangCharacter_MIN_CODE_POINT 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MIN_CODE_POINT, jint)

/*!
 @brief The maximum value of a
 <a href="http://www.unicode.org/glossary/#code_point">
 Unicode code point</a>, constant <code>U+10FFFF</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_MAX_CODE_POINT();
#define JavaLangCharacter_MAX_CODE_POINT 1114111
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, MAX_CODE_POINT, jint)

/*!
 @brief The number of bits used to represent a <tt>char</tt> value in unsigned
 binary form, constant <code>16</code>.
 @since 1.5
 */
inline jint JavaLangCharacter_get_SIZE();
#define JavaLangCharacter_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, SIZE, jint)

/*!
 @brief The number of bytes used to represent a <code>char</code> value in unsigned
 binary form.
 @since 1.8
 */
inline jint JavaLangCharacter_get_BYTES();
#define JavaLangCharacter_BYTES 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangCharacter, BYTES, jint)

FOUNDATION_EXPORT void JavaLangCharacter_initWithChar_(JavaLangCharacter *self, jchar value);

FOUNDATION_EXPORT JavaLangCharacter *new_JavaLangCharacter_initWithChar_(jchar value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangCharacter *create_JavaLangCharacter_initWithChar_(jchar value);

FOUNDATION_EXPORT JavaLangCharacter *JavaLangCharacter_valueOfWithChar_(jchar c);

FOUNDATION_EXPORT jint JavaLangCharacter_hashCodeWithChar_(jchar value);

FOUNDATION_EXPORT NSString *JavaLangCharacter_toStringWithChar_(jchar c);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isValidCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isBmpCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSupplementaryCodePointWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isHighSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSurrogatePairWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_charCountWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toCodePointWithChar_withChar_(jchar high, jchar low);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_(IOSCharArray *a, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(IOSCharArray *a, jint index, jint limit);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointAtImplWithCharArray_withInt_withInt_(IOSCharArray *a, jint index, jint limit);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_(IOSCharArray *a, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeWithCharArray_withInt_withInt_(IOSCharArray *a, jint index, jint start);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointBeforeImplWithCharArray_withInt_withInt_(IOSCharArray *a, jint index, jint start);

FOUNDATION_EXPORT jchar JavaLangCharacter_highSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_lowSurrogateWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(jint codePoint, IOSCharArray *dst, jint dstIndex);

FOUNDATION_EXPORT IOSCharArray *JavaLangCharacter_toCharsWithInt_(jint codePoint);

FOUNDATION_EXPORT void JavaLangCharacter_toSurrogatesWithInt_withCharArray_withInt_(jint codePoint, IOSCharArray *dst, jint index);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint beginIndex, jint endIndex);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountWithCharArray_withInt_withInt_(IOSCharArray *a, jint offset, jint count);

FOUNDATION_EXPORT jint JavaLangCharacter_codePointCountImplWithCharArray_withInt_withInt_(IOSCharArray *a, jint offset, jint count);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsWithCharArray_withInt_withInt_withInt_withInt_(IOSCharArray *a, jint start, jint count, jint index, jint codePointOffset);

FOUNDATION_EXPORT jint JavaLangCharacter_offsetByCodePointsImplWithCharArray_withInt_withInt_withInt_withInt_(IOSCharArray *a, jint start, jint count, jint index, jint codePointOffset);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLowerCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUpperCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isTitleCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDigitImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isDefinedImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isLetterOrDigitImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaLetterOrDigitWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isAlphabeticWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isAlphabeticImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdeographicWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdeographicImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isJavaIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierStartImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isUnicodeIdentifierPartImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isIdentifierIgnorableImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_toLowerCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jint JavaLangCharacter_toLowerCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toLowerCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_toUpperCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jint JavaLangCharacter_toUpperCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toUpperCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_toTitleCaseWithChar_(jchar ch);

FOUNDATION_EXPORT jint JavaLangCharacter_toTitleCaseWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_toTitleCaseImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithChar_withInt_(jchar ch, jint radix);

FOUNDATION_EXPORT jint JavaLangCharacter_digitWithInt_withInt_(jint codePoint, jint radix);

FOUNDATION_EXPORT jint JavaLangCharacter_digitImplWithInt_withInt_(jint codePoint, jint radix);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithChar_(jchar ch);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getNumericValueImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isSpaceCharImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isWhitespaceImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isISOControlWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithChar_(jchar ch);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_getTypeImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jchar JavaLangCharacter_forDigitWithInt_withInt_(jint digit, jint radix);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithChar_(jchar ch);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityWithInt_(jint codePoint);

FOUNDATION_EXPORT jbyte JavaLangCharacter_getDirectionalityImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredWithInt_(jint codePoint);

FOUNDATION_EXPORT jboolean JavaLangCharacter_isMirroredImplWithInt_(jint codePoint);

FOUNDATION_EXPORT jint JavaLangCharacter_compareWithChar_withChar_(jchar x, jchar y);

FOUNDATION_EXPORT jchar JavaLangCharacter_reverseBytesWithChar_(jchar ch);

FOUNDATION_EXPORT NSString *JavaLangCharacter_getNameWithInt_(jint codePoint);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter)

BOXED_INC_AND_DEC(Char, charValue, JavaLangCharacter)

#endif

#if !defined (JavaLangCharacter_Subset_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter_Subset))
#define JavaLangCharacter_Subset_

/*!
 @brief Instances of this class represent particular subsets of the Unicode
 character set.
 The only family of subsets defined in the
 <code>Character</code> class is <code>Character.UnicodeBlock</code>.
 Other portions of the Java API may define other subsets for their
 own purposes.
 @since 1.2
 */
@interface JavaLangCharacter_Subset : NSObject

#pragma mark Public

/*!
 @brief Compares two <code>Subset</code> objects for equality.
 This method returns <code>true</code> if and only if
 <code>this</code> and the argument refer to the same
 object; since this method is <code>final</code>, this
 guarantee holds for all subclasses.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the standard hash code as defined by the
 <code>Object.hashCode</code> method.
 This method
 is <code>final</code> in order to ensure that the
 <code>equals</code> and <code>hashCode</code> methods will
 be consistent in all subclasses.
 */
- (NSUInteger)hash;

/*!
 @brief Returns the name of this subset.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a new <code>Subset</code> instance.
 @param name  The name of this subset
 @exception NullPointerException if name is <code>null</code>
 */
- (instancetype)initWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangCharacter_Subset)

FOUNDATION_EXPORT void JavaLangCharacter_Subset_initWithNSString_(JavaLangCharacter_Subset *self, NSString *name);

FOUNDATION_EXPORT JavaLangCharacter_Subset *new_JavaLangCharacter_Subset_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangCharacter_Subset *create_JavaLangCharacter_Subset_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_Subset)

#endif

#if !defined (JavaLangCharacter_UnicodeBlock_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter_UnicodeBlock))
#define JavaLangCharacter_UnicodeBlock_

/*!
 @brief A family of character subsets representing the character blocks in the
 Unicode specification.
 Character blocks generally define characters
 used for a specific script or purpose. A character is contained by
 at most one Unicode block.
 @since 1.2
 */
@interface JavaLangCharacter_UnicodeBlock : JavaLangCharacter_Subset

+ (JavaLangCharacter_UnicodeBlock *)BASIC_LATIN;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_1_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)IPA_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)SPACING_MODIFIER_LETTERS;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_DIACRITICAL_MARKS;

+ (JavaLangCharacter_UnicodeBlock *)GREEK;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC;

+ (JavaLangCharacter_UnicodeBlock *)ARMENIAN;

+ (JavaLangCharacter_UnicodeBlock *)HEBREW;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC;

+ (JavaLangCharacter_UnicodeBlock *)DEVANAGARI;

+ (JavaLangCharacter_UnicodeBlock *)BENGALI;

+ (JavaLangCharacter_UnicodeBlock *)GURMUKHI;

+ (JavaLangCharacter_UnicodeBlock *)GUJARATI;

+ (JavaLangCharacter_UnicodeBlock *)ORIYA;

+ (JavaLangCharacter_UnicodeBlock *)TAMIL;

+ (JavaLangCharacter_UnicodeBlock *)TELUGU;

+ (JavaLangCharacter_UnicodeBlock *)KANNADA;

+ (JavaLangCharacter_UnicodeBlock *)MALAYALAM;

+ (JavaLangCharacter_UnicodeBlock *)THAI;

+ (JavaLangCharacter_UnicodeBlock *)LAO;

+ (JavaLangCharacter_UnicodeBlock *)TIBETAN;

+ (JavaLangCharacter_UnicodeBlock *)GEORGIAN;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_ADDITIONAL;

+ (JavaLangCharacter_UnicodeBlock *)GREEK_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)GENERAL_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)SUPERSCRIPTS_AND_SUBSCRIPTS;

+ (JavaLangCharacter_UnicodeBlock *)CURRENCY_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_MARKS_FOR_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)LETTERLIKE_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)NUMBER_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)ARROWS;

+ (JavaLangCharacter_UnicodeBlock *)MATHEMATICAL_OPERATORS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_TECHNICAL;

+ (JavaLangCharacter_UnicodeBlock *)CONTROL_PICTURES;

+ (JavaLangCharacter_UnicodeBlock *)OPTICAL_CHARACTER_RECOGNITION;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_ALPHANUMERICS;

+ (JavaLangCharacter_UnicodeBlock *)BOX_DRAWING;

+ (JavaLangCharacter_UnicodeBlock *)BLOCK_ELEMENTS;

+ (JavaLangCharacter_UnicodeBlock *)GEOMETRIC_SHAPES;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)DINGBATS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_SYMBOLS_AND_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)HIRAGANA;

+ (JavaLangCharacter_UnicodeBlock *)KATAKANA;

+ (JavaLangCharacter_UnicodeBlock *)BOPOMOFO;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_COMPATIBILITY_JAMO;

+ (JavaLangCharacter_UnicodeBlock *)KANBUN;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_CJK_LETTERS_AND_MONTHS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_SYLLABLES;

+ (JavaLangCharacter_UnicodeBlock *)PRIVATE_USE_AREA;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_IDEOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)ALPHABETIC_PRESENTATION_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_PRESENTATION_FORMS_A;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_HALF_MARKS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)SMALL_FORM_VARIANTS;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_PRESENTATION_FORMS_B;

+ (JavaLangCharacter_UnicodeBlock *)HALFWIDTH_AND_FULLWIDTH_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)SPECIALS;

+ (JavaLangCharacter_UnicodeBlock *)SURROGATES_AREA;

+ (JavaLangCharacter_UnicodeBlock *)SYRIAC;

+ (JavaLangCharacter_UnicodeBlock *)THAANA;

+ (JavaLangCharacter_UnicodeBlock *)SINHALA;

+ (JavaLangCharacter_UnicodeBlock *)MYANMAR;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC;

+ (JavaLangCharacter_UnicodeBlock *)CHEROKEE;

+ (JavaLangCharacter_UnicodeBlock *)UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;

+ (JavaLangCharacter_UnicodeBlock *)OGHAM;

+ (JavaLangCharacter_UnicodeBlock *)RUNIC;

+ (JavaLangCharacter_UnicodeBlock *)KHMER;

+ (JavaLangCharacter_UnicodeBlock *)MONGOLIAN;

+ (JavaLangCharacter_UnicodeBlock *)BRAILLE_PATTERNS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_RADICALS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)KANGXI_RADICALS;

+ (JavaLangCharacter_UnicodeBlock *)IDEOGRAPHIC_DESCRIPTION_CHARACTERS;

+ (JavaLangCharacter_UnicodeBlock *)BOPOMOFO_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;

+ (JavaLangCharacter_UnicodeBlock *)YI_SYLLABLES;

+ (JavaLangCharacter_UnicodeBlock *)YI_RADICALS;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_SUPPLEMENTARY;

+ (JavaLangCharacter_UnicodeBlock *)TAGALOG;

+ (JavaLangCharacter_UnicodeBlock *)HANUNOO;

+ (JavaLangCharacter_UnicodeBlock *)BUHID;

+ (JavaLangCharacter_UnicodeBlock *)TAGBANWA;

+ (JavaLangCharacter_UnicodeBlock *)LIMBU;

+ (JavaLangCharacter_UnicodeBlock *)TAI_LE;

+ (JavaLangCharacter_UnicodeBlock *)KHMER_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)PHONETIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_ARROWS_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_ARROWS_B;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_MATHEMATICAL_OPERATORS;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS_AND_ARROWS;

+ (JavaLangCharacter_UnicodeBlock *)KATAKANA_PHONETIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)YIJING_HEXAGRAM_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)VARIATION_SELECTORS;

+ (JavaLangCharacter_UnicodeBlock *)LINEAR_B_SYLLABARY;

+ (JavaLangCharacter_UnicodeBlock *)LINEAR_B_IDEOGRAMS;

+ (JavaLangCharacter_UnicodeBlock *)AEGEAN_NUMBERS;

+ (JavaLangCharacter_UnicodeBlock *)OLD_ITALIC;

+ (JavaLangCharacter_UnicodeBlock *)GOTHIC;

+ (JavaLangCharacter_UnicodeBlock *)UGARITIC;

+ (JavaLangCharacter_UnicodeBlock *)DESERET;

+ (JavaLangCharacter_UnicodeBlock *)SHAVIAN;

+ (JavaLangCharacter_UnicodeBlock *)OSMANYA;

+ (JavaLangCharacter_UnicodeBlock *)CYPRIOT_SYLLABARY;

+ (JavaLangCharacter_UnicodeBlock *)BYZANTINE_MUSICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)MUSICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)TAI_XUAN_JING_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)MATHEMATICAL_ALPHANUMERIC_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;

+ (JavaLangCharacter_UnicodeBlock *)CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)TAGS;

+ (JavaLangCharacter_UnicodeBlock *)VARIATION_SELECTORS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTARY_PRIVATE_USE_AREA_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTARY_PRIVATE_USE_AREA_B;

+ (JavaLangCharacter_UnicodeBlock *)HIGH_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)HIGH_PRIVATE_USE_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)LOW_SURROGATES;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)NKO;

+ (JavaLangCharacter_UnicodeBlock *)SAMARITAN;

+ (JavaLangCharacter_UnicodeBlock *)MANDAIC;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)NEW_TAI_LUE;

+ (JavaLangCharacter_UnicodeBlock *)BUGINESE;

+ (JavaLangCharacter_UnicodeBlock *)TAI_THAM;

+ (JavaLangCharacter_UnicodeBlock *)BALINESE;

+ (JavaLangCharacter_UnicodeBlock *)SUNDANESE;

+ (JavaLangCharacter_UnicodeBlock *)BATAK;

+ (JavaLangCharacter_UnicodeBlock *)LEPCHA;

+ (JavaLangCharacter_UnicodeBlock *)OL_CHIKI;

+ (JavaLangCharacter_UnicodeBlock *)VEDIC_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)PHONETIC_EXTENSIONS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)GLAGOLITIC;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_C;

+ (JavaLangCharacter_UnicodeBlock *)COPTIC;

+ (JavaLangCharacter_UnicodeBlock *)GEORGIAN_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)TIFINAGH;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)SUPPLEMENTAL_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)CJK_STROKES;

+ (JavaLangCharacter_UnicodeBlock *)LISU;

+ (JavaLangCharacter_UnicodeBlock *)VAI;

+ (JavaLangCharacter_UnicodeBlock *)CYRILLIC_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)BAMUM;

+ (JavaLangCharacter_UnicodeBlock *)MODIFIER_TONE_LETTERS;

+ (JavaLangCharacter_UnicodeBlock *)LATIN_EXTENDED_D;

+ (JavaLangCharacter_UnicodeBlock *)SYLOTI_NAGRI;

+ (JavaLangCharacter_UnicodeBlock *)COMMON_INDIC_NUMBER_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)PHAGS_PA;

+ (JavaLangCharacter_UnicodeBlock *)SAURASHTRA;

+ (JavaLangCharacter_UnicodeBlock *)DEVANAGARI_EXTENDED;

+ (JavaLangCharacter_UnicodeBlock *)KAYAH_LI;

+ (JavaLangCharacter_UnicodeBlock *)REJANG;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)JAVANESE;

+ (JavaLangCharacter_UnicodeBlock *)CHAM;

+ (JavaLangCharacter_UnicodeBlock *)MYANMAR_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)TAI_VIET;

+ (JavaLangCharacter_UnicodeBlock *)ETHIOPIC_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)MEETEI_MAYEK;

+ (JavaLangCharacter_UnicodeBlock *)HANGUL_JAMO_EXTENDED_B;

+ (JavaLangCharacter_UnicodeBlock *)VERTICAL_FORMS;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_GREEK_NUMBERS;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)PHAISTOS_DISC;

+ (JavaLangCharacter_UnicodeBlock *)LYCIAN;

+ (JavaLangCharacter_UnicodeBlock *)CARIAN;

+ (JavaLangCharacter_UnicodeBlock *)OLD_PERSIAN;

+ (JavaLangCharacter_UnicodeBlock *)IMPERIAL_ARAMAIC;

+ (JavaLangCharacter_UnicodeBlock *)PHOENICIAN;

+ (JavaLangCharacter_UnicodeBlock *)LYDIAN;

+ (JavaLangCharacter_UnicodeBlock *)KHAROSHTHI;

+ (JavaLangCharacter_UnicodeBlock *)OLD_SOUTH_ARABIAN;

+ (JavaLangCharacter_UnicodeBlock *)AVESTAN;

+ (JavaLangCharacter_UnicodeBlock *)INSCRIPTIONAL_PARTHIAN;

+ (JavaLangCharacter_UnicodeBlock *)INSCRIPTIONAL_PAHLAVI;

+ (JavaLangCharacter_UnicodeBlock *)OLD_TURKIC;

+ (JavaLangCharacter_UnicodeBlock *)RUMI_NUMERAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)BRAHMI;

+ (JavaLangCharacter_UnicodeBlock *)KAITHI;

+ (JavaLangCharacter_UnicodeBlock *)CUNEIFORM;

+ (JavaLangCharacter_UnicodeBlock *)CUNEIFORM_NUMBERS_AND_PUNCTUATION;

+ (JavaLangCharacter_UnicodeBlock *)EGYPTIAN_HIEROGLYPHS;

+ (JavaLangCharacter_UnicodeBlock *)BAMUM_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)KANA_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)ANCIENT_GREEK_MUSICAL_NOTATION;

+ (JavaLangCharacter_UnicodeBlock *)COUNTING_ROD_NUMERALS;

+ (JavaLangCharacter_UnicodeBlock *)MAHJONG_TILES;

+ (JavaLangCharacter_UnicodeBlock *)DOMINO_TILES;

+ (JavaLangCharacter_UnicodeBlock *)PLAYING_CARDS;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_ALPHANUMERIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;

+ (JavaLangCharacter_UnicodeBlock *)EMOTICONS;

+ (JavaLangCharacter_UnicodeBlock *)TRANSPORT_AND_MAP_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)ALCHEMICAL_SYMBOLS;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;

+ (JavaLangCharacter_UnicodeBlock *)CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_EXTENDED_A;

+ (JavaLangCharacter_UnicodeBlock *)SUNDANESE_SUPPLEMENT;

+ (JavaLangCharacter_UnicodeBlock *)MEETEI_MAYEK_EXTENSIONS;

+ (JavaLangCharacter_UnicodeBlock *)MEROITIC_HIEROGLYPHS;

+ (JavaLangCharacter_UnicodeBlock *)MEROITIC_CURSIVE;

+ (JavaLangCharacter_UnicodeBlock *)SORA_SOMPENG;

+ (JavaLangCharacter_UnicodeBlock *)CHAKMA;

+ (JavaLangCharacter_UnicodeBlock *)SHARADA;

+ (JavaLangCharacter_UnicodeBlock *)TAKRI;

+ (JavaLangCharacter_UnicodeBlock *)MIAO;

+ (JavaLangCharacter_UnicodeBlock *)ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;

#pragma mark Public

/*!
 @brief Returns the UnicodeBlock with the given name.
 Block
 names are determined by The Unicode Standard. The file
 Blocks-&lt;version&gt;.txt defines blocks for a particular
 version of the standard. The <code>Character</code> class specifies
 the version of the standard that it supports.
 <p>
 This method accepts block names in the following forms:
 <ol>
 <li> Canonical block names as defined by the Unicode Standard.
 For example, the standard defines a "Basic Latin" block. Therefore, this
 method accepts "Basic Latin" as a valid block name. The documentation of
 each UnicodeBlock provides the canonical name.
 <li>Canonical block names with all spaces removed. For example, "BasicLatin"
 is a valid block name for the "Basic Latin" block.
 <li>The text representation of each constant UnicodeBlock identifier.
 For example, this method will return the <code>BASIC_LATIN</code> block if
 provided with the "BASIC_LATIN" name. This form replaces all spaces and
 hyphens in the canonical name with underscores.
 </ol>
 Finally, character case is ignored for all of the valid block name forms.
 For example, "BASIC_LATIN" and "basic_latin" are both valid block names.
 The en_US locale's case mapping rules are used to provide case-insensitive
 string comparisons for block name validation.
 <p>
 If the Unicode Standard changes block names, both the previous and
 current names will be accepted.
 @param blockName A <code>UnicodeBlock</code> name.
 @return The <code>UnicodeBlock</code> instance identified
 by <code>blockName</code>
 @throws IllegalArgumentException if <code>blockName</code> is an
 invalid name
 @throws NullPointerException if <code>blockName</code> is null
 @since 1.5
 */
+ (JavaLangCharacter_UnicodeBlock *)forNameWithNSString:(NSString *)blockName;

/*!
 @brief Returns the object representing the Unicode block containing the
 given character, or <code>null</code> if the character is not a
 member of a defined block.
 <p><b>Note:</b> This method cannot handle
 <a href="Character.html#supplementary"> supplementary
 characters</a>.  To support all Unicode characters, including
 supplementary characters, use the <code>of(int)</code> method.
 @param c  The character in question
 @return The <code>UnicodeBlock</code> instance representing the
 Unicode block of which this character is a member, or
 <code>null</code> if the character is not a member of any
 Unicode block
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithChar:(jchar)c;

/*!
 @brief Returns the object representing the Unicode block
 containing the given character (Unicode code point), or
 <code>null</code> if the character is not a member of a
 defined block.
 @param codePoint the character (Unicode code point) in question.
 @return The <code>UnicodeBlock</code> instance representing the
 Unicode block of which this character is a member, or
 <code>null</code> if the character is not a member of any
 Unicode block
 @exception IllegalArgumentException if the specified
 <code>codePoint</code> is an invalid Unicode code point.
 - seealso: Character#isValidCodePoint(int)
 @since 1.5
 */
+ (JavaLangCharacter_UnicodeBlock *)ofWithInt:(jint)codePoint;

@end

J2OBJC_STATIC_INIT(JavaLangCharacter_UnicodeBlock)

/*!
 @brief Constant for the "Basic Latin" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BASIC_LATIN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BASIC_LATIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BASIC_LATIN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin-1 Supplement" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_1_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_1_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_1_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin Extended-A" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin Extended-B" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "IPA Extensions" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IPA_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IPA_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IPA_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Spacing Modifier Letters" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SPACING_MODIFIER_LETTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPACING_MODIFIER_LETTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SPACING_MODIFIER_LETTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Combining Diacritical Marks" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_DIACRITICAL_MARKS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Greek and Coptic" Unicode character block.
 <p>
 This block was previously known as the "Greek" block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GREEK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GREEK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cyrillic" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Armenian" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARMENIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARMENIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARMENIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hebrew" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HEBREW();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HEBREW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HEBREW, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Devanagari" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DEVANAGARI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DEVANAGARI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Bengali" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BENGALI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BENGALI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BENGALI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Gurmukhi" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GURMUKHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GURMUKHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GURMUKHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Gujarati" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GUJARATI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GUJARATI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GUJARATI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Oriya" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ORIYA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ORIYA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ORIYA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tamil" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAMIL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAMIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAMIL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Telugu" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TELUGU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TELUGU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TELUGU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kannada" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANNADA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANNADA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANNADA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Malayalam" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MALAYALAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MALAYALAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MALAYALAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Thai" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_THAI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, THAI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Lao" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LAO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LAO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LAO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tibetan" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TIBETAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIBETAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TIBETAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Georgian" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEORGIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEORGIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hangul Jamo" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin Extended Additional" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_ADDITIONAL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_ADDITIONAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_ADDITIONAL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Greek Extended" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GREEK_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GREEK_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GREEK_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "General Punctuation" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GENERAL_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GENERAL_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GENERAL_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Superscripts and Subscripts" Unicode character
 block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPERSCRIPTS_AND_SUBSCRIPTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPERSCRIPTS_AND_SUBSCRIPTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPERSCRIPTS_AND_SUBSCRIPTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Currency Symbols" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CURRENCY_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CURRENCY_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CURRENCY_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Combining Diacritical Marks for Symbols" Unicode
 character block.
 <p>
 This block was previously known as "Combining Marks for Symbols".
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_MARKS_FOR_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_MARKS_FOR_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_MARKS_FOR_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Letterlike Symbols" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LETTERLIKE_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LETTERLIKE_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LETTERLIKE_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Number Forms" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NUMBER_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NUMBER_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NUMBER_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arrows" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARROWS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARROWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARROWS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Mathematical Operators" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MATHEMATICAL_OPERATORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_OPERATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_OPERATORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Technical" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_TECHNICAL();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_TECHNICAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_TECHNICAL, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Control Pictures" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CONTROL_PICTURES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CONTROL_PICTURES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CONTROL_PICTURES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Optical Character Recognition" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OPTICAL_CHARACTER_RECOGNITION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OPTICAL_CHARACTER_RECOGNITION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OPTICAL_CHARACTER_RECOGNITION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Enclosed Alphanumerics" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_ALPHANUMERICS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERICS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERICS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Box Drawing" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOX_DRAWING();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOX_DRAWING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOX_DRAWING, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Block Elements" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BLOCK_ELEMENTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BLOCK_ELEMENTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BLOCK_ELEMENTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Geometric Shapes" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEOMETRIC_SHAPES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEOMETRIC_SHAPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEOMETRIC_SHAPES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Symbols" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Dingbats" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DINGBATS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DINGBATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DINGBATS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Symbols and Punctuation" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_SYMBOLS_AND_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_SYMBOLS_AND_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_SYMBOLS_AND_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hiragana" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIRAGANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIRAGANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIRAGANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Katakana" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KATAKANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KATAKANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Bopomofo" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOPOMOFO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOPOMOFO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hangul Compatibility Jamo" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_COMPATIBILITY_JAMO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_COMPATIBILITY_JAMO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_COMPATIBILITY_JAMO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kanbun" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANBUN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANBUN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANBUN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Enclosed CJK Letters and Months" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_CJK_LETTERS_AND_MONTHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_CJK_LETTERS_AND_MONTHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_CJK_LETTERS_AND_MONTHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Compatibility" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Unified Ideographs" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hangul Syllables" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_SYLLABLES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_SYLLABLES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_SYLLABLES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Private Use Area" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PRIVATE_USE_AREA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PRIVATE_USE_AREA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PRIVATE_USE_AREA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Compatibility Ideographs" Unicode character
 block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_IDEOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Alphabetic Presentation Forms" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ALPHABETIC_PRESENTATION_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALPHABETIC_PRESENTATION_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ALPHABETIC_PRESENTATION_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic Presentation Forms-A" Unicode character
 block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_PRESENTATION_FORMS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Combining Half Marks" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_HALF_MARKS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_HALF_MARKS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_HALF_MARKS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Compatibility Forms" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Small Form Variants" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SMALL_FORM_VARIANTS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SMALL_FORM_VARIANTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SMALL_FORM_VARIANTS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic Presentation Forms-B" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_PRESENTATION_FORMS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_PRESENTATION_FORMS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_PRESENTATION_FORMS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Halfwidth and Fullwidth Forms" Unicode character
 block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HALFWIDTH_AND_FULLWIDTH_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HALFWIDTH_AND_FULLWIDTH_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HALFWIDTH_AND_FULLWIDTH_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Specials" Unicode character block.
 @since 1.2
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SPECIALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SPECIALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SPECIALS, JavaLangCharacter_UnicodeBlock *)

/*!
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SURROGATES_AREA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SURROGATES_AREA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SURROGATES_AREA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Syriac" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SYRIAC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYRIAC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SYRIAC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Thaana" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_THAANA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_THAANA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, THAANA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Sinhala" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SINHALA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SINHALA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SINHALA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Myanmar" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MYANMAR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MYANMAR, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ethiopic" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cherokee" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CHEROKEE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHEROKEE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CHEROKEE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Unified Canadian Aboriginal Syllabics" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ogham" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OGHAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OGHAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OGHAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Runic" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_RUNIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUNIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, RUNIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Khmer" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHMER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHMER, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Mongolian" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MONGOLIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MONGOLIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MONGOLIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Braille Patterns" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BRAILLE_PATTERNS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAILLE_PATTERNS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BRAILLE_PATTERNS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Radicals Supplement" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_RADICALS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_RADICALS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_RADICALS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kangxi Radicals" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANGXI_RADICALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANGXI_RADICALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANGXI_RADICALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ideographic Description Characters" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IDEOGRAPHIC_DESCRIPTION_CHARACTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IDEOGRAPHIC_DESCRIPTION_CHARACTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Bopomofo Extended" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BOPOMOFO_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BOPOMOFO_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BOPOMOFO_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Unified Ideographs Extension A" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Yi Syllables" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YI_SYLLABLES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_SYLLABLES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YI_SYLLABLES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Yi Radicals" Unicode character block.
 @since 1.4
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YI_RADICALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YI_RADICALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YI_RADICALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cyrillic Supplementary" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_SUPPLEMENTARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_SUPPLEMENTARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_SUPPLEMENTARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tagalog" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGALOG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGALOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGALOG, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hanunoo" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANUNOO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANUNOO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANUNOO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Buhid" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BUHID();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUHID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BUHID, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tagbanwa" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGBANWA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGBANWA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGBANWA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Limbu" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LIMBU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LIMBU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LIMBU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tai Le" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_LE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_LE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_LE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Khmer Symbols" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHMER_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHMER_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHMER_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Phonetic Extensions" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHONETIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Mathematical Symbols-A" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplemental Arrows-A" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_ARROWS_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplemental Arrows-B" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_ARROWS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_ARROWS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_ARROWS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Mathematical Symbols-B" Unicode
 character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplemental Mathematical Operators" Unicode
 character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_MATHEMATICAL_OPERATORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_MATHEMATICAL_OPERATORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Symbols and Arrows" Unicode character
 block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS_AND_ARROWS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_ARROWS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_ARROWS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Katakana Phonetic Extensions" Unicode character
 block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KATAKANA_PHONETIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KATAKANA_PHONETIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KATAKANA_PHONETIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Yijing Hexagram Symbols" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_YIJING_HEXAGRAM_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_YIJING_HEXAGRAM_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, YIJING_HEXAGRAM_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Variation Selectors" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VARIATION_SELECTORS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Linear B Syllabary" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LINEAR_B_SYLLABARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_SYLLABARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LINEAR_B_SYLLABARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Linear B Ideograms" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LINEAR_B_IDEOGRAMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LINEAR_B_IDEOGRAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LINEAR_B_IDEOGRAMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Aegean Numbers" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_AEGEAN_NUMBERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AEGEAN_NUMBERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, AEGEAN_NUMBERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Old Italic" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_ITALIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_ITALIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_ITALIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Gothic" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GOTHIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GOTHIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GOTHIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ugaritic" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UGARITIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UGARITIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UGARITIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Deseret" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DESERET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DESERET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DESERET, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Shavian" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SHAVIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SHAVIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SHAVIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Osmanya" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OSMANYA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OSMANYA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OSMANYA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cypriot Syllabary" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYPRIOT_SYLLABARY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYPRIOT_SYLLABARY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYPRIOT_SYLLABARY, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Byzantine Musical Symbols" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BYZANTINE_MUSICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BYZANTINE_MUSICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BYZANTINE_MUSICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Musical Symbols" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MUSICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MUSICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MUSICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tai Xuan Jing Symbols" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_XUAN_JING_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_XUAN_JING_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_XUAN_JING_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Mathematical Alphanumeric Symbols" Unicode
 character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MATHEMATICAL_ALPHANUMERIC_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MATHEMATICAL_ALPHANUMERIC_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Unified Ideographs Extension B" Unicode
 character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Compatibility Ideographs Supplement" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tags" Unicode character block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAGS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAGS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Variation Selectors Supplement" Unicode character
 block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VARIATION_SELECTORS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VARIATION_SELECTORS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VARIATION_SELECTORS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplementary Private Use Area-A" Unicode character
 block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTARY_PRIVATE_USE_AREA_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplementary Private Use Area-B" Unicode character
 block.
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTARY_PRIVATE_USE_AREA_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTARY_PRIVATE_USE_AREA_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "High Surrogates" Unicode character block.
 This block represents codepoint values in the high surrogate
 range: U+D800 through U+DB7F
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIGH_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIGH_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "High Private Use Surrogates" Unicode character
 block.
 This block represents codepoint values in the private use high
 surrogate range: U+DB80 through U+DBFF
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HIGH_PRIVATE_USE_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HIGH_PRIVATE_USE_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HIGH_PRIVATE_USE_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Low Surrogates" Unicode character block.
 This block represents codepoint values in the low surrogate
 range: U+DC00 through U+DFFF
 @since 1.5
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LOW_SURROGATES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LOW_SURROGATES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LOW_SURROGATES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic Supplement" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "NKo" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NKO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NKO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NKO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Samaritan" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SAMARITAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAMARITAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SAMARITAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Mandaic" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MANDAIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MANDAIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MANDAIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ethiopic Supplement" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Unified Canadian Aboriginal Syllabics Extended"
 Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "New Tai Lue" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_NEW_TAI_LUE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_NEW_TAI_LUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, NEW_TAI_LUE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Buginese" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BUGINESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BUGINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BUGINESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tai Tham" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_THAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_THAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_THAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Balinese" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BALINESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BALINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BALINESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Sundanese" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUNDANESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUNDANESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUNDANESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Batak" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BATAK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BATAK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BATAK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Lepcha" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LEPCHA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LEPCHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LEPCHA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ol Chiki" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OL_CHIKI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OL_CHIKI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OL_CHIKI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Vedic Extensions" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VEDIC_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VEDIC_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VEDIC_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Phonetic Extensions Supplement" Unicode character
 block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHONETIC_EXTENSIONS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHONETIC_EXTENSIONS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHONETIC_EXTENSIONS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Combining Diacritical Marks Supplement" Unicode
 character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMBINING_DIACRITICAL_MARKS_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Glagolitic" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GLAGOLITIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GLAGOLITIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GLAGOLITIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin Extended-C" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_C();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_C;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_C, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Coptic" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COPTIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COPTIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COPTIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Georgian Supplement" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_GEORGIAN_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_GEORGIAN_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, GEORGIAN_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tifinagh" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TIFINAGH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TIFINAGH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TIFINAGH, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ethiopic Extended" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cyrillic Extended-A" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Supplemental Punctuation" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUPPLEMENTAL_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUPPLEMENTAL_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUPPLEMENTAL_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Strokes" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_STROKES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_STROKES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_STROKES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Lisu" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LISU();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LISU;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LISU, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Vai" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VAI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VAI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VAI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cyrillic Extended-B" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CYRILLIC_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CYRILLIC_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CYRILLIC_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Bamum" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BAMUM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BAMUM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Modifier Tone Letters" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MODIFIER_TONE_LETTERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MODIFIER_TONE_LETTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MODIFIER_TONE_LETTERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Latin Extended-D" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LATIN_EXTENDED_D();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LATIN_EXTENDED_D;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LATIN_EXTENDED_D, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Syloti Nagri" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SYLOTI_NAGRI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SYLOTI_NAGRI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SYLOTI_NAGRI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Common Indic Number Forms" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COMMON_INDIC_NUMBER_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COMMON_INDIC_NUMBER_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COMMON_INDIC_NUMBER_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Phags-pa" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHAGS_PA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAGS_PA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHAGS_PA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Saurashtra" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SAURASHTRA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SAURASHTRA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SAURASHTRA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Devanagari Extended" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DEVANAGARI_EXTENDED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DEVANAGARI_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DEVANAGARI_EXTENDED, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kayah Li" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KAYAH_LI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAYAH_LI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KAYAH_LI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Rejang" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_REJANG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_REJANG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, REJANG, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hangul Jamo Extended-A" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Javanese" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_JAVANESE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_JAVANESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, JAVANESE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cham" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CHAM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CHAM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Myanmar Extended-A" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MYANMAR_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MYANMAR_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MYANMAR_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Tai Viet" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAI_VIET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAI_VIET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAI_VIET, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ethiopic Extended-A" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ETHIOPIC_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ETHIOPIC_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ETHIOPIC_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Meetei Mayek" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MEETEI_MAYEK();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEETEI_MAYEK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MEETEI_MAYEK, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Hangul Jamo Extended-B" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_HANGUL_JAMO_EXTENDED_B();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_HANGUL_JAMO_EXTENDED_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, HANGUL_JAMO_EXTENDED_B, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Vertical Forms" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_VERTICAL_FORMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_VERTICAL_FORMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, VERTICAL_FORMS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ancient Greek Numbers" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_GREEK_NUMBERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_NUMBERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_NUMBERS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ancient Symbols" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Phaistos Disc" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHAISTOS_DISC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHAISTOS_DISC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHAISTOS_DISC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Lycian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LYCIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYCIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LYCIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Carian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CARIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CARIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CARIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Old Persian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_PERSIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_PERSIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_PERSIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Imperial Aramaic" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_IMPERIAL_ARAMAIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_IMPERIAL_ARAMAIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, IMPERIAL_ARAMAIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Phoenician" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PHOENICIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PHOENICIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PHOENICIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Lydian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_LYDIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_LYDIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, LYDIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kharoshthi" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KHAROSHTHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KHAROSHTHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KHAROSHTHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Old South Arabian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_SOUTH_ARABIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_SOUTH_ARABIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_SOUTH_ARABIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Avestan" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_AVESTAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_AVESTAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, AVESTAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Inscriptional Parthian" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_INSCRIPTIONAL_PARTHIAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PARTHIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PARTHIAN, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Inscriptional Pahlavi" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_INSCRIPTIONAL_PAHLAVI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_INSCRIPTIONAL_PAHLAVI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, INSCRIPTIONAL_PAHLAVI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Old Turkic" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_OLD_TURKIC();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_OLD_TURKIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, OLD_TURKIC, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Rumi Numeral Symbols" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_RUMI_NUMERAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_RUMI_NUMERAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, RUMI_NUMERAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Brahmi" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BRAHMI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BRAHMI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BRAHMI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kaithi" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KAITHI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KAITHI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KAITHI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cuneiform" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CUNEIFORM();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CUNEIFORM, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Cuneiform Numbers and Punctuation" Unicode
 character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CUNEIFORM_NUMBERS_AND_PUNCTUATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CUNEIFORM_NUMBERS_AND_PUNCTUATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CUNEIFORM_NUMBERS_AND_PUNCTUATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Egyptian Hieroglyphs" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_EGYPTIAN_HIEROGLYPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EGYPTIAN_HIEROGLYPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, EGYPTIAN_HIEROGLYPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Bamum Supplement" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_BAMUM_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_BAMUM_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, BAMUM_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Kana Supplement" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_KANA_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_KANA_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, KANA_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Ancient Greek Musical Notation" Unicode character
 block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ANCIENT_GREEK_MUSICAL_NOTATION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ANCIENT_GREEK_MUSICAL_NOTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ANCIENT_GREEK_MUSICAL_NOTATION, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Counting Rod Numerals" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_COUNTING_ROD_NUMERALS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_COUNTING_ROD_NUMERALS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, COUNTING_ROD_NUMERALS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Mahjong Tiles" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MAHJONG_TILES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MAHJONG_TILES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MAHJONG_TILES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Domino Tiles" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_DOMINO_TILES();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_DOMINO_TILES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, DOMINO_TILES, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Playing Cards" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_PLAYING_CARDS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_PLAYING_CARDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, PLAYING_CARDS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Enclosed Alphanumeric Supplement" Unicode character
 block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_ALPHANUMERIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_ALPHANUMERIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Enclosed Ideographic Supplement" Unicode character
 block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ENCLOSED_IDEOGRAPHIC_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miscellaneous Symbols And Pictographs" Unicode
 character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Emoticons" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_EMOTICONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_EMOTICONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, EMOTICONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Transport And Map Symbols" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TRANSPORT_AND_MAP_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TRANSPORT_AND_MAP_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TRANSPORT_AND_MAP_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Alchemical Symbols" Unicode character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ALCHEMICAL_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ALCHEMICAL_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ALCHEMICAL_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Unified Ideographs Extension C" Unicode
 character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "CJK Unified Ideographs Extension D" Unicode
 character block.
 @since 1.7
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic Extended-A" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_EXTENDED_A();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_EXTENDED_A;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_EXTENDED_A, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Sundanese Supplement" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SUNDANESE_SUPPLEMENT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SUNDANESE_SUPPLEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SUNDANESE_SUPPLEMENT, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Meetei Mayek Extensions" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MEETEI_MAYEK_EXTENSIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEETEI_MAYEK_EXTENSIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MEETEI_MAYEK_EXTENSIONS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Meroitic Hieroglyphs" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MEROITIC_HIEROGLYPHS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEROITIC_HIEROGLYPHS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MEROITIC_HIEROGLYPHS, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Meroitic Cursive" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MEROITIC_CURSIVE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MEROITIC_CURSIVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MEROITIC_CURSIVE, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Sora Sompeng" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SORA_SOMPENG();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SORA_SOMPENG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SORA_SOMPENG, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Chakma" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_CHAKMA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_CHAKMA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, CHAKMA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Sharada" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_SHARADA();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_SHARADA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, SHARADA, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Takri" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_TAKRI();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_TAKRI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, TAKRI, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Miao" Unicode character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_MIAO();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_MIAO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, MIAO, JavaLangCharacter_UnicodeBlock *)

/*!
 @brief Constant for the "Arabic Mathematical Alphabetic Symbols" Unicode
 character block.
 @since 1.8
 */
inline JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_get_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangCharacter_UnicodeBlock, ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS, JavaLangCharacter_UnicodeBlock *)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithChar_(jchar c);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_ofWithInt_(jint codePoint);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeBlock *JavaLangCharacter_UnicodeBlock_forNameWithNSString_(NSString *blockName);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_UnicodeBlock)

#endif

#if !defined (JavaLangCharacter_UnicodeScript_) && (INCLUDE_ALL_JavaLangCharacter || defined(INCLUDE_JavaLangCharacter_UnicodeScript))
#define JavaLangCharacter_UnicodeScript_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "../../java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaLangCharacter_UnicodeScript_Enum) {
  JavaLangCharacter_UnicodeScript_Enum_COMMON = 0,
  JavaLangCharacter_UnicodeScript_Enum_LATIN = 1,
  JavaLangCharacter_UnicodeScript_Enum_GREEK = 2,
  JavaLangCharacter_UnicodeScript_Enum_CYRILLIC = 3,
  JavaLangCharacter_UnicodeScript_Enum_ARMENIAN = 4,
  JavaLangCharacter_UnicodeScript_Enum_HEBREW = 5,
  JavaLangCharacter_UnicodeScript_Enum_ARABIC = 6,
  JavaLangCharacter_UnicodeScript_Enum_SYRIAC = 7,
  JavaLangCharacter_UnicodeScript_Enum_THAANA = 8,
  JavaLangCharacter_UnicodeScript_Enum_DEVANAGARI = 9,
  JavaLangCharacter_UnicodeScript_Enum_BENGALI = 10,
  JavaLangCharacter_UnicodeScript_Enum_GURMUKHI = 11,
  JavaLangCharacter_UnicodeScript_Enum_GUJARATI = 12,
  JavaLangCharacter_UnicodeScript_Enum_ORIYA = 13,
  JavaLangCharacter_UnicodeScript_Enum_TAMIL = 14,
  JavaLangCharacter_UnicodeScript_Enum_TELUGU = 15,
  JavaLangCharacter_UnicodeScript_Enum_KANNADA = 16,
  JavaLangCharacter_UnicodeScript_Enum_MALAYALAM = 17,
  JavaLangCharacter_UnicodeScript_Enum_SINHALA = 18,
  JavaLangCharacter_UnicodeScript_Enum_THAI = 19,
  JavaLangCharacter_UnicodeScript_Enum_LAO = 20,
  JavaLangCharacter_UnicodeScript_Enum_TIBETAN = 21,
  JavaLangCharacter_UnicodeScript_Enum_MYANMAR = 22,
  JavaLangCharacter_UnicodeScript_Enum_GEORGIAN = 23,
  JavaLangCharacter_UnicodeScript_Enum_HANGUL = 24,
  JavaLangCharacter_UnicodeScript_Enum_ETHIOPIC = 25,
  JavaLangCharacter_UnicodeScript_Enum_CHEROKEE = 26,
  JavaLangCharacter_UnicodeScript_Enum_CANADIAN_ABORIGINAL = 27,
  JavaLangCharacter_UnicodeScript_Enum_OGHAM = 28,
  JavaLangCharacter_UnicodeScript_Enum_RUNIC = 29,
  JavaLangCharacter_UnicodeScript_Enum_KHMER = 30,
  JavaLangCharacter_UnicodeScript_Enum_MONGOLIAN = 31,
  JavaLangCharacter_UnicodeScript_Enum_HIRAGANA = 32,
  JavaLangCharacter_UnicodeScript_Enum_KATAKANA = 33,
  JavaLangCharacter_UnicodeScript_Enum_BOPOMOFO = 34,
  JavaLangCharacter_UnicodeScript_Enum_HAN = 35,
  JavaLangCharacter_UnicodeScript_Enum_YI = 36,
  JavaLangCharacter_UnicodeScript_Enum_OLD_ITALIC = 37,
  JavaLangCharacter_UnicodeScript_Enum_GOTHIC = 38,
  JavaLangCharacter_UnicodeScript_Enum_DESERET = 39,
  JavaLangCharacter_UnicodeScript_Enum_INHERITED = 40,
  JavaLangCharacter_UnicodeScript_Enum_TAGALOG = 41,
  JavaLangCharacter_UnicodeScript_Enum_HANUNOO = 42,
  JavaLangCharacter_UnicodeScript_Enum_BUHID = 43,
  JavaLangCharacter_UnicodeScript_Enum_TAGBANWA = 44,
  JavaLangCharacter_UnicodeScript_Enum_LIMBU = 45,
  JavaLangCharacter_UnicodeScript_Enum_TAI_LE = 46,
  JavaLangCharacter_UnicodeScript_Enum_LINEAR_B = 47,
  JavaLangCharacter_UnicodeScript_Enum_UGARITIC = 48,
  JavaLangCharacter_UnicodeScript_Enum_SHAVIAN = 49,
  JavaLangCharacter_UnicodeScript_Enum_OSMANYA = 50,
  JavaLangCharacter_UnicodeScript_Enum_CYPRIOT = 51,
  JavaLangCharacter_UnicodeScript_Enum_BRAILLE = 52,
  JavaLangCharacter_UnicodeScript_Enum_BUGINESE = 53,
  JavaLangCharacter_UnicodeScript_Enum_COPTIC = 54,
  JavaLangCharacter_UnicodeScript_Enum_NEW_TAI_LUE = 55,
  JavaLangCharacter_UnicodeScript_Enum_GLAGOLITIC = 56,
  JavaLangCharacter_UnicodeScript_Enum_TIFINAGH = 57,
  JavaLangCharacter_UnicodeScript_Enum_SYLOTI_NAGRI = 58,
  JavaLangCharacter_UnicodeScript_Enum_OLD_PERSIAN = 59,
  JavaLangCharacter_UnicodeScript_Enum_KHAROSHTHI = 60,
  JavaLangCharacter_UnicodeScript_Enum_BALINESE = 61,
  JavaLangCharacter_UnicodeScript_Enum_CUNEIFORM = 62,
  JavaLangCharacter_UnicodeScript_Enum_PHOENICIAN = 63,
  JavaLangCharacter_UnicodeScript_Enum_PHAGS_PA = 64,
  JavaLangCharacter_UnicodeScript_Enum_NKO = 65,
  JavaLangCharacter_UnicodeScript_Enum_SUNDANESE = 66,
  JavaLangCharacter_UnicodeScript_Enum_BATAK = 67,
  JavaLangCharacter_UnicodeScript_Enum_LEPCHA = 68,
  JavaLangCharacter_UnicodeScript_Enum_OL_CHIKI = 69,
  JavaLangCharacter_UnicodeScript_Enum_VAI = 70,
  JavaLangCharacter_UnicodeScript_Enum_SAURASHTRA = 71,
  JavaLangCharacter_UnicodeScript_Enum_KAYAH_LI = 72,
  JavaLangCharacter_UnicodeScript_Enum_REJANG = 73,
  JavaLangCharacter_UnicodeScript_Enum_LYCIAN = 74,
  JavaLangCharacter_UnicodeScript_Enum_CARIAN = 75,
  JavaLangCharacter_UnicodeScript_Enum_LYDIAN = 76,
  JavaLangCharacter_UnicodeScript_Enum_CHAM = 77,
  JavaLangCharacter_UnicodeScript_Enum_TAI_THAM = 78,
  JavaLangCharacter_UnicodeScript_Enum_TAI_VIET = 79,
  JavaLangCharacter_UnicodeScript_Enum_AVESTAN = 80,
  JavaLangCharacter_UnicodeScript_Enum_EGYPTIAN_HIEROGLYPHS = 81,
  JavaLangCharacter_UnicodeScript_Enum_SAMARITAN = 82,
  JavaLangCharacter_UnicodeScript_Enum_MANDAIC = 83,
  JavaLangCharacter_UnicodeScript_Enum_LISU = 84,
  JavaLangCharacter_UnicodeScript_Enum_BAMUM = 85,
  JavaLangCharacter_UnicodeScript_Enum_JAVANESE = 86,
  JavaLangCharacter_UnicodeScript_Enum_MEETEI_MAYEK = 87,
  JavaLangCharacter_UnicodeScript_Enum_IMPERIAL_ARAMAIC = 88,
  JavaLangCharacter_UnicodeScript_Enum_OLD_SOUTH_ARABIAN = 89,
  JavaLangCharacter_UnicodeScript_Enum_INSCRIPTIONAL_PARTHIAN = 90,
  JavaLangCharacter_UnicodeScript_Enum_INSCRIPTIONAL_PAHLAVI = 91,
  JavaLangCharacter_UnicodeScript_Enum_OLD_TURKIC = 92,
  JavaLangCharacter_UnicodeScript_Enum_BRAHMI = 93,
  JavaLangCharacter_UnicodeScript_Enum_KAITHI = 94,
  JavaLangCharacter_UnicodeScript_Enum_MEROITIC_HIEROGLYPHS = 95,
  JavaLangCharacter_UnicodeScript_Enum_MEROITIC_CURSIVE = 96,
  JavaLangCharacter_UnicodeScript_Enum_SORA_SOMPENG = 97,
  JavaLangCharacter_UnicodeScript_Enum_CHAKMA = 98,
  JavaLangCharacter_UnicodeScript_Enum_SHARADA = 99,
  JavaLangCharacter_UnicodeScript_Enum_TAKRI = 100,
  JavaLangCharacter_UnicodeScript_Enum_MIAO = 101,
  JavaLangCharacter_UnicodeScript_Enum_UNKNOWN = 102,
};

/*!
 @brief A family of character subsets representing the character scripts
 defined in the <a href="http://www.unicode.org/reports/tr24/">
 <i>Unicode Standard Annex #24: Script Names</i></a>.
 Every Unicode
 character is assigned to a single Unicode script, either a specific
 script, such as <code>Latin</code>, or
 one of the following three special values,
 <code>Inherited</code>,
 <code>Common</code> or
 <code>Unknown</code>.
 @since 1.7
 */
@interface JavaLangCharacter_UnicodeScript : JavaLangEnum < NSCopying >

+ (JavaLangCharacter_UnicodeScript * __nonnull)COMMON;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LATIN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GREEK;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CYRILLIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)ARMENIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)HEBREW;

+ (JavaLangCharacter_UnicodeScript * __nonnull)ARABIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SYRIAC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)THAANA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)DEVANAGARI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BENGALI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GURMUKHI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GUJARATI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)ORIYA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAMIL;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TELUGU;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KANNADA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MALAYALAM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SINHALA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)THAI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LAO;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TIBETAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MYANMAR;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GEORGIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)HANGUL;

+ (JavaLangCharacter_UnicodeScript * __nonnull)ETHIOPIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CHEROKEE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CANADIAN_ABORIGINAL;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OGHAM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)RUNIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KHMER;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MONGOLIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)HIRAGANA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KATAKANA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BOPOMOFO;

+ (JavaLangCharacter_UnicodeScript * __nonnull)HAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)YI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OLD_ITALIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GOTHIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)DESERET;

+ (JavaLangCharacter_UnicodeScript * __nonnull)INHERITED;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAGALOG;

+ (JavaLangCharacter_UnicodeScript * __nonnull)HANUNOO;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BUHID;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAGBANWA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LIMBU;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAI_LE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LINEAR_B;

+ (JavaLangCharacter_UnicodeScript * __nonnull)UGARITIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SHAVIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OSMANYA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CYPRIOT;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BRAILLE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BUGINESE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)COPTIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)NEW_TAI_LUE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)GLAGOLITIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TIFINAGH;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SYLOTI_NAGRI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OLD_PERSIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KHAROSHTHI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BALINESE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CUNEIFORM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)PHOENICIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)PHAGS_PA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)NKO;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SUNDANESE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BATAK;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LEPCHA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OL_CHIKI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)VAI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SAURASHTRA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KAYAH_LI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)REJANG;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LYCIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CARIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LYDIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CHAM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAI_THAM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAI_VIET;

+ (JavaLangCharacter_UnicodeScript * __nonnull)AVESTAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)EGYPTIAN_HIEROGLYPHS;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SAMARITAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MANDAIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)LISU;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BAMUM;

+ (JavaLangCharacter_UnicodeScript * __nonnull)JAVANESE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MEETEI_MAYEK;

+ (JavaLangCharacter_UnicodeScript * __nonnull)IMPERIAL_ARAMAIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OLD_SOUTH_ARABIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)INSCRIPTIONAL_PARTHIAN;

+ (JavaLangCharacter_UnicodeScript * __nonnull)INSCRIPTIONAL_PAHLAVI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)OLD_TURKIC;

+ (JavaLangCharacter_UnicodeScript * __nonnull)BRAHMI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)KAITHI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MEROITIC_HIEROGLYPHS;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MEROITIC_CURSIVE;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SORA_SOMPENG;

+ (JavaLangCharacter_UnicodeScript * __nonnull)CHAKMA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)SHARADA;

+ (JavaLangCharacter_UnicodeScript * __nonnull)TAKRI;

+ (JavaLangCharacter_UnicodeScript * __nonnull)MIAO;

+ (JavaLangCharacter_UnicodeScript * __nonnull)UNKNOWN;

#pragma mark Public

/*!
 @brief Returns the UnicodeScript constant with the given Unicode script
 name or the script name alias.
 Script names and their aliases are
 determined by The Unicode Standard. The files Scripts&lt;version&gt;.txt
 and PropertyValueAliases&lt;version&gt;.txt define script names
 and the script name aliases for a particular version of the
 standard. The <code>Character</code> class specifies the version of
 the standard that it supports.
 <p>
 Character case is ignored for all of the valid script names.
 The en_US locale's case mapping rules are used to provide
 case-insensitive string comparisons for script name validation.
 <p>
 @param scriptName A <code>UnicodeScript</code> name.
 @return The <code>UnicodeScript</code> constant identified
 by <code>scriptName</code>
 @throws IllegalArgumentException if <code>scriptName</code> is an
 invalid name
 @throws NullPointerException if <code>scriptName</code> is null
 */
+ (JavaLangCharacter_UnicodeScript *)forNameWithNSString:(NSString *)scriptName;

/*!
 @brief Returns the enum constant representing the Unicode script of which
 the given character (Unicode code point) is assigned to.
 @param codePoint the character (Unicode code point) in question.
 @return The <code>UnicodeScript</code> constant representing the
 Unicode script of which this character is assigned to.
 @exception IllegalArgumentException if the specified
 <code>codePoint</code> is an invalid Unicode code point.
 - seealso: Character#isValidCodePoint(int)
 */
+ (JavaLangCharacter_UnicodeScript *)ofWithInt:(jint)codePoint;

+ (JavaLangCharacter_UnicodeScript *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;
- (JavaLangCharacter_UnicodeScript_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaLangCharacter_UnicodeScript)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_values_[];

/*!
 @brief Unicode script "Common".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_COMMON();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, COMMON)

/*!
 @brief Unicode script "Latin".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LATIN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LATIN)

/*!
 @brief Unicode script "Greek".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GREEK();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GREEK)

/*!
 @brief Unicode script "Cyrillic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CYRILLIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CYRILLIC)

/*!
 @brief Unicode script "Armenian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_ARMENIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, ARMENIAN)

/*!
 @brief Unicode script "Hebrew".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_HEBREW();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, HEBREW)

/*!
 @brief Unicode script "Arabic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_ARABIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, ARABIC)

/*!
 @brief Unicode script "Syriac".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SYRIAC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SYRIAC)

/*!
 @brief Unicode script "Thaana".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_THAANA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, THAANA)

/*!
 @brief Unicode script "Devanagari".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_DEVANAGARI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, DEVANAGARI)

/*!
 @brief Unicode script "Bengali".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BENGALI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BENGALI)

/*!
 @brief Unicode script "Gurmukhi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GURMUKHI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GURMUKHI)

/*!
 @brief Unicode script "Gujarati".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GUJARATI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GUJARATI)

/*!
 @brief Unicode script "Oriya".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_ORIYA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, ORIYA)

/*!
 @brief Unicode script "Tamil".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAMIL();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAMIL)

/*!
 @brief Unicode script "Telugu".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TELUGU();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TELUGU)

/*!
 @brief Unicode script "Kannada".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KANNADA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KANNADA)

/*!
 @brief Unicode script "Malayalam".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MALAYALAM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MALAYALAM)

/*!
 @brief Unicode script "Sinhala".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SINHALA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SINHALA)

/*!
 @brief Unicode script "Thai".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_THAI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, THAI)

/*!
 @brief Unicode script "Lao".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LAO();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LAO)

/*!
 @brief Unicode script "Tibetan".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TIBETAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TIBETAN)

/*!
 @brief Unicode script "Myanmar".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MYANMAR();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MYANMAR)

/*!
 @brief Unicode script "Georgian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GEORGIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GEORGIAN)

/*!
 @brief Unicode script "Hangul".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_HANGUL();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, HANGUL)

/*!
 @brief Unicode script "Ethiopic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_ETHIOPIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, ETHIOPIC)

/*!
 @brief Unicode script "Cherokee".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CHEROKEE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CHEROKEE)

/*!
 @brief Unicode script "Canadian_Aboriginal".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CANADIAN_ABORIGINAL();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CANADIAN_ABORIGINAL)

/*!
 @brief Unicode script "Ogham".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OGHAM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OGHAM)

/*!
 @brief Unicode script "Runic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_RUNIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, RUNIC)

/*!
 @brief Unicode script "Khmer".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KHMER();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KHMER)

/*!
 @brief Unicode script "Mongolian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MONGOLIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MONGOLIAN)

/*!
 @brief Unicode script "Hiragana".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_HIRAGANA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, HIRAGANA)

/*!
 @brief Unicode script "Katakana".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KATAKANA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KATAKANA)

/*!
 @brief Unicode script "Bopomofo".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BOPOMOFO();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BOPOMOFO)

/*!
 @brief Unicode script "Han".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_HAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, HAN)

/*!
 @brief Unicode script "Yi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_YI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, YI)

/*!
 @brief Unicode script "Old_Italic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OLD_ITALIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OLD_ITALIC)

/*!
 @brief Unicode script "Gothic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GOTHIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GOTHIC)

/*!
 @brief Unicode script "Deseret".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_DESERET();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, DESERET)

/*!
 @brief Unicode script "Inherited".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_INHERITED();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, INHERITED)

/*!
 @brief Unicode script "Tagalog".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAGALOG();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAGALOG)

/*!
 @brief Unicode script "Hanunoo".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_HANUNOO();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, HANUNOO)

/*!
 @brief Unicode script "Buhid".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BUHID();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BUHID)

/*!
 @brief Unicode script "Tagbanwa".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAGBANWA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAGBANWA)

/*!
 @brief Unicode script "Limbu".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LIMBU();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LIMBU)

/*!
 @brief Unicode script "Tai_Le".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAI_LE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAI_LE)

/*!
 @brief Unicode script "Linear_B".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LINEAR_B();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LINEAR_B)

/*!
 @brief Unicode script "Ugaritic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_UGARITIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, UGARITIC)

/*!
 @brief Unicode script "Shavian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SHAVIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SHAVIAN)

/*!
 @brief Unicode script "Osmanya".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OSMANYA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OSMANYA)

/*!
 @brief Unicode script "Cypriot".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CYPRIOT();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CYPRIOT)

/*!
 @brief Unicode script "Braille".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BRAILLE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BRAILLE)

/*!
 @brief Unicode script "Buginese".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BUGINESE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BUGINESE)

/*!
 @brief Unicode script "Coptic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_COPTIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, COPTIC)

/*!
 @brief Unicode script "New_Tai_Lue".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_NEW_TAI_LUE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, NEW_TAI_LUE)

/*!
 @brief Unicode script "Glagolitic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_GLAGOLITIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, GLAGOLITIC)

/*!
 @brief Unicode script "Tifinagh".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TIFINAGH();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TIFINAGH)

/*!
 @brief Unicode script "Syloti_Nagri".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SYLOTI_NAGRI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SYLOTI_NAGRI)

/*!
 @brief Unicode script "Old_Persian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OLD_PERSIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OLD_PERSIAN)

/*!
 @brief Unicode script "Kharoshthi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KHAROSHTHI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KHAROSHTHI)

/*!
 @brief Unicode script "Balinese".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BALINESE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BALINESE)

/*!
 @brief Unicode script "Cuneiform".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CUNEIFORM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CUNEIFORM)

/*!
 @brief Unicode script "Phoenician".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_PHOENICIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, PHOENICIAN)

/*!
 @brief Unicode script "Phags_Pa".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_PHAGS_PA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, PHAGS_PA)

/*!
 @brief Unicode script "Nko".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_NKO();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, NKO)

/*!
 @brief Unicode script "Sundanese".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SUNDANESE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SUNDANESE)

/*!
 @brief Unicode script "Batak".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BATAK();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BATAK)

/*!
 @brief Unicode script "Lepcha".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LEPCHA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LEPCHA)

/*!
 @brief Unicode script "Ol_Chiki".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OL_CHIKI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OL_CHIKI)

/*!
 @brief Unicode script "Vai".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_VAI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, VAI)

/*!
 @brief Unicode script "Saurashtra".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SAURASHTRA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SAURASHTRA)

/*!
 @brief Unicode script "Kayah_Li".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KAYAH_LI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KAYAH_LI)

/*!
 @brief Unicode script "Rejang".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_REJANG();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, REJANG)

/*!
 @brief Unicode script "Lycian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LYCIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LYCIAN)

/*!
 @brief Unicode script "Carian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CARIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CARIAN)

/*!
 @brief Unicode script "Lydian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LYDIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LYDIAN)

/*!
 @brief Unicode script "Cham".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CHAM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CHAM)

/*!
 @brief Unicode script "Tai_Tham".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAI_THAM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAI_THAM)

/*!
 @brief Unicode script "Tai_Viet".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAI_VIET();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAI_VIET)

/*!
 @brief Unicode script "Avestan".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_AVESTAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, AVESTAN)

/*!
 @brief Unicode script "Egyptian_Hieroglyphs".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_EGYPTIAN_HIEROGLYPHS();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, EGYPTIAN_HIEROGLYPHS)

/*!
 @brief Unicode script "Samaritan".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SAMARITAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SAMARITAN)

/*!
 @brief Unicode script "Mandaic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MANDAIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MANDAIC)

/*!
 @brief Unicode script "Lisu".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_LISU();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, LISU)

/*!
 @brief Unicode script "Bamum".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BAMUM();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BAMUM)

/*!
 @brief Unicode script "Javanese".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_JAVANESE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, JAVANESE)

/*!
 @brief Unicode script "Meetei_Mayek".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MEETEI_MAYEK();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MEETEI_MAYEK)

/*!
 @brief Unicode script "Imperial_Aramaic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_IMPERIAL_ARAMAIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, IMPERIAL_ARAMAIC)

/*!
 @brief Unicode script "Old_South_Arabian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OLD_SOUTH_ARABIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OLD_SOUTH_ARABIAN)

/*!
 @brief Unicode script "Inscriptional_Parthian".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_INSCRIPTIONAL_PARTHIAN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, INSCRIPTIONAL_PARTHIAN)

/*!
 @brief Unicode script "Inscriptional_Pahlavi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_INSCRIPTIONAL_PAHLAVI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, INSCRIPTIONAL_PAHLAVI)

/*!
 @brief Unicode script "Old_Turkic".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_OLD_TURKIC();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, OLD_TURKIC)

/*!
 @brief Unicode script "Brahmi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_BRAHMI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, BRAHMI)

/*!
 @brief Unicode script "Kaithi".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_KAITHI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, KAITHI)

/*!
 @brief Unicode script "Meroitic Hieroglyphs".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MEROITIC_HIEROGLYPHS();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MEROITIC_HIEROGLYPHS)

/*!
 @brief Unicode script "Meroitic Cursive".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MEROITIC_CURSIVE();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MEROITIC_CURSIVE)

/*!
 @brief Unicode script "Sora Sompeng".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SORA_SOMPENG();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SORA_SOMPENG)

/*!
 @brief Unicode script "Chakma".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_CHAKMA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, CHAKMA)

/*!
 @brief Unicode script "Sharada".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_SHARADA();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, SHARADA)

/*!
 @brief Unicode script "Takri".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_TAKRI();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, TAKRI)

/*!
 @brief Unicode script "Miao".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_MIAO();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, MIAO)

/*!
 @brief Unicode script "Unknown".
 */
inline JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_get_UNKNOWN();
J2OBJC_ENUM_CONSTANT(JavaLangCharacter_UnicodeScript, UNKNOWN)

FOUNDATION_EXPORT JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_ofWithInt_(jint codePoint);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_forNameWithNSString_(NSString *scriptName);

FOUNDATION_EXPORT IOSObjectArray *JavaLangCharacter_UnicodeScript_values();

FOUNDATION_EXPORT JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaLangCharacter_UnicodeScript *JavaLangCharacter_UnicodeScript_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangCharacter_UnicodeScript)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangCharacter")
