//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/security/auth/Destroyable.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthDestroyable")
#ifdef RESTRICT_JavaxSecurityAuthDestroyable
#define INCLUDE_ALL_JavaxSecurityAuthDestroyable 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthDestroyable 1
#endif
#undef RESTRICT_JavaxSecurityAuthDestroyable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxSecurityAuthDestroyable_) && (INCLUDE_ALL_JavaxSecurityAuthDestroyable || defined(INCLUDE_JavaxSecurityAuthDestroyable))
#define JavaxSecurityAuthDestroyable_

/*!
 @brief Allows for special treatment of sensitive information, when it comes to
 destroying or clearing of the data.
 */
@protocol JavaxSecurityAuthDestroyable < JavaObject >

/*!
 @brief Erases the sensitive information.
 Once an object is destroyed any calls
 to its methods will throw an <code>IllegalStateException</code>. If it does
 not succeed a DestroyFailedException is thrown.
 @throws DestroyFailedException
 if the information cannot be erased.
 */
- (void)destroy;

/*!
 @brief Returns <code>true</code> once an object has been safely destroyed.
 @return whether the object has been safely destroyed.
 */
- (jboolean)isDestroyed;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityAuthDestroyable)

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthDestroyable)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthDestroyable")
