//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/security/auth/callback/CallbackHandler.java
//

#include "../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackCallbackHandler")
#ifdef RESTRICT_JavaxSecurityAuthCallbackCallbackHandler
#define INCLUDE_ALL_JavaxSecurityAuthCallbackCallbackHandler 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthCallbackCallbackHandler 1
#endif
#undef RESTRICT_JavaxSecurityAuthCallbackCallbackHandler

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxSecurityAuthCallbackCallbackHandler_) && (INCLUDE_ALL_JavaxSecurityAuthCallbackCallbackHandler || defined(INCLUDE_JavaxSecurityAuthCallbackCallbackHandler))
#define JavaxSecurityAuthCallbackCallbackHandler_

@class IOSObjectArray;

/*!
 @brief Needs to be implemented by classes that want to handle authentication
 <code>Callback</code>s.
 A single method <code>handle(Callback[])</code> must be
 provided that checks the type of the incoming <code>Callback</code>s and reacts
 accordingly. <code>CallbackHandler</code>s can be installed per application. It is
 also possible to configure a system-default <code>CallbackHandler</code> by
 setting the <code>auth.login.defaultCallbackHandler</code> property in the
 standard <code>security.properties</code> file.
 */
@protocol JavaxSecurityAuthCallbackCallbackHandler < JavaObject >

/*!
 @brief Handles the actual <code>Callback</code>.
 A <code>CallbackHandler</code> needs to
 implement this method. In the method, it is free to select which <code>Callback</code>
 s it actually wants to handle and in which way. For example, a
 console-based <code>CallbackHandler</code> might choose to sequentially ask
 the user for login and password, if it implements these <code>Callback</code>
 s, whereas a GUI-based one might open a single dialog window for both
 values. If a <code>CallbackHandler</code> is not able to handle a specific
 <code>Callback</code>, it needs to throw an
 <code>UnsupportedCallbackException</code>.
 @param callbacks
 the array of <code>Callback</code>s that need handling
 @throws IOException
 if an I/O related error occurs
 @throws UnsupportedCallbackException
 if the <code>CallbackHandler</code> is not able to handle a
 specific <code>Callback</code>
 */
- (void)handleWithJavaxSecurityAuthCallbackCallbackArray:(IOSObjectArray *)callbacks;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityAuthCallbackCallbackHandler)

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthCallbackCallbackHandler)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackCallbackHandler")
