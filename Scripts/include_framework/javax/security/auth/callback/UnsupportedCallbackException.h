//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/security/auth/callback/UnsupportedCallbackException.java
//

#include "../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackUnsupportedCallbackException")
#ifdef RESTRICT_JavaxSecurityAuthCallbackUnsupportedCallbackException
#define INCLUDE_ALL_JavaxSecurityAuthCallbackUnsupportedCallbackException 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthCallbackUnsupportedCallbackException 1
#endif
#undef RESTRICT_JavaxSecurityAuthCallbackUnsupportedCallbackException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxSecurityAuthCallbackUnsupportedCallbackException_) && (INCLUDE_ALL_JavaxSecurityAuthCallbackUnsupportedCallbackException || defined(INCLUDE_JavaxSecurityAuthCallbackUnsupportedCallbackException))
#define JavaxSecurityAuthCallbackUnsupportedCallbackException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "../../../../java/lang/Exception.h"

@protocol JavaxSecurityAuthCallbackCallback;

/*!
 @brief Thrown when a <code>CallbackHandler</code> does not support a particular <code>Callback</code>
 .
 */
@interface JavaxSecurityAuthCallbackUnsupportedCallbackException : JavaLangException

#pragma mark Public

/*!
 @brief Creates a new exception instance and initializes it with just the
 unsupported <code>Callback</code>, but no error message.
 @param callback
 the <code>Callback</code>
 */
- (instancetype)initWithJavaxSecurityAuthCallbackCallback:(id<JavaxSecurityAuthCallbackCallback>)callback;

/*!
 @brief Creates a new exception instance and initializes it with both the
 unsupported <code>Callback</code> and an error message.
 @param callback
 the <code>Callback</code>
 @param message
 the error message
 */
- (instancetype)initWithJavaxSecurityAuthCallbackCallback:(id<JavaxSecurityAuthCallbackCallback>)callback
                                             withNSString:(NSString *)message;

/*!
 @brief Returns the unsupported <code>Callback</code> that triggered this exception.
 @return the <code>Callback</code>
 */
- (id<JavaxSecurityAuthCallbackCallback>)getCallback;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityAuthCallbackUnsupportedCallbackException)

FOUNDATION_EXPORT void JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_(JavaxSecurityAuthCallbackUnsupportedCallbackException *self, id<JavaxSecurityAuthCallbackCallback> callback);

FOUNDATION_EXPORT JavaxSecurityAuthCallbackUnsupportedCallbackException *new_JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_(id<JavaxSecurityAuthCallbackCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSecurityAuthCallbackUnsupportedCallbackException *create_JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_(id<JavaxSecurityAuthCallbackCallback> callback);

FOUNDATION_EXPORT void JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_withNSString_(JavaxSecurityAuthCallbackUnsupportedCallbackException *self, id<JavaxSecurityAuthCallbackCallback> callback, NSString *message);

FOUNDATION_EXPORT JavaxSecurityAuthCallbackUnsupportedCallbackException *new_JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_withNSString_(id<JavaxSecurityAuthCallbackCallback> callback, NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSecurityAuthCallbackUnsupportedCallbackException *create_JavaxSecurityAuthCallbackUnsupportedCallbackException_initWithJavaxSecurityAuthCallbackCallback_withNSString_(id<JavaxSecurityAuthCallbackCallback> callback, NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthCallbackUnsupportedCallbackException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthCallbackUnsupportedCallbackException")
