//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/net/ssl/SSLHandshakeException.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslSSLHandshakeException")
#ifdef RESTRICT_JavaxNetSslSSLHandshakeException
#define INCLUDE_ALL_JavaxNetSslSSLHandshakeException 0
#else
#define INCLUDE_ALL_JavaxNetSslSSLHandshakeException 1
#endif
#undef RESTRICT_JavaxNetSslSSLHandshakeException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxNetSslSSLHandshakeException_) && (INCLUDE_ALL_JavaxNetSslSSLHandshakeException || defined(INCLUDE_JavaxNetSslSSLHandshakeException))
#define JavaxNetSslSSLHandshakeException_

#define RESTRICT_JavaxNetSslSSLException 1
#define INCLUDE_JavaxNetSslSSLException 1
#include "../../../javax/net/ssl/SSLException.h"

/*!
 @brief The exception that is thrown when a handshake could not be completed
 successfully.
 */
@interface JavaxNetSslSSLHandshakeException : JavaxNetSslSSLException

#pragma mark Public

/*!
 @brief Constructs a new instance with the given detail message.
 */
- (instancetype)initWithNSString:(NSString *)reason;

/*!
 @brief Constructs a new instance with given detail message and cause.
  internal use only
 */
- (instancetype)initWithNSString:(NSString *)reason
                 withNSException:(NSException *)cause;

/*!
 @brief Constructs a new instance with given cause.
  internal use only
 */
- (instancetype)initWithNSException:(NSException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslSSLHandshakeException)

FOUNDATION_EXPORT void JavaxNetSslSSLHandshakeException_initWithNSString_(JavaxNetSslSSLHandshakeException *self, NSString *reason);

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *new_JavaxNetSslSSLHandshakeException_initWithNSString_(NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *create_JavaxNetSslSSLHandshakeException_initWithNSString_(NSString *reason);

FOUNDATION_EXPORT void JavaxNetSslSSLHandshakeException_initWithNSException_(JavaxNetSslSSLHandshakeException *self, NSException *cause);

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *new_JavaxNetSslSSLHandshakeException_initWithNSException_(NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *create_JavaxNetSslSSLHandshakeException_initWithNSException_(NSException *cause);

FOUNDATION_EXPORT void JavaxNetSslSSLHandshakeException_initWithNSString_withNSException_(JavaxNetSslSSLHandshakeException *self, NSString *reason, NSException *cause);

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *new_JavaxNetSslSSLHandshakeException_initWithNSString_withNSException_(NSString *reason, NSException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslSSLHandshakeException *create_JavaxNetSslSSLHandshakeException_initWithNSString_withNSException_(NSString *reason, NSException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslSSLHandshakeException)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslSSLHandshakeException")
