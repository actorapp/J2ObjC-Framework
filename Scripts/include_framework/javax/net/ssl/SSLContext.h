//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/net/ssl/SSLContext.java
//

#include "../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslSSLContext")
#ifdef RESTRICT_JavaxNetSslSSLContext
#define INCLUDE_ALL_JavaxNetSslSSLContext 0
#else
#define INCLUDE_ALL_JavaxNetSslSSLContext 1
#endif
#undef RESTRICT_JavaxNetSslSSLContext

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if !defined (JavaxNetSslSSLContext_) && (INCLUDE_ALL_JavaxNetSslSSLContext || defined(INCLUDE_JavaxNetSslSSLContext))
#define JavaxNetSslSSLContext_

@class IOSObjectArray;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandom;
@class JavaxNetSslSSLContextSpi;
@class JavaxNetSslSSLEngine;
@class JavaxNetSslSSLParameters;
@class JavaxNetSslSSLServerSocketFactory;
@class JavaxNetSslSSLSocketFactory;
@protocol JavaxNetSslSSLSessionContext;

/*!
 @brief The public API for secure socket protocol implementations.
 It acts as factory
 for <code>SSLSocketFactory</code>'s and <code>SSLEngine</code>s.
 */
@interface JavaxNetSslSSLContext : NSObject

#pragma mark Public

/*!
 @brief Creates an <code>SSLEngine</code> instance from this context.
 @return an <code>SSLEngine</code> instance from this context.
 @throws UnsupportedOperationException
 if the provider does not support the operation.
 */
- (JavaxNetSslSSLEngine *)createSSLEngine;

/*!
 @brief Creates an <code>SSLEngine</code> instance from this context with the
 specified hostname and port.
 @param peerHost
 the name of the host
 @param peerPort
 the port
 @return an <code>SSLEngine</code> instance from this context.
 @throws UnsupportedOperationException
 if the provider does not support the operation.
 */
- (JavaxNetSslSSLEngine *)createSSLEngineWithNSString:(NSString *)peerHost
                                              withInt:(jint)peerPort;

/*!
 @brief Returns the SSL session context that encapsulates the set of SSL sessions
 that can be used for handshake of client-side SSL sockets.
 @return the SSL client session context for this context or <code>null</code>
 if the underlying provider does not provide an implementation of
 the <code>SSLSessionContext</code> interface.
 */
- (id<JavaxNetSslSSLSessionContext>)getClientSessionContext;

/*!
 @brief Returns the default SSLContext.
 The default SSL context can be set with <code>setDefault</code>. If
 not, one will be created with <code>SSLContext.getInstance("Default")</code>
 , which will already be
 initialized.
 @throws NoSuchAlgorithmException if there is a problem creating
 the default instance.
 @since 1.6
 */
+ (JavaxNetSslSSLContext *)getDefault;

/*!
 @brief Returns the default SSL handshake parameters for SSLSockets
 created by this SSLContext.
 @throws UnsupportedOperationException
 @since 1.6
 */
- (JavaxNetSslSSLParameters *)getDefaultSSLParameters;

/*!
 @brief Creates a new <code>SSLContext</code> instance for the specified protocol.
 <p>The following protocols are supported:
 <table>
 <thead>
 <tr>
 <th>Protocol</th>
 <th>API Levels</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td>Default</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>SSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>SSLv3</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>TLS</td>
 <td>1+</td>
 </tr>
 <tr>
 <td>TLSv1</td>
 <td>1+</td>
 </tr>
 <tr>
 <td>TLSv1.1</td>
 <td>16+</td>
 </tr>
 <tr>
 <td>TLSv1.2</td>
 <td>16+</td>
 </tr>
 </tbody>
 </table>
 @param protocol
 the requested protocol to create a context for.
 @return the created <code>SSLContext</code> instance.
 @throws NoSuchAlgorithmException
 if no installed provider can provide the requested protocol
 @throws NullPointerException
 if <code>protocol</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol;

/*!
 @brief Creates a new <code>SSLContext</code> instance for the specified protocol from
 the specified provider.
 @param protocol
 the requested protocol to create a context for
 @param provider
 the provider that provides the requested protocol.
 @return an <code>SSLContext</code> for the requested protocol.
 @throws NoSuchAlgorithmException
 if the specified provider cannot provide the requested
 protocol.
 @throws NullPointerException
 if <code>protocol</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol
                          withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Creates a new <code>SSLContext</code> instance for the specified protocol from
 the specified provider.
 <p>The following combinations are supported:
 <table>
 <thead>
 <tr>
 <th>Protocol</th>
 <th>Provider</th>
 <th>API Levels</th>
 </tr>
 </thead>
 <tbody>
 <tr>
 <td>Default</td>
 <td>AndroidOpenSSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>SSL</td>
 <td>AndroidOpenSSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>SSL</td>
 <td>HarmonyJSSE</td>
 <td>9-19</td>
 </tr>
 <tr>
 <td>SSLv3</td>
 <td>AndroidOpenSSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>SSLv3</td>
 <td>HarmonyJSSE</td>
 <td>9-19</td>
 </tr>
 <tr>
 <td>TLS</td>
 <td>AndroidOpenSSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>TLS</td>
 <td>HarmonyJSSE</td>
 <td>1-19</td>
 </tr>
 <tr>
 <td>TLSv1</td>
 <td>AndroidOpenSSL</td>
 <td>9+</td>
 </tr>
 <tr>
 <td>TLSv1</td>
 <td>HarmonyJSSE</td>
 <td>1-19</td>
 </tr>
 <tr>
 <td>TLSv1.1</td>
 <td>AndroidOpenSSL</td>
 <td>16+</td>
 </tr>
 <tr>
 <td>TLSv1.2</td>
 <td>AndroidOpenSSL</td>
 <td>16+</td>
 </tr>
 </tbody>
 </table>
 <p><strong>NOTE:</strong> The best practice is to rely on platform
 defaults rather than explicitly specify a provider.
 <code>getDefault()</code> and <code>getInstance(String)</code> are normally
 preferred over this method.
 @param protocol
 the requested protocol to create a context for.
 @param provider
 the name of the provider that provides the requested protocol.
 @return an <code>SSLContext</code> for the requested protocol.
 @throws NoSuchAlgorithmException
 if the specified provider cannot provider the requested
 protocol.
 @throws NoSuchProviderException
 if the specified provider does not exits.
 @throws NullPointerException
 if <code>protocol</code> is <code>null</code> (instead of
 NoSuchAlgorithmException as in 1.4 release)
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol
                                      withNSString:(NSString *)provider;

/*!
 @brief Returns the name of the secure socket protocol of this instance.
 @return the name of the secure socket protocol of this instance.
 */
- (NSString *)getProtocol;

/*!
 @brief Returns the provider of this <code>SSLContext</code> instance.
 @return the provider of this <code>SSLContext</code> instance.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the SSL session context that encapsulates the set of SSL sessions
 that can be used for handshake of server-side SSL sockets.
 @return the SSL server session context for this context or <code>null</code>
 if the underlying provider does not provide an implementation of
 the <code>SSLSessionContext</code> interface.
 */
- (id<JavaxNetSslSSLSessionContext>)getServerSessionContext;

/*!
 @brief Returns a server socket factory for this instance.
 @return a server socket factory for this instance.
 */
- (JavaxNetSslSSLServerSocketFactory *)getServerSocketFactory;

/*!
 @brief Returns a socket factory for this instance.
 @return a socket factory for this instance.
 */
- (JavaxNetSslSSLSocketFactory *)getSocketFactory;

/*!
 @brief Returns SSL handshake parameters for SSLSockets that includes
 all supported cipher suites and protocols.
 @throws UnsupportedOperationException
 @since 1.6
 */
- (JavaxNetSslSSLParameters *)getSupportedSSLParameters;

/*!
 @brief Initializes this <code>SSLContext</code> instance.
 Three aspects of the context can be configured
 during initialization:
 <ul>
 <li>Providers of key material for key exchange and peer authentication
 (<code>KeyManager</code> instances),</li>
 <li>Providers of trust decisions about peers (<code>TrustManager</code> instances),
 </li>
 <li>Provider of randomness (<code>SecureRandom</code> instance).</li>
 </ul>
 <p>For each type of <code>KeyManager</code> or <code>TrustManager</code> used by this context, only the
 first matching instance from <code>km</code> or <code>tm</code> will be used. For example, only the
 first instance of <code>X509TrustManager</code> from <code>tm</code> will be used.
 <p>For any parameter set to <code>null</code> defaults will be used. In that case, the installed
 security providers will be searched for the highest priority implementation of the required
 primitives. For <code>km</code> and <code>tm</code>, the highest priority implementation
 of <code>KeyManagerFactory</code> and <code>TrustManagerFactory</code> will be used to obtain the
 required types of <code>KeyManager</code> and <code>TrustManager</code>. For <code>sr</code>, the default
 <code>SecureRandom</code> implementation will be used.
 @param km
 the key sources or <code>null</code> for default.
 @param tm
 the trust decision sources or <code>null</code> for default.
 @param sr
 the randomness source or <code>null</code> for default.
 @throws KeyManagementException
 if initializing this instance fails.
 */
- (void)init__WithJavaxNetSslKeyManagerArray:(IOSObjectArray *)km
            withJavaxNetSslTrustManagerArray:(IOSObjectArray *)tm
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the default SSLContext instance as returned by <code>getDefault()</code>
  to a non-null initialized value.
 @throws NullPointerException on a null argument
 @since 1.6
 */
+ (void)setDefaultWithJavaxNetSslSSLContext:(JavaxNetSslSSLContext *)sslContext;

#pragma mark Protected

/*!
 @brief Creates a new <code>SSLContext</code>.
 @param contextSpi
 the implementation delegate.
 @param provider
 the provider.
 @param protocol
 the protocol name.
 */
- (instancetype)initWithJavaxNetSslSSLContextSpi:(JavaxNetSslSSLContextSpi *)contextSpi
                        withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                    withNSString:(NSString *)protocol;

@end

J2OBJC_STATIC_INIT(JavaxNetSslSSLContext)

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getDefault();

FOUNDATION_EXPORT void JavaxNetSslSSLContext_setDefaultWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *sslContext);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_(NSString *protocol);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_withNSString_(NSString *protocol, NSString *provider);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_withJavaSecurityProvider_(NSString *protocol, JavaSecurityProvider *provider);

FOUNDATION_EXPORT void JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContext *self, JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol);

FOUNDATION_EXPORT JavaxNetSslSSLContext *new_JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslSSLContext *create_JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslSSLContext)

#endif


#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslSSLContext")
