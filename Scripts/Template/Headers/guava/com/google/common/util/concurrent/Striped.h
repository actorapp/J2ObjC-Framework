//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:../java_deps/build_result/guava-19.0-sources.jar!com/google/common/util/concurrent/Striped.java
//

#include "../../../../../../J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentStriped
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentStriped
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped
#define INCLUDE_ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped 1
#endif
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped
#define INCLUDE_ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped 1
#endif
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped
#define INCLUDE_ComGoogleCommonUtilConcurrentStriped 1
#endif

#if !defined (ComGoogleCommonUtilConcurrentStriped_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped || defined(INCLUDE_ComGoogleCommonUtilConcurrentStriped))
#define ComGoogleCommonUtilConcurrentStriped_

@protocol JavaLangIterable;

@interface ComGoogleCommonUtilConcurrentStriped : NSObject

#pragma mark Public

- (id<JavaLangIterable>)bulkGetWithJavaLangIterable:(id<JavaLangIterable>)keys;

- (id)getWithId:(id)key;

- (id)getAtWithInt:(jint)index;

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakLockWithInt:(jint)stripes;

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakReadWriteLockWithInt:(jint)stripes;

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakSemaphoreWithInt:(jint)stripes
                                                           withInt:(jint)permits;

+ (ComGoogleCommonUtilConcurrentStriped *)lockWithInt:(jint)stripes;

+ (ComGoogleCommonUtilConcurrentStriped *)readWriteLockWithInt:(jint)stripes;

+ (ComGoogleCommonUtilConcurrentStriped *)semaphoreWithInt:(jint)stripes
                                                   withInt:(jint)permits;

- (jint)size;

#pragma mark Package-Private

- (jint)indexForWithId:(id)key;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lockWithInt_(jint stripes);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakLockWithInt_(jint stripes);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_semaphoreWithInt_withInt_(jint stripes, jint permits);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakSemaphoreWithInt_withInt_(jint stripes, jint permits);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_readWriteLockWithInt_(jint stripes);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakReadWriteLockWithInt_(jint stripes);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped)

#endif

#if !defined (ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped || defined(INCLUDE_ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped))
#define ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_

@interface ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped : ComGoogleCommonUtilConcurrentStriped {
 @public
  jint mask_;
}

#pragma mark Public

- (id)getWithId:(id)key;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)stripes;

- (jint)indexForWithId:(id)key;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped *self, jint stripes);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped)

#endif

#if !defined (ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped || defined(INCLUDE_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped))
#define ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_

@class JavaLangRefReferenceQueue;
@class JavaUtilConcurrentAtomicAtomicReferenceArray;
@protocol ComGoogleCommonBaseSupplier;

@interface ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped : ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped {
 @public
  JavaUtilConcurrentAtomicAtomicReferenceArray *locks_;
  id<ComGoogleCommonBaseSupplier> supplier_;
  jint size_;
  JavaLangRefReferenceQueue *queue_;
}

#pragma mark Public

- (id)getAtWithInt:(jint)index;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped, locks_, JavaUtilConcurrentAtomicAtomicReferenceArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped, supplier_, id<ComGoogleCommonBaseSupplier>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped, queue_, JavaLangRefReferenceQueue *)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *create_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped)

#endif

#if !defined (ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped || defined(INCLUDE_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped))
#define ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_

@protocol ComGoogleCommonBaseSupplier;
@protocol JavaUtilConcurrentConcurrentMap;

@interface ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped : ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped {
 @public
  id<JavaUtilConcurrentConcurrentMap> locks_;
  id<ComGoogleCommonBaseSupplier> supplier_;
  jint size_;
}

#pragma mark Public

- (id)getAtWithInt:(jint)index;

- (jint)size;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped, locks_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped, supplier_, id<ComGoogleCommonBaseSupplier>)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *new_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *create_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped)

#endif

#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentStriped")
